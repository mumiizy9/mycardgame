รายการอัปเดตต่อไปนี้

เพิ่มไฟล์ \index.html
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Epic Seven Card Auto Battle</title>
    <link rel="stylesheet" href="css/style.css" />
    <link rel="icon" href="favicon.ico" />
</head>
<body class="dark-bg">

    <!-- NAVBAR -->
    <header>
        <nav class="navbar">
            <div class="logo">EPIC Seven - Card Battle</div>
            <ul class="menu">
                <li><button id="btnTeam">จัดทีม</button></li>
                <li><button id="btnBattle">ต่อสู้</button></li>
                <li><button id="btnInventory">คลังไอเท็ม</button></li>
                <li><button id="btnQuest">เควสต์</button></li>
                <li><button id="btnShop">ร้านค้า</button></li>
                <li><button id="btnGacha">กาชา</button></li>
                <li><button id="btnCharacter">คลังตัวละคร</button></li>
                <li><button id="btnAnnouncement">ประกาศ</button></li>
                <li><button id="btnChat">แชท</button></li>
            </ul>
            <div class="profile">
                <span id="playerName"></span>
                <button id="btnLogin">เข้าสู่ระบบ</button>
            </div>
        </nav>
    </header>

    <!-- POPUP LAYER (ทุก feature เป็น popup ไม่ reload หน้า/เลื่อน) -->
    <div id="popupLayer"></div>

    <!-- MAIN BATTLE FIELD (หน้าแสดงทีม/มอนเตอร์/auto battle) -->
    <main id="mainBattlefield" class="hide">
        <section class="battlefield">
            <!-- PLAYER TEAM (4 ใบ) -->
            <div class="card-row user">
                <!-- card generation by JS -->
            </div>
            <!-- MONSTER TEAM (4 ใบ) -->
            <div class="card-row monster">
                <!-- card generation by JS -->
            </div>
            <!-- SPD BARS -->
            <div class="spd-bar-container">
                <!-- generated by JS -->
            </div>
        </section>
        <section class="battle-controls">
            <button id="btnStartAuto" class="primary-btn">Auto Battle</button>
            <button id="btnBack" class="secondary-btn">กลับ</button>
        </section>
    </main>

    <!-- FOOTER -->
    <footer>
        <small style="color: #aaa;">&copy; 2024 - Epic Seven Fan Project Demo Frontend</small>
    </footer>

    <!-- JS -->
    <script src="js/utils.js"></script>
    <script src="js/reward.js"></script>
    <script src="js/ui.js"></script>
    <script src="js/team.js"></script>
    <script src="js/battle.js"></script>
    <script src="js/ai.js"></script>
    <script src="js/animationEngine.js"></script>
    <script src="js/effect.js"></script>
    <script src="js/result.js"></script>
    <script src="js/popupManager.js"></script>
    <script src="js/inventory.js"></script>
    <script src="js/upgrade.js"></script>
    <script src="js/rune.js"></script>
    <script src="js/gacha.js"></script>
    <script src="js/quest.js"></script>
    <script src="js/stage.js"></script>
    <script src="js/shop.js"></script>
    <script src="js/announcement.js"></script>
    <script src="js/redeem.js"></script>
    <script src="js/auth.js"></script>
    <script src="js/characterCollection.js"></script>
    <script src="js/passive.js"></script>
    <script src="js/chat.js"></script>
    <script src="js/gachaLog.js"></script>
    <script src="js/energy.js"></script>
    <script src="js/localization.js"></script>
</body>
</html>

เพิ่มไฟล์ js\ui.js
// js/ui.js
document.addEventListener('DOMContentLoaded', () => {
    // Menu button event mapping: [btnId, popupId or function]
    const menuActions = {
        btnTeam: () => openPopup('team'),
        btnBattle: () => openPopup('Battle'),
        btnInventory: () => openPopup('inventory'),
        btnQuest: () => openPopup('quest'),
        btnShop: () => openPopup('shop'),
        btnGacha: () => openPopup('gacha'),
        btnCharacter: () => openPopup('characterCollection'),
        btnAnnouncement: () => openPopup('announcement'),
        btnChat: () => openPopup('chat'),
        btnLogin: () => openPopup('login'),
    };

    Object.entries(menuActions).forEach(([btnId, action]) => {
        const btn = document.getElementById(btnId);
        if (btn) btn.addEventListener('click', action);
    });

    // Popup Layer logic
    window.openPopup = function(type, data = {}) {
        const popupLayer = document.getElementById('popupLayer');
        popupLayer.innerHTML = renderPopup(type, data);
        popupLayer.classList.add('active');
    };

    // Close popup
    window.closePopup = function() {
        const popupLayer = document.getElementById('popupLayer');
        popupLayer.innerHTML = '';
        popupLayer.classList.remove('active');
    };

    // Render central popup UI (type: string, data: Object)
    function renderPopup(type, data) {
        // Popup templates for each feature
        const templates = {
            team: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>จัดทีม</h2><div id="teamEditArea"></div></div>`,
            inventory: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>คลังไอเท็ม</h2><div id="inventoryArea"></div></div>`,
            quest: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>เควสต์</h2><div id="questArea"></div></div>`,
            shop: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>ร้านค้า</h2><div id="shopArea"></div></div>`,
            gacha: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>กาชา</h2><div id="gachaArea"></div></div>`,
            characterCollection: `<div class="popup"><button class="close" onclick="closePopup()">×</button>
                <h2>คลังตัวละคร</h2><div id="characterArea"></div></div>`,
            announcement: `<div class="popup large"><button class="close" onclick="closePopup()">×</button>
                <h2>ประกาศ</h2><div id="announcementArea"></div></div>`,
            chat: `<div class="popup tall"><button class="close" onclick="closePopup()">×</button>
                <h2>แชท</h2><div id="chatArea"></div></div>`,
            login: `<div class="popup small"><button class="close" onclick="closePopup()">×</button>
                <h2>เข้าสู่ระบบ</h2>
                <input id="userId" placeholder="User ID" /><input id="userPass" type="password" placeholder="Password" />
                <button id="doLoginBtn">เข้าสู่ระบบ</button>
                <div id="loginHint"></div>
                </div>`,
        };
        if (!templates[type]) return '<div class="popup"><button class="close" onclick="closePopup()">×</button><p>ยังไม่รองรับ</p></div>';
        return templates[type];
    }

    // Escape popup with ESC key
    document.addEventListener('keyup', (ev) => {
        if (ev.key === 'Escape') closePopup();
    });

    // Hide battlefield when clicking "Back"
    const btnBack = document.getElementById('btnBack');
    if (btnBack) btnBack.addEventListener('click', () => {
        document.getElementById('mainBattlefield').classList.add('hide');
    });

    // Responsive popup layer CSS logic (for .active popup display)
    // (Style in css/style.css, eg. for .popup, .popup.large, .popup.tall, etc.)

    // Helper: show player name if logged in
    window.setPlayerName = function(name) {
        document.getElementById('playerName').textContent = name || '';
    };

    // Helper: trigger noti dot (menu) if new message (ex. quest, announcement)
    window.setMenuNoti = function(btnId, show) {
        const btn = document.getElementById(btnId);
        if (btn) {
            if (show) btn.classList.add('noti');
            else btn.classList.remove('noti');
        }
    };

    // Helper: clear all popup
    window.clearAllPopup = closePopup;
});

เพิ่มไฟล์ css\style.css
/* Main color theme */
:root {
  --dark-bg: #191c21;
  --panel-bg: #23242a;
  --pop-bg: #1d2230;
  --accent: #3fa8ff;
  --accent2: #ff6565;
  --secondary: #e6f1ff;
  --border: #33364a;
  --card-bg: #25293c;
  --font-main: 'Prompt', 'Sarabun', Arial, sans-serif;
}

body,
html {
  margin: 0;
  padding: 0;
  background: var(--dark-bg);
  color: var(--secondary);
  font-family: var(--font-main);
  font-size: 17px;
  transition: background 0.2s;
  height: 100%;
  min-height: 100vh;
}
.dark-bg {
  background: var(--dark-bg)!important;
}

header, nav {
  width: 100vw;
  background: var(--panel-bg);
  position: sticky; top: 0;
  z-index: 40;
}

.navbar {
  display: flex; justify-content: space-between;
  align-items: center; padding: 0.3em 3vw;
}
.logo {
  font-weight: bold;
  font-size: 1.2em;
  letter-spacing: 1px;
  color: var(--accent);
}
.menu {
  list-style: none; display: flex; align-items: center; gap: .6em;
  margin: 0; padding: 0;
}
.menu li button {
  background: transparent; border: none; color: var(--secondary);
  font-size: 1em; padding: .45em 1em;
  border-radius: 30px; cursor: pointer;
  transition: background .14s;
  position: relative;
}
.menu li button.noti::after {
  content: "";
  background: var(--accent2);
  width: 10px; height: 10px;
  border-radius:100%; position: absolute;
  top: .3em; right: .7em;
  box-shadow: 0 0 6px 3px #ffabab77;
}

.menu li button:hover,
.menu li button:focus {
  background: #2c2e39;
  color: var(--accent);
}
.profile { display: flex; align-items: center; gap: 1em; }
#playerName { font-weight: 600; }
.hide { display: none!important; }


/* ========== MAIN BATTLEFIELD ========== */
main#mainBattlefield {
  max-width: 1180px;
  margin: 1.3em auto 0 auto;
  background: var(--panel-bg);
  border-radius: 15px;
  box-shadow: 0 2px 50px #0004;
  padding: 1.2em .5em 1.5em .5em;
  min-height: 430px;
  display: block;
  transition: all .18s;
}
.battlefield {
  position: relative;
  width: 100%;
  min-height: 320px;
  background: linear-gradient(0deg, #202639 80%, #1a222e 100%);
  border-radius: 16px;
  margin: 0 auto 10px auto; 
  box-shadow: 0 0 35px 10px #04071c30 inset;
  overflow: hidden;
  padding: 1em 0;
}
.card-row {
  display: flex;
  justify-content: space-evenly;
  align-items: flex-end;
  margin: 0.4em auto;
  gap: 13px;
  min-height: 130px;
  z-index: 2;
  position: relative;
}

/* User's team on top, monsters below */
.card-row.user { margin-bottom: 46px; }
.card-row.monster { margin-bottom: 18px; }

.spd-bar-container {
  position: absolute; width: 100%;
  left: 0; top: 48%;
  transform: translateY(-50%);
  display: flex; justify-content: center;
  gap: 24px; pointer-events: none;
  z-index: 3;
}
.spd-bar {
  width: 90px; height: 8px;
  background: #303742;
  border-radius: 6px;
  margin-bottom: 3px;
  overflow: hidden;
  box-shadow: 0 2px 8px #0006 inset;
}
.spd-bar-fill {
  background: linear-gradient(90deg, var(--accent), #9be7ff 70%);
  height: 100%; border-radius: 6px;
  transition: width 0.23s;
}

.battle-controls {
  display: flex; justify-content: center;
  gap: 30px; padding: 1.2em 0;
}
.primary-btn, .secondary-btn {
  background: var(--accent);
  border: none;
  color: #fff;
  font-size: 1.04em;
  font-weight: bold;
  padding: .65em 2.2em;
  border-radius: 35px;
  cursor: pointer;
  letter-spacing: .05em;
  box-shadow: 0 2px 8px #41a5f68e;
  margin-bottom: .4em;
  transition: all .14s;
}
.primary-btn:hover { background: #135488;}
.secondary-btn {
  background: #373958; color: #ccd9ef; box-shadow: none;
}
.secondary-btn:hover { background: #29304b; color: #fff; }

/* CARD STYLE - for hero & monster */
.card {
  background: var(--card-bg);
  border-radius: 15px;
  box-shadow: 0 0 8px 1px #23294a78, 0 1px 0 #3fa8ff2a;
  width: 116px; min-height: 136px;
  position: relative;
  display: flex; flex-direction: column;
  align-items: center; justify-content: flex-end;
  transition: transform .16s;
  overflow: visible;
  border: 2px solid #1d2238;
}
.card .hero-img, .card .mon-img {
  width: 75px; height: 75px;
  border-radius: 50%;
  margin-top: 17px;
  background: #13131c;
  object-fit: cover; object-position: center;
  outline: 3px solid var(--accent);
  box-shadow: 0 0 12px #3fa8ff33;
}
.card .statbar {
  width: 85%; height: 8px;
  border-radius: 5px;
  margin: 5px auto 5px auto;
  background: #171c2d;
  box-shadow: 0 1px 8px #0006 inset;
  overflow: hidden;
}
.card .hp-fill {
  background: linear-gradient(90deg, #55dcab, #4e93f1 80%);
  height: 100%; border-radius: 3px;
  transition: width 0.27s;
}
.card .name {
  font-size: .98em; font-weight: bold; margin-top: 7px;
  text-shadow: 0 2px 9px #0008;
  color: #fff;
  letter-spacing: .03em;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 95px;
  text-align: center;
}
.card .damage-popup {
  position: absolute;
  left: 60%; top: 23%;
  font-size: 1.15em;
  color: var(--accent2);
  font-weight: bold;
  transform: translate(-50%, -60%) scale(1.05);
  opacity: 0;
  pointer-events: none;
  animation: damageJump .7s cubic-bezier(.5,-1, .2, 1.8) 1;
}

@keyframes damageJump {
  0%   { opacity: 0; transform: translate(-50%, -80%) scale(0.7);}
  21%  { opacity: 1; transform: translate(-50%, -120%) scale(1.2);}
  69%  { opacity: 1; transform: translate(-50%, -115%) scale(1.0);}
  100% { opacity: 0; transform: translate(-50%,-70%) scale(.60);}
}

/* Buff & debuff icon overlay on card */
.card .stat-icons {
  display: flex; flex-wrap: wrap;
  gap: 1px; margin-bottom: 4px; justify-content: center;
}
.card .stat-icon {
  width: 18px; height: 18px; border-radius: 50%;
  background: #232c48; border: 2px solid #6ad2ff77;
  display: flex; align-items: center; justify-content: center;
  font-size: 1em; margin-left: 1px;
  box-shadow: 0 0 5px #0088ffc9;
  position: relative;
  cursor: pointer;
}
.card .stat-icon.buff { border-color: #15ef92; }
.card .stat-icon.debuff { border-color: #eb5454; }

/* Tooltip */
.tooltip {
  position: absolute;
  left: 50%; bottom: 120%; z-index: 24;
  background: #22253c;
  color: #daf5ff;
  padding: 4px 12px;
  border-radius: 8px;
  font-size: .90em; min-width: 87px; max-width: 200px;
  box-shadow: 0 8px 25px #0079ff41;
  pointer-events: none; opacity: 0; transition: all .12s;
}
.stat-icon:hover .tooltip { opacity: 1; }

/* ========== POPUPS ========== */
#popupLayer {
  position: fixed;
  top:0; left:0; z-index: 99;
  width:100vw; height:100vh;
  display:flex; align-items:center; justify-content:center;
  background: #050925d8;
  pointer-events: none;
  opacity: 0;
  transition: opacity .18s;
}
#popupLayer.active {
  pointer-events: all; opacity: 1;
}
.popup {
  background: var(--pop-bg);
  border-radius: 18px;
  padding: 2em 1.5em 1.5em 1.5em;
  box-shadow: 0 0 80px #3138aa51, 0 1px 13px #49d9ff1b;
  min-width: 340px;
  min-height: 120px;
  max-width: 99vw;
  max-height: 90vh;
  overflow-y: auto;
  color: #fff;
  position: relative;
  animation: popupOpen .25s cubic-bezier(.7,0, .09,1.55);
}
@keyframes popupOpen {
 0% { transform: scale(.82) translateY(50px) rotate(-7deg);}
 100%{ transform: scale(1) translateY(0);}
}
.popup.large { min-width: 700px; max-width: 99vw; min-height: 340px;}
.popup.tall { min-height: 390px; max-width: 550px;}
.popup.small { min-width: 260px;max-width:327px;}

.popup .close {
  position:absolute;
  top:10px; right: 10px;
  background: #293e69;
  color: #dff6fc;
  border:none; font-size:1.45em;
  width:30px; height:30px;
  border-radius:100%; cursor:pointer;
  opacity: .85;
  z-index: 5;
  transition: background .15s;
}
.popup .close:hover { background: var(--accent2); color: #fff; }

/* Pop-up area blocks (for slot areas) */
#teamEditArea, #questArea, #gachaArea, #characterArea, #announcementArea,
#chatArea, #shopArea, #inventoryArea { margin: 16px 0 0 0;}

/* Input Buttons/Fields */
input, select, textarea {
  background: #1e2532;
  border: 2px solid #314a6a;
  color: #eee;
  padding: 9px 14px;
  border-radius: 9px;
  font-size: 1em; outline: none;
  margin: 5px 0;
  box-shadow: 0 2px 8px #0067ad20;
  transition: border .13s;
}
input:focus { border:2px solid var(--accent);}
input[type="password"] { letter-spacing: .2em; }

button:focus { outline: 2px solid var(--accent);}
button:active { filter: brightness(.93);}
::-webkit-scrollbar { width: 9px; background: #233;}
::-webkit-scrollbar-thumb { background: #303860; border-radius: 7px; box-shadow: 0 2px 12px #152a;}

/* Footer */
footer {
  margin: 0;
  background: #141520;
  color: #c9d1e6bb;
  text-align: center;
  font-size: .96em;
  padding: 16px 0 11px 0;
}

/* ========== RESPONSIVE DESIGN ========== */
@media (max-width: 750px) {
  .battlefield { min-height: 240px; }
  .card { width: 81px; min-height: 82px; }
  .card .hero-img, .card .mon-img { width: 52px; height: 52px;}
  .popup.large { min-width: 97vw;}
  .popup.tall { min-width: 97vw;}
  main#mainBattlefield { padding: .51em 0; border-radius: 6px;}
  .navbar { flex-direction:column; gap:.5em;}
  .menu { flex-wrap: wrap; gap: .19em 1em; margin-bottom:.3em;}
}

@media (max-width: 540px) {
  .card { width: 66px; }
  .popup { padding:1em .65em .8em .65em; }
}

เพิ่มไฟล์ data/char/astra.json
{
  "id": "astra",
  "type": "hero",
  "name": "Astra",
  "element": "water",
  "class": "knight",
  "rarity": 5,
  "star": 5,
  "level": 1,
  "level_max": 50,
  "exp": 0,
  "exp_max": 600,
  "hp": 1064,
  "atk": 116,
  "def": 273,
  "spd": 100,
  "crit_rate": 15,
  "crit_dmg": 150,
  "effectiveness": 0,
  "resistance": 20,
  "skills": [
    {
      "id": "astra_s1",
      "name": "Sword Slash",
      "type": "attack",
      "desc": "โจมตีเป้าหมาย 1 ตัว มีโอกาสติด [def break] 1 เทิร์น",
      "multiplier": 1.02,
      "effect": {
        "debuff": [
          { "type": "def_break", "turn": 1, "chance": 35 }
        ]
      },
      "cooldown": 0
    },
    {
      "id": "astra_s2",
      "name": "Guardian Blessing",
      "type": "buff",
      "desc": "เพิ่ม DEFให้ทั้งทีม 2 เทิร์น",
      "multiplier": 0,
      "effect": {
        "buff": [
          { "type": "def_up", "turn": 2 }
        ]
      },
      "cooldown": 3
    },
    {
      "id": "astra_s3",
      "name": "Aegis Pierce",
      "type": "attack",
      "desc": "โจมตีหมู่ ศัตรูทุกตัว โอกาสติด stunned 1 เทิร์น",
      "multiplier": 1.7,
      "effect": {
        "debuff": [
          { "type": "stun", "turn": 1, "chance": 50 }
        ]
      },
      "cooldown": 5
    }
  ],
  "passive": "astra_passive",
  "img": "astra.png"
}

เพิ่มไฟล์ data/char/slime_basic.json
{
  "id": "slime_basic",
  "type": "monster",
  "name": "Slime (Basic)",
  "element": "earth",
  "class": "monster",
  "rarity": 1,
  "level": 1,
  "level_max": 20,
  "exp": 0,
  "exp_max": 100,
  "hp": 240,
  "atk": 48,
  "def": 24,
  "spd": 70,
  "crit_rate": 0,
  "crit_dmg": 120,
  "effectiveness": 0,
  "resistance": 0,
  "skills": [
    {
      "id": "slime_s1",
      "name": "Bodyslam",
      "type": "attack",
      "desc": "โจมตีเป้าหมายเดียว",
      "multiplier": 1.1,
      "effect": {},
      "cooldown": 0
    }
  ],
  "img": "slime_basic.png"
}

เพิ่มไฟล์ team.html
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Epic Seven - จัดทีม</title>
    <link rel="stylesheet" href="css/style.css" />
</head>
<body class="dark-bg">

<header>
    <nav class="navbar">
        <div class="logo">EPIC Seven - Card Battle</div>
        <ul class="menu">
            <li><button onclick="window.location.href='index.html'">หน้าหลัก</button></li>
            <li><button onclick="window.location.href='team.html'" class="noti">จัดทีม</button></li>
            <li><button id="btnBack">กลับ</button></li>
        </ul>
        <div class="profile">
            <span id="playerName"></span>
            <button id="btnLogin">เข้าสู่ระบบ</button>
        </div>
    </nav>
</header>

<main id="mainTeamSetup" style="max-width: 1000px; margin:20px auto;background:var(--panel-bg);border-radius:12px;box-shadow:0 1px 20px #0006;padding:26px 8px;">
    <h2 style="margin-bottom:0.8em;">จัดทีมสำหรับต่อสู้</h2>
    <div class="team-section">
        <h3>ทีมของฉัน (สูงสุด 4 ตัว)</h3>
        <div id="teamSlotBar" class="card-row user"></div>
        <button class="primary-btn" id="btnSaveTeam" style="margin-top:18px;">บันทึกทีม</button>
    </div>
    <hr style="margin: 32px 0 18px 0; border:1px solid var(--border);">
    <h4>ตัวละครที่มี (ลากขึ้นข้างบนเพื่อจัดทีม)</h4>
    <div id="charCollection" class="card-row" style="flex-wrap:wrap; gap:15px 8px; justify-content:flex-start;"></div>
</main>

<div id="popupLayer"></div>

<footer>
    <small style="color: #aaa;">&copy; 2024 - Epic Seven Fan Project Demo Frontend</small>
</footer>

<script src="js/utils.js"></script>
<script src="js/ui.js"></script>
<script src="js/team.js"></script>
</body>
</html>

เพิ่มไฟล์ js/team.js
// js/team.js

const maxTeam = 4;

let allChars = [];   // ทั้งหมดที่ผู้เล่นมี
let team = [];       // id ตัวที่เลือก

/**
 * โหลดตัวละครจากไฟล์ (mock: as static, ในโปรดักชัน fetch จริง)
 */
async function loadCharacters() {
    // สมมติ user มี asra กับ slime_basic (เพิ่มได้ในภายหลัง)
    let charIds = ['astra', 'slime_basic'];
    let res = await Promise.all(
        charIds.map(id => fetch(`data/char/${id}.json`).then(r => r.json()))
    );
    allChars = res;
}

/**
 * โหลดทีมจาก LocalStorage
 */
function loadTeam() {
    let t = localStorage.getItem('userTeam');
    if (!t) team = [];
    else team = JSON.parse(t);
}

/**
 * เซฟทีมลง LocalStorage
 */
function saveTeam() {
    const cleanTeam = team.filter(id => !!id); // แก้ไข: กรอง id ที่มีจริงเท่านั้น
    localStorage.setItem('userTeam', JSON.stringify(cleanTeam)); // ใช้ cleanTeam
    alert("บันทึกทีมสำเร็จ!");
}

/**
 * render UI slot ทีม (สูงสุด 4)
 */
function renderTeamBar() {
    const el = document.getElementById('teamSlotBar');
    if (!el) return; // แก้ไข: ป้องกันกรณี element ไม่เจอ
    el.innerHTML = '';
    for (let i = 0; i < maxTeam; i++) {
        let char = allChars.find(c=>c.id===team[i]);
        let slot = document.createElement('div');
        slot.className = 'card';
        slot.style.minHeight = "140px";
        slot.dataset.idx = i;
        if (char) {
            slot.innerHTML = `
                <img src="img/char/${char.img}" class="hero-img" alt="${char.name}">
                <div class="name">${char.name}</div>
                <button class="primary-btn" style="margin:7px 0 4px 0;font-size:.93em;" onclick="removeFromTeam(${i})">นำออก</button>
            `;
        } else {
            slot.innerHTML = `<div style="opacity:.44;margin-top:30px;text-align:center;">ว่าง</div>`;
            slot.style.background = '#262a39b2';
        }
        el.appendChild(slot);
    }
}

/**
 * render คลังตัวละคร ดึงจาก allChars ทั้งหมด
 */
function renderCharCollection() {
    const el = document.getElementById('charCollection');
    if (!el) return; // แก้ไข: ป้องกันกรณี element ไม่เจอ
    el.innerHTML = '';
    allChars.forEach(c => {
        // ถ้ามีในทีมแล้ว ไม่ให้ลากซ้ำ
        let inTeam = team.includes(c.id);
        let div = document.createElement('div');
        div.className = 'card';
        div.draggable = !inTeam;
        div.style.opacity = inTeam ? '.34' : '1.0';
        div.style.cursor = inTeam ? "not-allowed" : "grab";
        div.innerHTML = `
            <img src="img/char/${c.img}" class="hero-img" alt="${c.name}" >
            <div class="name">${c.name}</div>
            <div style="font-size:.92em;margin-bottom:3px;">Lv.${c.level} &nbsp; <small class="stat-bar">${c.hp} HP</small></div>
        `;
        // Popover info
        div.addEventListener('click', e=>{
            openCharInfoPopup(c);
        });
        // Drag: เลือกใส่ทีม
        div.addEventListener('dragstart', ev=>{
            ev.dataTransfer.setData("text/plain", c.id);
        });
        el.appendChild(div);
    });
    // ทีมรับ event drop
    const teamSlots = document.querySelectorAll('#teamSlotBar .card');
    teamSlots.forEach(slot=>{
        slot.ondragover = e=>{e.preventDefault(); slot.style.borderColor='#49cfffa8';}
        slot.ondragleave = e=>{slot.style.borderColor='';}
        slot.ondrop = function(e){
            e.preventDefault();
            let dragId = e.dataTransfer.getData("text/plain");
            let idx = Number(slot.dataset.idx);
            // กรองซ้ำ
            if (team.includes(dragId)) return;
            team[idx] = dragId;
            saveTeam();
            renderTeamBar();
            renderCharCollection();
        }
    });
}

/**
 * Remove ตัวจากทีม
 */
window.removeFromTeam = function(idx){
    team[idx] = undefined;
    renderTeamBar(); renderCharCollection();
}

/**
 * Pop-up info ตัวละคร
 */
function openCharInfoPopup(char){
    closePopup();
    window.openPopup('charInfo', {char});
}

/**
 * เพิ่ม template popup สำหรับดูรายละเอียดตัวละคร
 */
(function(){
    const origRenderPopup = window.renderPopup;
    window.renderPopup = function(type, data){
        if(type=="charInfo" && data && data.char){
            const c = data.char;
            return `<div class="popup" style="min-width:285px;">
                <button class="close" onclick="closePopup()">×</button>
                <img src="img/char/${c.img}" class="hero-img" style="margin:auto;display:block;" />
                <div class="name" style="text-align:center;">${c.name}</div>
                <div style="margin-top:8px;font-size:.97em;color:#87cdff;">Lv.${c.level} ★${c.star} <span> (${c.class})</span></div>
                <hr style="margin:8px 0 8px 0;border-color:#234;">
                <div><b>HP</b> ${c.hp} &nbsp; <b>ATK</b> ${c.atk} &nbsp; <b>DEF</b> ${c.def}</div>
                <div><b>SPD</b> ${c.spd} &nbsp; <b>CRIT%:</b> ${c.crit_rate}</div>
                <div><b>Skills</b>:</div>
                <ul>${c.skills.map(s=> `<li><b>${s.name}</b>: ${s.desc}</li>`).join('')}</ul>
            </div>`;
        }
        return origRenderPopup(type, data);
    }
})();

/**
 * กดปุ่มบันทึก
 */
document.addEventListener('DOMContentLoaded', ()=>{
    const btnSaveTeam = document.getElementById('btnSaveTeam');
    if (btnSaveTeam) btnSaveTeam.onclick = saveTeam; // แก้ไข: ป้องกันกรณี element ไม่เจอ
});

/**
 * กลับหน้าหลัก
 */
const btnBack = document.getElementById('btnBack');
if (btnBack) btnBack.onclick = ()=>{ window.location.href = 'index.html'; } // แก้ไข: ป้องกันกรณี element ไม่เจอ

/**
 * INITIALIZE
 */
(async()=>{
    await loadCharacters();
    loadTeam();
    renderTeamBar();
    renderCharCollection();
})();

เพิ่มไฟล์ js/battle.js
/**
 * js/battle.js
 * Epic Seven Card Auto Battle Main Engine (Frontend 100%)
 * Full Modular, Responsive, AI, Animation, CD, Buff/Debuff, WIN/LOSE Result
 * By (yourname)
 */

/* ------------------ Config & State ------------------ */
const SPD_BAR_MAX = 100;    // SPD bar เต็ม
const SPD_FRAME = 120;      // ms ต่อ tick
const MAX_TEAM = 4, MAX_MON = 4;

let heroes = [];      // ฝั่งผู้เล่น (heroes: [{...}])
let monsters = [];    // ฝั่งศัตรู (monsters: [{...}])
let speedBars = [];   // SPD bar + Buff/Debuff refs
let autoOn = false;
let isBattling = false;

/* ------------------ 1. LOAD TEAM & ENEMY ------------------ */
async function loadBattleTeams() {
    // Load User Team
    let t = localStorage.getItem('userTeam');
    let myTeam = t ? JSON.parse(t) : [];
    heroes = [];
    for (let id of myTeam) {
        if (!id) continue;
        let c = await fetch(`data/char/${id}.json`).then(r => r.json());
        heroes.push({
            ...deepCopy(c),
            currHp: c.hp,
            alive: true,
            buffs: [],
            debuffs: [],
            cooldowns: Array((c.skills || []).length).fill(0)
        });
    }
    // Load Monsters (Mock: slime_basic N ตัว)
    monsters = [];
    for (let i = 0; i < MAX_MON; i++) {
        let c = await fetch(`data/char/slime_basic.json`).then(r => r.json());
        monsters.push({
            ...deepCopy(c),
            id: c.id + '_' + (i+1),
            currHp: c.hp,
            alive: true,
            buffs: [],
            debuffs: [],
            cooldowns: Array((c.skills || []).length).fill(0)
        });
    }
}

/* ------------------ 2. SPD BAR INIT ------------------ */
function initSpdBar() {
    speedBars = [];
    heroes.forEach((c, i) => {
        speedBars.push(makeSpeedObj(c, i, 'hero'));
        c.index = i; c.side = 'hero'; // Weak ref.
    });
    monsters.forEach((c, i) => {
        speedBars.push(makeSpeedObj(c, i, 'mon'));
        c.index = i; c.side = 'mon';
    });
}
function makeSpeedObj(c, i, side) {
    return {
        id: `${side}${i}`,
        side,
        name: c.name,
        spd: c.spd,
        charge: 0,
        dead: false,
        index: i,
        cooldowns: c.cooldowns,
        buffs: c.buffs,
        debuffs: c.debuffs
    };
}

/* ------------------ 3. RENDER FIELD ------------------ */
function renderBattlefield() {
    const heroRow = document.querySelector('.card-row.user');
    heroRow.innerHTML = '';
    heroes.forEach((c, idx) => {
        heroRow.appendChild(renderCard(c, idx, 'hero'));
    });
    const monRow = document.querySelector('.card-row.monster');
    monRow.innerHTML = '';
    monsters.forEach((c, idx) => {
        monRow.appendChild(renderCard(c, idx, 'mon'));
    });
    // SPD Bars
    const spdDiv = document.querySelector('.spd-bar-container');
    spdDiv.innerHTML = '';
    speedBars.forEach(bar => {
        let barWrap = document.createElement('div');
        barWrap.className = 'spd-bar';
        barWrap.title = `[${bar.side === 'hero' ? 'ทีมเรา':'ศัตรู'}] ${bar.name} SPD:${bar.spd}`;
        let fill = document.createElement('div');
        fill.className = 'spd-bar-fill';
        fill.style.width = Math.floor(Math.min(bar.charge, SPD_BAR_MAX)/SPD_BAR_MAX*100) + '%';
        barWrap.appendChild(fill);
        spdDiv.appendChild(barWrap);
    });
}

/* ------------------ CARD DISPLAY utils ------------------ */
function renderCard(c, idx, side='hero') {
    let d = document.createElement('div');
    d.className = 'card'; d.id = `${side}${idx}`;
    d.setAttribute('data-idx', idx);
    d.setAttribute('data-side', side);

    // Image
    let img = document.createElement('img');
    img.className = side == 'hero' ? 'hero-img' : 'mon-img';
    img.src = `img/char/${c.img}`;
    img.alt = c.name;
    d.appendChild(img);
    // Name
    d.appendChild(createDiv('name', c.name));

    // HP BAR
    let statbar = document.createElement('div');
    statbar.className = 'statbar';
    let hpfill = document.createElement('div');
    hpfill.className = 'hp-fill';
    let hppercent = Math.max(0, Math.min(1, c.currHp/c.hp));
    hpfill.style.width = (hppercent*100) + '%';
    statbar.appendChild(hpfill);
    d.appendChild(statbar);

    // Buff/Debuff
    let statIcons = document.createElement('div');
    statIcons.className = 'stat-icons';
    (c.buffs||[]).forEach(b => statIcons.appendChild(renderStatusIcon(b, 'buff')));
    (c.debuffs||[]).forEach(dbb => statIcons.appendChild(renderStatusIcon(dbb, 'debuff')));
    d.appendChild(statIcons);

    d.appendChild(createDiv('', `HP ${Math.floor(c.currHp)}/${c.hp} SPD:${c.spd}`, {fontSize: ".82em"}));
    return d;
}

function createDiv(cn, txt, styleObj) {
    let d = document.createElement("div");
    if (cn) d.className = cn; d.innerText = txt;
    if (styleObj) Object.assign(d.style, styleObj);
    return d;
}

function renderStatusIcon(stat, type='buff') {
    let e = document.createElement('div');
    e.className = 'stat-icon '+type;
    e.innerHTML = getIcon(stat.type) ;
    e.title = stat.type.toUpperCase() + (stat.turn?" ("+stat.turn+"T)":"");
    let tt = document.createElement('span');
    tt.className = 'tooltip';
    tt.innerText = statusTooltip(stat.type, type, stat);
    e.appendChild(tt);
    if (stat.turn && stat.turn>0) {
        let lbl = document.createElement('small');
        Object.assign(lbl.style,{
            position:'absolute', fontSize:'.79em', fontWeight:'bold',
            right:'2px', bottom:'1px', color: type==='buff'?'#42fcc1':'#ffc3a3'
        });
        lbl.innerText = stat.turn; e.appendChild(lbl);
    }
    return e;
}
function statusTooltip(type, side, details) {
    const lib = {
        'def_break':'DEF ลดลง รับดาเมจเพิ่ม','def_up':'DEF เพิ่มขึ้น',
        'stun':'ติดสถานะมึน, ข้ามเทิร์น','poison':'โดนพิษ (ลดเลือด)',
        'burn':'เผาไฟ (ลดเลือดหนัก)','heal_ot':'ฟื้นฟูต่อเนื่อง',
        'spd_up':'SPD เพิ่มขึ้น','spd_down':'SPD ลดลง',
        'immune':'กันดีบัฟ','silence':'ใบ้ (ใช้สกิลไม่ได้)',
    };
    return (lib[type]||type)+((details.turn)?" ("+details.turn+" turn)":"");
}
function getIcon(type) {
    switch(type){
        case "def_break":return "🛠️"; case "def_up":return "🛡️";
        case "stun":return "💫"; case "heal_ot":return "💚";
        case "poison":return "☠️"; case "burn":return "🔥";
        case "spd_up":return "💨"; case "spd_down":return "🐢";
        case "immune":return "🔒"; case "silence":return "🔇";
        default:return "✨";
    }
}

// Window-wide Damage popup (as UI Function)
window.showDamage = function(idx, side, dmg, color='#ff5656') {
    let c = document.getElementById(`${side}${idx}`);
    if (!c) return;
    let dPop = document.createElement('span');
    dPop.className = 'damage-popup';
    dPop.innerText = (dmg<0?"+":"-")+Math.abs(dmg);
    dPop.style.color=color;
    c.appendChild(dPop);
    setTimeout(()=>{ dPop.remove(); }, 700);
};

/* ------------------ 4. SPD BAR LOOP & TURN SYSTEM------------------ */
function startBattle() {
    if (isBattling) return; isBattling = true; autoOn = true;
    async function battleLoop(){
        while(isBattling){
            for(let bar of speedBars){
                if(bar.dead) continue;
                // Refs
                let charArr = bar.side=='hero' ? heroes : monsters;
                let charPtr = charArr[bar.index];
                // 1. Process Buff/Debuff countdown&effects (HoT/Poison)
                window.effectEngine?.processStatusTurn?.(charPtr);
                if(charPtr.currHp<=0){ charPtr.alive=false; bar.dead=true; continue; }
                if(window.effectEngine?.isStunnedOrSkipped?.(charPtr)){
                    bar.cooldowns.forEach((v,i,arr)=>{ if(arr[i]>0) arr[i]--; });
                    continue;
                }
                if(!charPtr.alive) continue;
                // SPD charge
                bar.charge += getSpdCharge(bar);
                if(bar.charge >= SPD_BAR_MAX){
                    bar.charge = 0;
                    await doTurn(bar); // AI turn+animate+action
                    renderBattlefield(); // Render after turn
                    break; // sync (1 at a time)
                }
            }
            checkBattleResult();
            renderBattlefield();
            await (window.animationEngine?.sleep ?
                window.animationEngine.sleep(SPD_FRAME) :
                new Promise(r=>setTimeout(r, SPD_FRAME)));
        }
    }
    battleLoop();
}
function getSpdCharge(bar){
    let spdVal = bar.spd;
    let bonus = 1.0;
    if(bar.buffs?.some(b=>b.type=="spd_up")) bonus += 0.3;
    if(bar.debuffs?.some(b=>b.type=="spd_down")) bonus -= 0.3;
    return spdVal/10 * bonus;
}

/* ------------------ 5. TURN: AI เลือกเป้าหมาย/สกิล & Animation ------------------ */
async function doTurn(bar){
    let charArr = bar.side=='hero'?heroes:monsters;
    let oppArr = bar.side=='hero'?monsters:heroes;
    let idx = bar.index;
    let charPtr = charArr[idx];

    window.effectEngine?.processStatusTurn?.(charPtr);
    if(window.effectEngine?.isStunnedOrSkipped?.(charPtr)){
        bar.cooldowns.forEach((v,i,arr)=>{ if(arr[i]>0) arr[i]--; });
        return;
    }
    if(!charPtr.alive) return;

    // --- PICK SKILL (AI) ---
    let skill = window.aiPickSkill ? window.aiPickSkill(charPtr, bar.cooldowns, charArr, oppArr) : pickSkill(charPtr, bar);

    // --- PICK TARGET
    let targets = [];
    if(skill.type==='attack')
        targets = [window.aiPickTarget ? window.aiPickTarget(oppArr, skill) : aiPickTarget(oppArr, skill)];
    else if(skill.type==='buff')
        targets = charArr.filter(c=>c.alive);
    else if(skill.type==='heal')
        targets = [window.aiPickTarget ? window.aiPickTarget(charArr, skill) : aiPickTarget(charArr, skill)];
    else if(skill.type==='aoe' || (skill.type==='attack' && skill.multiplier>1.2)) // AoE
        targets = oppArr.filter(o=>o.alive);
    else
        targets = [window.aiPickTarget ? window.aiPickTarget(oppArr, skill) : aiPickTarget(oppArr, skill)];
    targets = targets.filter(Boolean);

    // --- Animation Section ---
    // Card slide / AOE / Buff / Heal
    if(skill.type==='attack' && targets[0]){
        let tidx = oppArr.indexOf(targets[0]);
        await window.animationEngine?.animateAttackCard?.(idx, tidx, bar.side, bar.side==='hero'?'mon':'hero');
    }
    if((skill.type==='aoe' || (skill.type==='attack' && skill.multiplier>1.2 && targets.length>1))) {
        let tgtIdxArr = targets.map(t=>oppArr.indexOf(t));
        await window.animationEngine?.animateAoEAttack?.(idx, bar.side, bar.side==='hero'?'mon':'hero', tgtIdxArr);
    }
    if(skill.type==='heal'){
        await window.animationEngine?.animateHeal?.(idx, bar.side);
    }
    if(skill.type==='buff'){
        await window.animationEngine?.animateBuffDebuff?.(idx, bar.side, "buff");
    }

    // --- APPLY SKILL ---
    await doSkill(charPtr, skill, targets, bar.side);

    // --- Increase Cooldown ---
    if(skill.cooldown)
        bar.cooldowns[charPtr.skills.findIndex(s=>s.id==skill.id)] = skill.cooldown+1;
    bar.cooldowns.forEach((v,i,arr)=>{ if(arr[i]>0) arr[i]--; });
}

// Fallback PickSkill, PickTarget ถ้าไม่มี ai.js
function pickSkill(char, bar){
    let order = [2,1,0];
    for(let i of order){
        if(!char.skills[i]) continue;
        if(bar.cooldowns[i]<=0) return char.skills[i];
    }
    return char.skills[0];
}
function aiPickTarget(arr, skill=null){
    // Heal: lowest HP, Buff: first, Default: hp lowest enemy
    arr = arr.filter(c=>c.alive);
    if(skill && skill.type==="heal")
        return arr.sort((a,b)=>a.currHp/a.hp - b.currHp/b.hp)[0];
    if(skill && skill.type==="buff") return arr[0];
    return arr.sort((a,b)=>a.currHp - b.currHp)[0];
}

/* ------------------ 6. Apply Damage/Effect ------------------ */
async function doSkill(source, skill, targets, sourceSide){
    if(!targets) return;
    for(let t of targets){
        if(!t.alive) continue;
        if(skill.type=="heal"){
            let healVal = Math.floor(source.atk * 0.7 + source.level * 1.5);
            t.currHp = Math.min(t.hp, t.currHp + healVal);
            window.showDamage?.(t.index, t.side, -healVal, '#59f495');
            t.alive = t.currHp>0;
            continue;
        }
        if(skill.type=="buff" && skill.effect && skill.effect.buff){
            window.effectEngine?.addEffect(t, skill.effect.buff, "buff");
            continue;
        }
        // Attack / AoE
        let dmg = Math.floor(source.atk * (skill.multiplier || 1) * (1 + (source.crit_rate || 0) / 100));
        let defReduce = t.debuffs?.some(d=>d.type=="def_break") ? 1.4 : 1;
        let defVal = t.def * defReduce;
        dmg = Math.max(Math.floor(dmg - defVal/3), 1);
        if(Math.random()*100 < (source.crit_rate||0)) dmg = Math.floor(dmg*((source.crit_dmg||150)/100));

        t.currHp = Math.max(0, t.currHp - dmg);
        t.alive = t.currHp>0;
        if(t.currHp<=0) t.alive = false;
        window.showDamage?.(t.index, t.side, dmg, '#ff5656');
        // Debuff
        if(skill.effect?.debuff) {
            window.effectEngine?.addEffect(t, skill.effect.debuff, "debuff");
        }
        // TODO: Cleanse, Remove buff/debuff future
    }
}

/* ------------------ 7. RESULT ------------------ */
function checkBattleResult(){
    let mySurvive = heroes.some(c=>c.alive);
    let monSurvive = monsters.some(c=>c.alive);
    if(!mySurvive || !monSurvive){
        isBattling = false;
        showBattleResult(mySurvive ? 'win' : 'lose');
    }
}
function showBattleResult(state){
    // ใช้ popupManager ถ้ามี (หรือ renderBattleResult)
    if(window.renderBattleResult){
        window.renderBattleResult({state});
    }else{
        setTimeout(()=>{
            openPopup('battleResult', {state});
        },800);
    }
}

/* ------------------ 8. INIT (START) ------------------ */
document.addEventListener('DOMContentLoaded', ()=>{
    const btnStartAuto = document.getElementById('btnStartAuto');
    if(btnStartAuto)
        btnStartAuto.onclick = async ()=>{
            autoOn = true;
            await loadBattleTeams();
            initSpdBar();
            renderBattlefield();
            startBattle();
        };
    // if battlefield already open
    if(document.getElementById('mainBattlefield') && 
            !document.getElementById('mainBattlefield').classList.contains('hide')) {
        loadBattleTeams().then(() => {
            initSpdBar();
            renderBattlefield();
        });
    }
});

/* ------------------ 9. Utilities ------------------ */
function deepCopy(obj) {
    return JSON.parse(JSON.stringify(obj));
}

/* 
   สำหรับ Dev/Test หรือการเชื่อม UI 
   - สามารถรีเซ็ตสถานะ/ทีมใหม่, หรือเพิ่มปุ่ม debug ได้
*/

/* ------------------ 10. Export Global ฟังก์ชัน (ถ้าต้องใช้) ------------------ */
window.battleEngine = {
    loadBattleTeams, initSpdBar, renderBattlefield, startBattle, heroes, monsters, speedBars
};

/* ------------------ Custom BattleResult Popup (แสดงผล) ------------------ */
(function () {
    const origRenderPopup = window.renderPopup;
    window.renderPopup = function(type, data) {
        if(type === "battleResult") {
            return `<div class="popup large"><button class="close" onclick="closePopup()">×</button>
                <h2>ผลลัพธ์การต่อสู้</h2>
                <div style="font-size:2em;text-align:center;margin-bottom:12px;">
                  ${data.state === "win" ? "🏆 <b style='color:#54e0be'>ชนะ!</b>" : "❌ <b style='color:#f47'>แพ้</b>"}
                </div>
                <button class="primary-btn" onclick="closePopup()">โอเค</button>
            </div>`;
        }
        return origRenderPopup(type, data);
    };
})();

/* 
 หมายเหตุ:
 - หากจะเชื่อมผลลัพธ์จริง (EXP, ดรอป, เลเวลอัพ) ใช้ window.renderBattleResult จาก result.js แทน
 - หากไม่มีให้ fallback popup นี้ได้เลย
*/

เพิ่มไฟล์ js/ai.js
// js/ai.js
/**
 * Epic Seven - AI Auto Battle Engine (แยก Module)
 * ใช้เลือก skill และ target ใน battle.js
 */

/**
 * Pick skill ที่ควรใช้ (เลือกโดย AI) - แบบ modular
 * @param {Object} char - (obj) ตัวละคร
 * @param {Array<number>} cooldowns - cooldown แต่ละ skill [s1, s2, s3...]
 * @param {Array<Object>} allies - ฝั่งเดียวกัน (obj)
 * @param {Array<Object>} enemies - ฝั่งตรงข้าม (obj)
 * @return {Object} skill ที่จะใช้
 */
function aiPickSkill(char, cooldowns, allies, enemies) {
    // ถ้ามีบัฟ, heal, ใช้ skill aoe ก่อน (ลำดับ: AoE > Heal/Buff > Single)
    // ใช้เงื่อนไข HP ต่ำ, ศัตรูมาก/น้อย, หรือ CD climate
    let skills = char.skills || [];
    let usable = skills.map((s, i) => ({...s, cd: cooldowns[i] || 0, idx: i }))
        .filter(s => s.cd === 0);

    // (1) Heal/Buff - ใช้ทันทีถ้ามีใน usable skill
    for (let s of usable) {
        if (s.type === 'heal' && needHeal(allies)) return s;
        if (s.type === 'buff' && needBuff(allies, s)) return s;
    }

    // (2) AoE - ถ้า AoE และฝั่งศัตรูมี 2 ตัว+ (หรือ priority)
    for (let s of usable) {
        if ((s.type === 'attack' || s.type === 'aoe') && s.multiplier > 1.5 && (living(enemies) > 1)) {
            return s;
        }
    }

    // (3) Debuff - ตีเป้าที่บัฟแข็งแกร่ง (def break/stun)
    for (let s of usable) {
        if (s.effect && s.effect.debuff) return s;
    }

    // (4) Single Attack - เลือก default
    if (usable.length > 0) return usable[0];
    // fallback: skill 1
    return skills[0];
}

/**
 * Pick target ที่ควรโจมตี (AI)
 * @param {Array<Object>} arr - เป้าหมาย (obj)
 * @param {Object} skill - skill ที่จะใช้
 * @return {Object}
 */
function aiPickTarget(arr, skill = null) {
    // ตีตัว HP น้อยสุดก่อน เว้นถ้า skill เป็น heal/buff
    arr = arr.filter(c => c.alive);
    // Heal: หาเป้าคือฝั่งเรา (lowest HP)
    if (skill && skill.type === 'heal') {
        return arr.sort((a, b) => a.currHp / a.hp - b.currHp / b.hp)[0];
    }
    // Buff: เลือกตัวฝั่งเรา alive
    if (skill && skill.type === 'buff') {
        // แล้วแต่ logic   --> ใส่ให้ทุกคน เลือก index 0
        return arr[0];
    }
    // AoE: ทุกตัวเลย
    if (skill && (skill.type === 'aoe' || (skill.type === 'attack' && skill.multiplier > 1.5))) {
        return arr; // ทั้งแถว enemy
    }
    // Debuff: ตี tank ก่อน (defense/high HP), ถ้าไม่เน้น หา HP น้อยสุด
    let sorted = arr.sort((a, b) => a.currHp - b.currHp);
    return sorted[0];
}

/**
 * ใครในทีม HP ต่ำกว่า 60% ให้ heal
 * @param {Array<Object>} team
 */
function needHeal(team) {
    for (let c of team) {
        if (c.alive && c.currHp / c.hp < 0.6) return true;
    }
    return false;
}

/**
 * เช็คว่าบัฟที่ skill นี้ให้ มีอยู่ในทีมแล้วหรือยัง (ถ้ามีแล้วข้าม)
 * @param {Array<Object>} team
 * @param {Object} skill
 */
function needBuff(team, skill) {
    let buffs = (skill && skill.effect && skill.effect.buff) || [];
    for (let btype of buffs.map(b => b.type)) {
        // ถ้า buff นี้ทุกคนในทีมมีอยู่แล้วหมด ไม่ต้องใช้
        let count = team.filter(c => c.alive && c.buffs && c.buffs.some(bf => bf.type === btype)).length;
        if (count < team.length) return true; // ยังมีคนไม่ได้ buff นี้
    }
    return false;
}

/**
 * จำนวนเป้าหมายที่ยังไม่ตาย
 */
function living(arr) {
    return arr ? arr.filter(c => c.alive).length : 0;
}

// ---- สำหรับใช้งานกับ battle.js ----
// Expose เป็น global เพื่อเรียกใช้
window.aiPickSkill = aiPickSkill;
window.aiPickTarget = aiPickTarget;

เพิ่มไฟล์ js/animationEngine.js
/* Epic Seven Card Auto Battle - Animation Engine */
/* วางใน /js/animationEngine.js */

window.animationEngine = (function () {
    /** Card slide animation to attack */
    async function animateAttackCard(fromIdx, toIdx, fromSide, toSide, type = 'single') {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        const toCard = document.getElementById(`${toSide}${toIdx}`);
        if (!fromCard || !toCard) return;
        // สร้าง overlay
        const rectFrom = fromCard.getBoundingClientRect();
        const rectTo = toCard.getBoundingClientRect();
        // Absolute overlay clone
        const clone = fromCard.cloneNode(true);
        clone.style.position = "fixed";
        clone.style.left = rectFrom.left + 'px';
        clone.style.top = rectFrom.top + 'px';
        clone.style.width = rectFrom.width + 'px';
        clone.style.zIndex = "2000";
        clone.style.transition = 'all 0.35s cubic-bezier(.6,0,.2,1.4)';
        // Hide original
        fromCard.style.opacity = "0.4";
        document.body.appendChild(clone);
        await sleep(30);

        // เลื่อนการ์ดไปตำแหน่งเป้าหมาย
        clone.style.left = rectTo.left + 'px';
        clone.style.top = rectTo.top + 'px';
        clone.style.boxShadow = "0 0 32px #e7ff79c8, 0 0 80px #e3e37044";
        clone.style.transform = "scale(1.10) rotate(-3deg)";
        await sleep(330);

        // Flash/Shake เป้าหมาย
        shakeCard(toCard);
        // Remove overlay
        setTimeout(() => {
            clone.remove();
            fromCard.style.opacity = "1";
        }, 110);

        await sleep(180);
    }

    /** AoE Animation (wave blast) */
    async function animateAoEAttack(fromIdx, fromSide, toSide, targets) {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        if (!fromCard) return;
        // Pulse the card
        pulseCard(fromCard, "#f2d13e");
        // Wave line to center
        targets.forEach((t) => {
            const tgt = document.getElementById(`${toSide}${t}`);
            if (tgt) {
                flashCard(tgt, "#ffd058");
                shakeCard(tgt);
            }
        });
        await sleep(340);
    }

    /** Heal effect (green glow, upward effect) */
    async function animateHeal(toIdx, toSide) {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, "#68eccc");
        // Heal "plus" popup up
        let plus = document.createElement('span');
        plus.textContent = "+HP";
        plus.style = "color:#68fdd8;font-weight:bold;font-size:1.18em;position:absolute;left:42%;top:17%;opacity:0;transition:top .4s,opacity .2s;";
        tgt.appendChild(plus);
        setTimeout(() => {
            plus.style.top = "-6%";
            plus.style.opacity = "1";
        }, 20);
        setTimeout(() => plus.remove(), 650);
        await sleep(390);
    }

    /** Buff/Debuff effect on card */
    async function animateBuffDebuff(toIdx, toSide, type = "buff") {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, type === "buff" ? "#98deff" : "#ff7b7b");
        await sleep(260);
    }

    // --- Utilities (Shake, Glow, Flash, Pulse) ---
    function shakeCard(card) {
        if (!card) return;
        card.animate([
            { transform: "translateX(0)" },
            { transform: "translateX(-12px)" },
            { transform: "translateX(13px)" },
            { transform: "translateX(-7px)" },
            { transform: "translateX(0)" }
        ], { duration: 320, easing: "ease-in" });
    }
    function glowCard(card, color) {
        if (!card) return;
        card.style.boxShadow = `0 0 15px 6px ${color}66`;
        setTimeout(() => (card.style.boxShadow = ""), 380);
    }
    function flashCard(card, color = "#fff") {
        if (!card) return;
        card.style.background = color;
        setTimeout(() => (card.style.background = ""), 170);
    }
    function pulseCard(card, color) {
        if (!card) return;
        card.animate([
            { boxShadow: `0 0 0px 0px ${color}40` },
            { boxShadow: `0 0 15px 8px ${color}bb` },
            { boxShadow: `0 0 0px 0px ${color}00` }
        ], { duration: 410 });
    }
    function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

    // --- Expose ---

    return {
        animateAttackCard,
        animateAoEAttack,
        animateHeal,
        animateBuffDebuff,
        shakeCard,
        glowCard,
        flashCard,
        pulseCard,
        sleep
    };
})();

เพิ่มไฟล์ js/effect.js
// js/effect.js

/**
 * ระบบบัฟ/ดีบัฟ/ฮีล Auto Battle Engine (Epic Seven Version)
 * รองรับ: Buff, Debuff, Immunity, Stack, Countdown Turn, Remove, Tooltip
 * เรียกใช้ได้จาก battle.js, ai.js, animationEngine.js
 */

/**
 * เพิ่มสถานะ (Buff/Debuff) ให้กับ character
 * @param {Object} target - ตัวละครเป้าหมาย
 * @param {Array<Object>} effects - [{type, turn, [chance]}]
 * @param {string} effectType - 'buff' หรือ 'debuff'
 */
function addEffect(target, effects, effectType) {
    if (!effects || !Array.isArray(effects)) return;

    for (let eff of effects) {
        // Anti-stack: debuff/buff แบบ non-stack
        if (effectType === "buff") {
            if (target.buffs.some(b => b.type === eff.type)) continue;
        } else if (effectType === "debuff") {
            if (target.debuffs.some(b => b.type === eff.type)) continue;
        }
        // Immunity: หากติด immunity (multi N turn) จะกันดีบัฟ (ยกเว้น stun/burn ฯ)
        if (effectType === "debuff" && (target.buffs || []).some(b => b.type === "immune" && b.turn > 0)) {
            continue;
        }
        // Stackable Debuff (เช่น poison) *Option
        // เพิ่มสามารถ stack ได้หาก type เป็น poison/burn
        if (effectType === "debuff" && ["poison", "burn"].includes(eff.type)) {
            target.debuffs.push({...eff});
            continue;
        }
        // เพิ่มสถานะ
        if (effectType === "buff") target.buffs.push({...eff});
        else if (effectType === "debuff") target.debuffs.push({...eff});
    }
}

/**
 * ทุกครั้งที่เริ่ม turn หรือตัวละคร เขียนสำหรับลด countdown & remove state หมดอายุ
 * @param {Object} char - ตัวละคร
 */
function processStatusTurn(char) {
    ['buffs', 'debuffs'].forEach(listType => {
        if (!char[listType]) return;
        for (let i = char[listType].length - 1; i >= 0; i--) {
            let st = char[listType][i];
            // ลดจำนวน turn
            if (st.turn && st.turn > 0) st.turn--;
            // เอาออกถ้าหมดอายุ
            if (st.turn === 0) char[listType].splice(i, 1);
        }
    });
    // Heal Over Time (HoT)/Poison/Burn
    if (char.debuffs) {
        char.debuffs.forEach(df => {
            if (df.type === "poison") {
                let val = Math.round(char.hp * 0.05);
                char.currHp = Math.max(0, char.currHp - val);
                window.showDamage?.(char.index || 0, char.side || 'hero', val, "#ffd155");
            }
            if (df.type === "burn") {
                let val = Math.round(char.hp * 0.12);
                char.currHp = Math.max(0, char.currHp - val);
                window.showDamage?.(char.index || 0, char.side || 'hero', val, "#ff6633");
            }
        });
    }
    if (char.buffs) {
        char.buffs.forEach(bf => {
            if (bf.type === "heal_ot") { // Heal over time
                let val = Math.round(char.hp * 0.06);
                char.currHp = Math.min(char.hp, char.currHp + val);
                window.showDamage?.(char.index || 0, char.side || 'hero', -val, "#24eeba");
            }
        });
    }
}

/**
 * เช็คว่าตัวนี้โดน Stun หรือ Debuff Skip Turn อยู่หรือไม่
 */
function isStunnedOrSkipped(char) {
    return (char.debuffs || []).some(df => ["stun", "sleep", "freeze", "silence"].includes(df.type));
}

/**
 * ลบสถานะ buff/debuff ทั้งหมด (Cleanse/Purge) หรือกำหนด
 * @param {Object} char
 * @param {string} [type] "buff"/"debuff"/"all" (default: all)
 */
function removeStatus(char, type = "all") {
    if (!char) return;
    if (type === "all") {
        char.buffs = [];
        char.debuffs = [];
    }
    if (type === "buff") char.buffs = [];
    if (type === "debuff") char.debuffs = [];
}

/**
 * เรียกใน UI เพื่อแสดง icon + จำนวน turn ที่เหลือ ที่การ์ดบนสนาม
 * (ฟังก์ชันนี้ UI จะอ่าน char.buffs, char.debuffs [])
 */

/**
 * สำหรับใช้ใน battle.js:
 * - ก่อนเริ่ม turn, processStatusTurn()
 * - check ว่า stun/skip turn ไม่โจมตี
 * - หลัง heal/attack/addEffect ใช้ addEffect()
 * - ลบสถานะ removeStatus(char, type)
 */

// ---- Export (global assignment)
window.effectEngine = {
    addEffect,
    processStatusTurn,
    isStunnedOrSkipped,
    removeStatus
};

เพิ่มไฟล์ js/result.js
// js/result.js

/**
 * Epic Seven Auto Battle - Battle Result Handler (Frontend Only)
 * ฟังก์ชันนี้ออกแบบสำหรับ popup หน้าบอกผลการต่อสู้, อัปเดต EXP, เพิ่ม/ดรอปไอเท็ม, อัปเลเวล, แจ้งเตือน ฯลฯ
 * ใช้ได้ทันที รองรับการเชื่อม inventory.js, team.js, battle.js, popupManager.js และ system อื่น
 * Author: <yourname> (2024)
 */

// ---------- Option: CONFIGURATION (customize หรือต่อ database ได้ในอนาคต) ----------
const EXP_PER_WIN = 60;     // Exp ทุกตัว (ชนะ)
const EXP_PER_LOSE = 18;    // Exp ทุกตัว (แพ้)
const BASIC_DROP_LIST = [
    { id: 'exp_potion', name: 'EXP Potion', qty_range: [1, 2], chance: 55 },
    { id: 'gold', name: 'Gold', qty_range: [200, 500], chance: 80 },
    { id: 'rune_shard', name: 'Rune Shard', qty_range: [1, 1], chance: 20 },
    // เพิ่ม drop type ได้ใน inventory/item.json
];

// ---------- MAIN FUNCTION ----------
window.renderBattleResult = function (resultObj = {}) {
    // resultObj: { state: 'win'|'lose', heroes: [], monsters: [], drops: [] } (บาง field optional)

    // Load user team (reload for update exp)
    let team = [];
    let raw = localStorage.getItem('userTeam');
    if (raw) team = JSON.parse(raw);

    // ปกติจะมี id ตัวละครใน team
    let heroDatas = [];
    if (team.length > 0) {
        // ดึงข้อมูลตัวละครจากไฟล์ data/char/*.json
        heroDatas = team.map(id => {
            if (!id) return null;
            try {
                let cache = localStorage.getItem('char_' + id);
                if (cache) return JSON.parse(cache);
            } catch { }
            // Fallback fetch (sync โปรดักชันใช้ async แล้วค่อย render)
            let obj = null;
            let xhr = new XMLHttpRequest();
            xhr.open('GET', `data/char/${id}.json`, false);
            xhr.send();
            if (xhr.status === 200) {
                obj = JSON.parse(xhr.responseText);
            }
            return obj;
        });
        heroDatas = heroDatas.filter(c => c);
    }

    // 1. EXP/LEVEL UP
    const expGet = (resultObj.state === 'win') ? EXP_PER_WIN : EXP_PER_LOSE;
    let levelUps = [];
    heroDatas.forEach((c, i) => {
        if (!c) return;
        c.exp = (c.exp || 0) + expGet;
        let up = false;
        while (c.exp >= (c.exp_max || 99999)) {
            c.exp -= c.exp_max;
            c.level = (c.level || 1) + 1;
            up = true;
            // อัป cap = เพิ่ม exp_max? เพิ่ม config ได้
        }
        if (up) levelUps.push(c.name);
        // บันทึก state cache เผื่อ future ใช้เร็ว
        localStorage.setItem('char_' + c.id, JSON.stringify(c));
    });

    // 2. DROP SYSTEM (Mock)
    let dropItems = [];
    if (resultObj.state == 'win') {
        BASIC_DROP_LIST.forEach(d => {
            if (Math.random() * 100 < d.chance) {
                let qty = randomInt(d.qty_range[0], d.qty_range[1]);
                dropItems.push({
                    id: d.id,
                    name: d.name,
                    qty: qty
                });
                // เพิ่มเข้าคลังไอเท็ม (ถ้ามี)
                addToInventory(d.id, qty);
            }
        });
    }

    // 3. Save Update ของ Hero กลับ (option รวม cache ตาม system จริง)
    // (ฟังก์ชันเพิ่มของใน inventory ปกติอยู่ใน inventory.js, แต่ที่นี่จะ simulate if not loaded)

    // 4. Render HTML Popup
    let popupHtml = `
    <div class="popup large">
      <button class="close" onclick="closePopup()">×</button>
      <h2 style="margin-bottom:0.4em;">${resultObj.state === "win" ? "🏆 <b style='color:#54e0be'>ชนะ!</b>" : "❌ <b style='color:#f47'>แพ้</b>"}</h2>
      <div style="font-size:1.2em;color:#bdf;">${resultObj.state === "win" ? "คุณผ่านด่านและได้รับรางวัล" : "คุณได้รับ EXP ปลอบใจ"}</div>
      <hr style="margin:10px 0 10px 0; border:1px solid #234a76;">
      <div style="margin-bottom:8px;"><b>🎖 EXP ได้รับ:</b> <span style="color:#7cffda">${expGet}</span> / ตัว</div>
      <table style="width:98%;margin:10px 0 18px 0;background:#222a38;border-radius:12px;">
        <tr>
          ${heroDatas.map(c => `<td style="text-align:center;">
            <img src="img/char/${c?.img||'noimg.png'}" alt="${c?.name}" style="width:37px;border-radius:50%;box-shadow:0 0 10px #57faf840;">
            <div style="font-size:.97em;margin-top:7px;">${c?.name}</div>
            <div style="font-size:.9em;margin-top:2px;">LV. <b>${c?.level||'-'}</b> <span style="color:${levelUps.includes(c?.name) ? '#45ff77' : '#aaa'}">${levelUps.includes(c?.name) ? '↑ UP!' : ''}</span></div>
          </td>`).join('')}
        </tr>
      </table>
      ${dropItems.length > 0 ? `
      <div style="margin-bottom:7px;"><b>🎁 ไอเท็มที่ได้รับ</b>:</div>
      <div style="display:flex;gap:15px;flex-wrap:wrap;">
        ${dropItems.map(d => 
          `<div style="background:#23343b;padding:11px 18px;border-radius:8px;box-shadow:0 2px 15px #25f3f026;">
              <b style="font-size:1.17em;">${d.name}</b><br>
              <span style="font-size:.93em;color:#81e6ae;">x${d.qty}</span>
          </div>`
        ).join('')}
      </div>
      ` : ''}
      <div style="margin-top:24px;text-align:center;">
        <button class="primary-btn" onclick="closePopupAndReturn()">กลับสู่หน้าหลัก</button>
      </div>
    </div>
    `;

    // Push popup to #popupLayer (use popupManager)
    let popupLayer = document.getElementById('popupLayer');
    if (!popupLayer) {
        popupLayer = document.createElement('div');
        popupLayer.id = 'popupLayer';
        document.body.appendChild(popupLayer);
    }
    popupLayer.innerHTML = popupHtml;
    popupLayer.classList.add('active');

    // Special: ปิด popup และ refresh field (กลับไปเมนูหลัก/refresh battlefield)
    window.closePopupAndReturn = function() {
        // ซ่อน popup, กลับ index.html
        closePopup();
        if (window.location.pathname.indexOf('index.html') === -1) {
            window.location.href = 'index.html';
        } else {
            // reload team or UI if needed
            if (window.renderBattlefield) window.renderBattlefield();
        }
    }
};

// ---------- INVENTORY ADD HELPER ----------
/**
 * เพิ่มของเข้าคลัง (เรียก inventory.js จริงได้เลย ถ้ามีระบบ)
 * ฟังก์ชันนี้ mock ไว้เผื่อ inventory.js ยังไม่ได้โหลด
 */
function addToInventory(itemId, qty) {
    let items = [];
    try {
        let raw = localStorage.getItem('user_inventory') || '[]';
        items = JSON.parse(raw);
    } catch { items = []; }
    let item = items.find(x => x.id === itemId);
    if (item) {
        item.qty += qty;
    } else {
        items.push({ id: itemId, qty: qty });
    }
    localStorage.setItem('user_inventory', JSON.stringify(items));
}

// ---------- UTILS ----------
function randomInt(min, max) {
    if (min === max) return min;
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// ---------- END OF FILE ----------
/**
 * วิธีทดสอบ:
 * - ให้เรียก window.renderBattleResult({ state: "win" }) หลังจบการต่อสู้
 * - ดู popup แสดง exp, ไอเท็ม, อัปเลเวล, สามารถ "กลับ" ไปหน้าหลักได้
 * - ตรวจสอบ LocalStorage: char_*, user_inventory, userTeam
 */

เพิ่มไฟล์ js/popupManager.js
// /js/popupManager.js

/**
 * popupManager.js
 * Epic Seven Auto Battle - Popup System (v1.0)
 * จัดการเปิด-ปิด Pop-up กลาง / popover ซ้อน
 * รองรับ HTML Content, Callback, Responsive
 * ใช้ร่วมกับ index.html, ui.js, ทุก module
 * Author: (คุณ)
 */

// เก็บ Stack ของ popup สำหรับเปิดซ้อน
let popupStack = [];

/**
 * เปิด Popup กลางจอ
 * @param {Object} options { 
 *    id: string, // ชื่อ feature, ใช้เป็น key menu, ex: 'quest', 'inventory'
 *    title: string, // ชื่อแสดงหัวข้อ
 *    content: HTML string, // เนื้อหา HTML (innerHTML)
 *    size: "normal" | "large" | "tall" | "small",
 *    onClose: function, // callback เมื่อ popup นี้ปิด
 *    showCloseBtn: boolean, // แสดงปุ่มปิด (default: true)
 *    autoFocus: CSS selector (optional, โฟกัส input)
 * }
 */
window.popupManager = {
    open: function (options = {}) {
        // ป้องกัน popup ซ้อนซ้ำชื่อเดิม
        if (popupStack.some(p => p.id === options.id)) {
            return; // ถ้ามีแล้วไม่ต้องเปิดซ้ำ
        }
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;

        const { id, title, content, size, onClose, showCloseBtn, autoFocus } = options;
        const sz = size || 'normal';
        let html = `
      <div class="popup${sz === 'large' ? ' large' : sz === 'tall' ? ' tall' : sz === 'small' ? ' small' : ''}" 
        style="z-index: ${100 + popupStack.length * 2};" popup-id="${id || ''}">
          ${showCloseBtn === false ? '' : `<button class="close" onclick="popupManager.close('${id || ''}')">×</button>`}
          <h2 style="margin-bottom:.39em;">${title || ''}</h2>
          <div class="popup-content" style="margin-top:9px;">${content || ''}</div>
      </div>`;

        let wrap = document.createElement('div');
        wrap.className = 'popup-wrap-layer';
        wrap.style = `position:fixed; top:0; left:0; width:100vw;height:100vh;display:flex;
          align-items:center;justify-content:center;z-index:${99 + popupStack.length * 2 + 1};`;
        wrap.innerHTML = html;

        // Store info to Stack
        popupStack.push({
            id,
            wrap,
            onClose: typeof onClose === "function" ? onClose : null
        });

        popupLayer.appendChild(wrap);
        popupLayer.classList.add('active');

        // Auto focus
        if (autoFocus) {
            setTimeout(() => {
                const el = wrap.querySelector(autoFocus);
                if (el) el.focus();
            }, 150);
        }
    },

    /**
     * ปิด Popup (ปิดบนสุดล่าสุด หรือตาม id)
     * @param {string} id
     */
    close: function (id = '') {
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;
        if (popupStack.length === 0) return;
        let pop;
        if (id) {
            let idx = popupStack.findIndex(p => p.id === id);
            if (idx === -1) return;
            pop = popupStack.splice(idx, 1)[0];
            if (pop && pop.wrap) {
                pop.wrap.remove();
            }
        } else {
            // ถ้าไม่ส่ง id ให้ปิดตัวบนสุด
            pop = popupStack.pop();
            if (pop && pop.wrap) {
                pop.wrap.remove();
            }
        }
        // onClose callback
        if (pop && pop.onClose) pop.onClose();

        // หากไม่มี popup อื่นเหลือ ให้ปิด layer
        if (popupStack.length === 0) {
            popupLayer.classList.remove('active');
        }
    },

    /**
     * ปิด Popups ทั้งหมด (reset stack)
     */
    closeAll: function () {
        const popupLayer = document.getElementById('popupLayer');
        popupStack.forEach(p => {
            if (p.wrap) p.wrap.remove();
            if (typeof p.onClose === "function") p.onClose();
        });
        popupStack = [];
        if (popupLayer) popupLayer.classList.remove('active');
    },

    /**
     * Render content ใหม่บน popup id นี้ (เช่น refetch/refresh)
     * @param {string} id
     * @param {string} content HTML
     */
    update: function (id, content) {
        let pop = popupStack.find(p => p.id === id);
        if (pop && pop.wrap) {
            let inner = pop.wrap.querySelector('.popup-content');
            if (inner) inner.innerHTML = content;
        }
    },

    /**
     * ดึง Stack popups
     */
    getStack: function () { return [...popupStack]; }
};

// [Global shortcut]
window.openPopup = function (id, content = '', size = 'normal', title = '', options = {}) {
    // For backward compat: openPopup(type, html, size, title, { ... })
    window.popupManager.open({
        id, title: title || id, content, size, ...options
    });
}
window.closePopup = function (id = '') { window.popupManager.close(id); }
window.closeAllPopup = function () { window.popupManager.closeAll(); }

// Escape = close popup ล่าสุด
document.addEventListener('keyup', ev => {
    if (ev.key === 'Escape') popupManager.close();
});

// Click shadow layer (ปิด popup ล่าสุด เฉพาะ popup ที่อนุญาต)
document.getElementById('popupLayer')?.addEventListener('mousedown', ev => {
    if (ev.target.classList.contains('popup-wrap-layer')) {
        // หาก popup บนสุดมี showCloseBtn = false => ไม่ปิด ด้วยคลิก
        if (popupStack.length === 0) return;
        let last = popupStack[popupStack.length - 1];
        if (last && last.wrap && last.wrap.querySelector('.close')) {
            window.popupManager.close();
        }
    }
});

เพิ่มไฟล์ data/item.json
[
  {
    "id": "gold",
    "name": "Gold",
    "type": "currency",
    "description": "เหรียญทองสำหรับใช้งานในร้านค้า อัปเกรด หรือสุ่มกาชา",
    "img": "gold.png",
    "rarity": 1,
    "usable": false,
    "price": 0
  },
  {
    "id": "diamond",
    "name": "Crystal",
    "type": "currency",
    "description": "เพชร ใช้ซื้อของหรือสุ่มกาชา พิเศษ",
    "img": "diamond.png",
    "rarity": 2,
    "usable": false,
    "price": 0
  },
  {
    "id": "exp_potion",
    "name": "EXP Potion",
    "type": "xp_item",
    "description": "เพิ่ม EXP ให้ตัวละครทันที ใช้เลือกเป้าหมาย",
    "img": "exp_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "exp": 500 },
    "price": 200
  },
  {
    "id": "skill_book",
    "name": "Skill Book",
    "type": "upgrade",
    "description": "หนังสืออัปเกรดสกิลตัวละคร (สุ่ม 1 skill)",
    "img": "skill_book.png",
    "rarity": 3,
    "usable": true,
    "effect": { "skillup": 1 },
    "price": 900
  },
  {
    "id": "rune_shard",
    "name": "Rune Shard",
    "type": "rune_material",
    "description": "เศษรูน ใช้สำหรับอัปเกรดหรือสร้างรูน",
    "img": "rune_shard.png",
    "rarity": 2,
    "usable": false,
    "price": 150
  },
  {
    "id": "heal_potion",
    "name": "Heal Potion",
    "type": "heal",
    "description": "ไอเท็มใช้ฟื้นฟู HP 50% ให้ตัวละครที่เลือก",
    "img": "heal_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "hp_pct": 50 },
    "price": 120
  }
]

เพิ่มไฟล์ js/inventory.js
// js/inventory.js

let itemData = [];
let inventory = [];

/** โหลดไอเท็มจาก data/item.json */
async function loadItemData() {
  if (itemData.length) return;
  itemData = await fetch('data/item.json').then(r => r.json());
}
/** โหลดคลังของผู้เล่น (จาก localStorage) */
function loadInventory() {
  let raw = localStorage.getItem('user_inventory');
  inventory = raw ? JSON.parse(raw) : [];
}
/** เซฟ inventory */
function saveInventory() {
  localStorage.setItem('user_inventory', JSON.stringify(inventory));
}

/** ค้นหาไอเท็มใน data/item.json */
function findItemById(id) {
  return itemData.find(i => i.id === id);
}
/** render UI คลังไอเท็ม */
function renderInventoryUI() {
  let html = `
    <div style="display:flex;flex-direction:column;gap:7px;max-height:420px;overflow-y:auto;">
      ${inventory.length === 0 ? '<div style="color:#bbb;text-align:center;">ยังไม่มีไอเท็ม</div>' :
        inventory.map(item => {
          let info = findItemById(item.id) || {};
          return `
          <div style="display:flex;align-items:center;background:#272b38;padding:10px 16px;border-radius:10px;gap:19px;">
            <div style="width:36px;height:36px;border-radius:8px;background:#201624;display:flex;justify-content:center;align-items:center;">
              ${info.img ? `<img src="img/item/${info.img}" alt="${info.name}" style="width:32px;">` : "🎒"}
            </div>
            <div style="flex-grow:1;">
              <b>${info.name || item.id}</b>
              <div style="font-size:.91em;color:#84ccff;margin-top:2px;">${info.description || ''}</div>
            </div>
            <div style="color:#aaffbe;font-weight:bold;font-size:1.07em;">x${item.qty}</div>
            ${info.usable ? `<button class="primary-btn" style="padding:5px 1em 5px 1em;font-size:.96em;" onclick="useItemPrompt('${item.id}')">ใช้เลย</button>` : ""}
          </div>`
        }).join('')}
    </div>
  `;
  document.getElementById('inventoryArea').innerHTML = html;
}

/** ฟังก์ชัน popup ยืนยันการใช้ไอเท็ม */
window.useItemPrompt = function(itemId) {
  let info = findItemById(itemId);
  window.openPopup('useItem', `
    <div style="text-align:center;">
      <img src="img/item/${info.img}" style="width:52px;margin-bottom:8px;">
      <div style="font-size:1.09em;">${info.name}</div>
      <div style="margin:.6em 0 1.1em 0;font-size:.97em;color:#7cf;">${info.description}</div>
      <button class="primary-btn" style="margin:.8em .3em 0 .3em;padding:.5em 2.1em;" onclick="useItemNow('${itemId}')">ยืนยันใช้ไอเท็ม</button>
      <button class="secondary-btn" style="margin:.8em .3em 0 .3em;" onclick="closePopup()">ยกเลิก</button>
    </div>
  `, 'small', `ใช้ ${info.name}`);
}

/** ใช้ไอเท็มทันที (ลด qty, เรียก effect, update ui) */
window.useItemNow = function(itemId) {
  let idx = inventory.findIndex(i => i.id === itemId);
  let info = findItemById(itemId);
  if (idx === -1 || !info) return;
  if (inventory[idx].qty <= 0) return;
  // Effect (mock: อัปเดต character / heal / exp อัตโนมัติ)
  if (info.effect && info.effect.exp) {
    // เพิ่ม exp ตัวละครแรกใน team (ตัวอย่าง)
    let t = JSON.parse(localStorage.getItem('userTeam') || "[]");
    if (t.length) {
      let cid = t[0];
      let cdata = JSON.parse(localStorage.getItem("char_" + cid) || '{}');
      if (cdata) {
        cdata.exp = (cdata.exp || 0) + info.effect.exp;
        localStorage.setItem("char_" + cid, JSON.stringify(cdata));
        alert(`เพิ่ม EXP ให้ ${cdata.name} +${info.effect.exp}`);
      }
    }
  }
  // TODO: รองรับ heal, skillup, hp_pct, etc. ต่อ
  inventory[idx].qty--;
  if (inventory[idx].qty === 0) inventory.splice(idx, 1);
  saveInventory();
  window.closePopup();
  renderInventoryUI();
}

/** เพิ่มไอเท็มเข้า inventory */
window.addToInventory = function(itemId, qty) {
  if (!itemId || !qty) return;
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) inventory[idx].qty += qty;
  else inventory.push({ id: itemId, qty });
  saveInventory();
}

/** ลบไอเท็ม (admin, debug) */
window.removeFromInventory = function(itemId, qty) {
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) {
    inventory[idx].qty -= qty;
    if (inventory[idx].qty <= 0) inventory.splice(idx, 1);
    saveInventory();
  }
}

/** พร้อมใช้งานร่วมกับ popups (เช่น index.html, quest, shop ฯลฯ) */
document.addEventListener('DOMContentLoaded', async () => {
  await loadItemData();
  loadInventory();
  // เชื่อม hook popup
  const showInvPopup = () => {
    window.openPopup('inventory', `
      <div id="inventoryArea"></div>
      <div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>
    `, 'large', "คลังไอเท็ม");
    renderInventoryUI();
  };
  let btn = document.getElementById('btnInventory');
  if (btn) btn.onclick = showInvPopup;
  // Hook สำหรับระบบอื่นเรียก
  window.renderInventoryUI = renderInventoryUI;
});

/** เชื่อมต่อ API ให้ระบบอื่นเรียกใช้ */
window.inventoryEngine = {
  load: loadInventory,
  save: saveInventory,
  add: window.addToInventory,
  remove: window.removeFromInventory,
  list: () => inventory,
  findItemById,
  reloadAll: async () => { await loadItemData(); loadInventory(); },
}

เพิ่มไฟล์ data/upgrade.json
{
  "levelup": {
    "exp_required_base": 600,
    "exp_curve": 1.2,
    "exp_item": "exp_potion"
  },
  "promotion": {
    "star_max": 6,
    "requirements": [
      { "star": 3, "cost_gold": 1000, "materials": [ { "id": "rune_shard", "qty": 4 } ] },
      { "star": 4, "cost_gold": 4000, "materials": [ { "id": "rune_shard", "qty": 9 } ] },
      { "star": 5, "cost_gold": 9000, "materials": [ { "id": "rune_shard", "qty": 15 }, { "id": "heal_potion", "qty": 2 } ] }
    ]
  },
  "skillup": {
    "item": "skill_book",
    "increase_percent": 11,
    "max_lv": 6,
    "cost_gold": 700
  },
  "awaken": {
    "enabled": true,
    "require_materials": [
      { "star": 4, "materials": [ { "id": "rune_shard", "qty": 8 }, { "id": "heal_potion", "qty": 1 } ] },
      { "star": 5, "materials": [ { "id": "rune_shard", "qty": 14 }, { "id": "heal_potion", "qty": 2 } ] }
    ]
  }
}

เพิ่มไฟล์ js/upgrade.js
// js/upgrade.js - Epic Seven Auto Battle - Upgrade System

let upgradeConfig = {};
let charUpgradeTarget = null;
let inventory = []; // preload via inventory.js

/** โหลดข้อมูล config อัปเกรดจาก /data/upgrade.json */
async function loadUpgradeConfig() {
  if (Object.keys(upgradeConfig).length) return;
  upgradeConfig = await fetch('data/upgrade.json').then(r => r.json());
}

/** Render ป๊อปอัปอัปเกรดตัวละคร โชว์ stat + ปุ่มอัปเลเวล/อัปสกิล/เลื่อนขั้น */
async function openUpgradePopup(characterId) {
  await loadUpgradeConfig();
  await window.inventoryEngine.reloadAll();
  let char = JSON.parse(localStorage.getItem('char_' + characterId)
               || localStorage.getItem('char_' + characterId.replace('_', ''))
               || '{}');
  if (!char || !char.id) {
    alert("ไม่พบตัวละครนี้");
    return;
  }
  charUpgradeTarget = char; // export สำหรับ event ภายนอก

  // Render main popup
  let html = `
    <div style="display:flex;flex-direction:column;align-items:center;gap:10px;">
      <img src="img/char/${char.img}" style="width:72px;border-radius:15px;box-shadow:0 0 22px #1defeb66;">
      <div style="font-size:1.18em;font-weight:bold;">${char.name}</div>
      <div>Lv. <b>${char.level}</b> <span style="color:#ffe480;">★${char.star}</span>
          / <b>EXP</b> ${char.exp}/${char.exp_max || '?'}
      </div>
      <div style="color:#87c7ff;">HP <b>${char.hp}</b> | ATK <b>${char.atk}</b> | DEF <b>${char.def}</b> | SPD <b>${char.spd}</b></div>
      <hr style="width:88%; border:1px solid #234">
      <div style="display:flex;gap:12px;">
        <button class="primary-btn" onclick="doLevelUpChar('${char.id}')">เพิ่มเลเวล</button>
        <button class="primary-btn" onclick="doSkillUpChar('${char.id}')">อัปเกรดสกิล</button>
        <button class="primary-btn" onclick="doPromoteChar('${char.id}')">เลื่อนขั้น/เพิ่มดาว</button>
      </div>
      <button class="secondary-btn" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('upgradePopup', html, 'large', 'อัปเกรดตัวละคร');
}

/** อัปเลเวล (ใช้ exp_potion ได้ก่อน, หรือจำลองได้) */
window.doLevelUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let expItem = upgradeConfig.levelup.exp_item;
  let inv = window.inventoryEngine.list();
  let owned = inv.find(i => i.id === expItem);
  if (!owned || owned.qty <= 0) {
    alert("ไม่มี EXP Potion ในคลัง");
    return;
  }
  // EXP เพิ่ม
  let expAdd = 500;
  char.exp = (char.exp || 0) + expAdd;
  let lvled = false;
  while (char.exp >= (char.exp_max || 99999)) {
    char.exp -= char.exp_max;
    char.level = (char.level || 1) + 1;
    lvled = true;
  }
  if (lvled) alert("Level UP!");
  // เพิ่ม status ทุกเลเวล (สูตร basic -- สามารถโยง config/curve ต่อได้)
  char.hp = Math.round(char.hp * 1.085);
  char.atk = Math.round(char.atk * 1.08);
  char.def = Math.round(char.def * 1.09);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(expItem, 1);
  openUpgradePopup(char.id);
};

/** อัปสกิล (ใช้ skill_book, เพิ่ม multiplier, ลดคูลดาวน์) */
window.doSkillUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let inv = window.inventoryEngine.list();
  let skillBookItem = upgradeConfig.skillup.item;
  let owned = inv.find(i => i.id === skillBookItem);
  if (!owned || owned.qty <= 0) { alert("ไม่มี Skill Book ในคลัง"); return; }
  // Pick skill to up (สุ่ม 1 skill)
  let skills = char.skills || [];
  if (!skills.length) { alert("ไม่มีสกิลให้อัปเกรด"); return; }
  let idx = Math.floor(Math.random() * skills.length);
  let sk = skills[idx];
  // เพิ่ม multiplier และลด cooldown ถ้าได้
  if (sk.multiplier)
    sk.multiplier = +(sk.multiplier + upgradeConfig.skillup.increase_percent/100).toFixed(2);
  if (sk.cooldown && sk.cooldown > 1)
    sk.cooldown = Math.max(1, sk.cooldown - 1);
  char.skills[idx] = sk;
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(skillBookItem, 1);
  alert(`อัปเกรด Skill "${sk.name}" ให้แรงขึ้น!`);
  openUpgradePopup(char.id);
};

/** เลื่อนขั้น/Promotion เพิ่มดาว (ใช้ gold+materials) */
window.doPromoteChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let starNext = (char.star || 1) + 1;
  let prom = upgradeConfig.promotion.requirements.find(r => r.star === char.star);
  if (!prom) { alert("ดาวสูงสุดแล้ว"); return; }
  // เช็คของ
  let inv = window.inventoryEngine.list();
  let gold = inv.find(i => i.id === 'gold');
  if (!gold || gold.qty < prom.cost_gold) {
    alert("Gold ไม่พอ");
    return;
  }
  let enough = prom.materials.every(mat =>
    inv.find(i => i.id === mat.id && i.qty >= mat.qty));
  if (!enough) { alert("วัตถุดิบไม่พอ"); return; }
  // หักของ
  window.inventoryEngine.remove('gold', prom.cost_gold);
  prom.materials.forEach(mat => window.inventoryEngine.remove(mat.id, mat.qty));
  // เพิ่มดาว+อัป stat
  char.star = starNext;
  char.hp = Math.floor(char.hp * 1.20);
  char.atk = Math.floor(char.atk * 1.15);
  char.def = Math.floor(char.def * 1.12);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  alert("เลื่อนขั้นสำเร็จ! ดาวใหม่: " + char.star);
  openUpgradePopup(char.id);
};

// เชื่อม event กับ popup
document.addEventListener('DOMContentLoaded', () => {
  // Hook กับ characterCollection
  window.upgradeCharPopup = openUpgradePopup;
  // ถ้ามีการกดปุ่มจากคลังตัวละครให้เชื่อมได้เลย ตัวอย่าง:
  let area = document.getElementById('characterArea');
  if (area) area.addEventListener('click', e => {
    let target = e.target.closest('[data-upgrade]');
    if (target) openUpgradePopup(target.dataset.upgrade);
  });
});

// Expose ให้ระบบอื่นเรียก
window.upgradeEngine = {
  open: openUpgradePopup,
  reloadConfig: loadUpgradeConfig
};

เพิ่มไฟล์ data/rune.json
[
  {
    "id": "spd_rare",
    "name": "Speed Rune",
    "slot": 2,
    "main_stat": { "type": "spd", "val": 25 },
    "sub_stats": [
      { "type": "atk_pct", "val": 7 },
      { "type": "def", "val": 16 }
    ],
    "set": "speed",
    "rarity": 4,
    "icon": "💨"
  },
  {
    "id": "atk_pure",
    "name": "Attack Rune",
    "slot": 1,
    "main_stat": { "type": "atk_pct", "val": 15 },
    "sub_stats": [
      { "type": "spd", "val": 5 }
    ],
    "set": "rage",
    "rarity": 3,
    "icon": "⚔️"
  },
  {
    "id": "crit_big",
    "name": "Critical Rune",
    "slot": 4,
    "main_stat": { "type": "crit_pct", "val": 12 },
    "sub_stats": [
      { "type": "atk_pct", "val": 6 },
      { "type": "spd", "val": 7 },
      { "type": "effectiveness", "val": 4 }
    ],
    "set": "critical",
    "rarity": 5,
    "icon": "🎯"
  },
  {
    "id": "def_basic",
    "name": "Defense Rune",
    "slot": 3,
    "main_stat": { "type": "def_pct", "val": 10 },
    "sub_stats": [],
    "set": "defend",
    "rarity": 2,
    "icon": "🛡️"
  },
  {
    "set_bonuses": {
      "speed":    { "slot_required": 2, "bonus": { "spd": 25 },        "desc": "Speed +25%"  },
      "rage":     { "slot_required": 4, "bonus": { "atk_pct": 35 },     "desc": "ATK +35%"    },
      "critical": { "slot_required": 2, "bonus": { "crit_pct": 12 },    "desc": "Crit +12%"   },
      "defend":   { "slot_required": 2, "bonus": { "def_pct": 15 },     "desc": "DEF +15%"    }
    }
  }
]

เพิ่มไฟล์ js/rune.js
// js/rune.js
let runeData = [];
let runeSetBonuses = {};
let userRunes = [];    // รูนทั้งหมดใน inventory (id,unlock,slot ฯลฯ)
let equippedRunes = {}; // { char_id: [slot1, slot2, slot3, slot4] }
let currentCharEquip = null;   // ชื่อตัวละครที่กำลังสวมใส่

// โหลดข้อมูลรูนจาก data/rune.json
async function loadRuneData() {
  if (runeData.length) return;
  let arr = await fetch('data/rune.json').then(r => r.json());
  runeData = arr.filter(x => !x.set_bonuses);
  runeSetBonuses = arr.find(x => x.set_bonuses)?.set_bonuses || {};
}

// โหลดรูนของ user (จาก localStorage)
function loadUserRunes() {
  userRunes = JSON.parse(localStorage.getItem('user_runes') || "[]");
  equippedRunes = JSON.parse(localStorage.getItem('equipped_runes') || "{}");
}

// เซฟรูนกลับ localStorage
function saveUserRunes() {
  localStorage.setItem('user_runes', JSON.stringify(userRunes));
  localStorage.setItem('equipped_runes', JSON.stringify(equippedRunes));
}

// UI - render pop-up สวมใส่รูน
async function openRuneEquipPopup(char_id) {
  await loadRuneData(); loadUserRunes();
  currentCharEquip = char_id;
  // เตรียม grid ช่อง/รูน
  let charRunes = equippedRunes[char_id] || [null, null, null, null];
  let runeSlotHtml = '';
  for (let slot = 1; slot <= 4; slot++) {
    let runeId = charRunes[slot - 1];
    let ru = runeData.find(r => r.id === runeId);
    runeSlotHtml += `<div style="border:1px solid #348ac9;border-radius:10px;padding:8px 7px;min-width:96px;min-height:65px;margin:3px 0;">
      <b>ช่อง ${slot}:</b> ${ru ?
        `<span title="${ru.name}" style="font-size:1.2em;vertical-align:middle;">${ru.icon ?? '🔸'}</span> 
        <span style="color:#7df;font-weight:600;">${ru.name}</span>
        <button class="secondary-btn" style="font-size:.96em;padding:.1em .8em;margin-left:4px;" onclick="unequipRune(${slot})">ถอน</button>
        <div style="font-size:0.88em;color:#acfc94;margin-top:4px;">${mainStatText(ru.main_stat)} ${ru.sub_stats.map(mainStatText).join(', ')}</div>`
        : `<span style="color:#888;">ว่าง</span>
          <button class="primary-btn" style="font-size:.9em;" onclick="showSelectRune(${slot})">+ เพิ่มรูน</button>`
      }
      </div>`;
  }
  const setBuffHtml = renderSetBonus(charRunes);
  const html = `
    <div style="display:flex;flex-direction:column;gap:7px;">
      <h3>ร'ุนของตัวละครนี้</h3>
      ${runeSlotHtml}
      ${setBuffHtml}
      <button class="secondary-btn" onclick="closePopup()">บันทึกและปิด</button>
    </div>`;
  window.openPopup('runeEquip', html, 'large', 'สวมใส่รูน');
}

// Render set buff รวม (ถ้าเซ็ตครบ)
function renderSetBonus(runeIdArr) {
  let sets = {}, slots = {};
  runeIdArr.forEach(id => {
    let r = runeData.find(a => a.id === id);
    if (r) {
      sets[r.set] = (sets[r.set] || 0) + 1;
      slots[r.slot] = 1;
    }
  });
  let buffHtml = '';
  Object.keys(sets).forEach(set => {
    const cfg = runeSetBonuses[set];
    if (cfg && sets[set] >= cfg.slot_required) {
      buffHtml += `<div style="background:#22442b;margin:13px 0;padding:7px 9px;border-radius:7px;">
          <span style="font-size:1.16em;">${cfg.desc}</span> <b style="color:#66e0ca;">(ครบเซ็ต!)</b>
        </div>`;
    }
  });
  return buffHtml ? `<div style="margin-top:14px;">${buffHtml}</div>` : '';
}

// ใช้เพิ่ม/ลดรูนกับช่อง
window.showSelectRune = function(slot) {
  // แสดง pop-up เลือกรูนที่ยัง “ไม่ได้ใส่ใคร”
  let avai = userRunes.filter(r => !Object.values(equippedRunes)
                        .flat().includes(r.rune_id) && runeData.find(x => x.id === r.rune_id)?.slot === slot);
  let html = avai.length
      ? avai.map(r => {
          let d = runeData.find(x => x.id === r.rune_id);
          return `<div style="display:flex;align-items:center;gap:9px;">
            <span style="font-size:1.3em;">${d.icon ?? '🔸'}</span>
            <b>${d.name}</b> <span style="font-size:0.93em;color:#d2ffee;">${mainStatText(d.main_stat)}</span>
            <button class="primary-btn" onclick="equipRuneSlot('${r.rune_id}',${slot})">ใส่</button>
          </div>`;
        }).join('<hr style="margin:2px 0;">')
      : `<div style="color:#fda;">ยังไม่มีรูนสำหรับช่องนี้</div>`;
  window.openPopup('selectRune', html, 'small', `เลือกรูน ช่อง ${slot}`);
};

// เสริม-helper
function mainStatText(stat) {
  if (!stat) return "";
  const lib = { spd: 'SPD', atk_pct: 'ATK%', def: 'DEF', def_pct: 'DEF%', crit_pct: 'CRIT%', effectiveness: 'EFF' };
  return (lib[stat.type] || stat.type) + " +" + stat.val;
}

// ใส่รูนลง slot
window.equipRuneSlot = function(rune_id, slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = rune_id;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  closePopup('selectRune'); // ปิดเลือกรูน
  openRuneEquipPopup(currentCharEquip);
};
// ถอนรูน (ช่อง)
window.unequipRune = function(slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = null;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  openRuneEquipPopup(currentCharEquip);
};

// อัปเกรดรูน (ใช้วัตถุดิบ) - โบนัสสุ่ม (Mock)
window.upgradeRune = function(rune_id) {
  // จงสร้างระบบอัปเกรด + วัตถุดิบ (mock)
  alert("= Demo = คุณอัปเลเวลรูน " + rune_id + " แล้ว (mock)");
};


/* เพิ่มเติม: export ให้ระบบอื่นเชื่อม */
window.runeEngine = {
  openEquipPopup: openRuneEquipPopup,
  getEquipped: function(char_id) { loadUserRunes(); return equippedRunes[char_id] || [null,null,null,null]; },
  getUserRunes: function() { loadUserRunes(); return userRunes; },
  addRune: function(rune_id) { userRunes.push({ rune_id }); saveUserRunes(); },
  removeRune: function(rune_id) { userRunes = userRunes.filter(r => r.rune_id !== rune_id); saveUserRunes(); }
};

// Hook DOM ในคลังตัวละคร (เช่นปุ่ม)
document.addEventListener('DOMContentLoaded', async () => {
  await loadRuneData(); loadUserRunes();
  // ตัวอย่างปุ่ม: <button data-equiprune="cid">ติดตั้งรูน</button>
  if (document.getElementById('characterArea')) {
    document.getElementById('characterArea').addEventListener('click', e => {
      const btn = e.target.closest('[data-equiprune]');
      if (btn) openRuneEquipPopup(btn.getAttribute('data-equiprune'));
    });
  }
});

เพิ่มไฟล์ data/gacha.json
{
  "gachas": [
    {
      "id": "premium_summon",
      "name": "Premium Gacha",
      "type": "normal",
      "enabled": true,
      "cost": { "item": "diamond", "amount": 50 },
      "pool": [
        { "char_id": "astra", "rarity": 5, "rate": 5 },
        { "char_id": "slime_basic", "rarity": 3, "rate": 95 }
      ],
      "pity": { "enabled": true, "max": 20, "guarantee_rarity": 5 },
      "banner_img": "gacha_premium.png",
      "desc": "สุ่มตัวละครระดับสูง\nยิ่งหมุนเยอะยิ่งมีโอกาสได้ ★5!"
    },
    {
      "id": "event_summon_may2024",
      "name": "May 2024 Event",
      "type": "event",
      "enabled": false,
      "cost": { "item": "ticket_event", "amount": 1 },
      "pool": [
        { "char_id": "astra", "rarity": 5, "rate": 10 },
        { "char_id": "slime_basic", "rarity": 3, "rate": 90 }
      ],
      "pity": { "enabled": false },
      "banner_img": "gacha_event_may2024.png",
      "desc": "เฉพาะกิจ - ใช้ตั๋ว Event เท่านั้น"
    }
  ]
}

เพิ่มไฟล์ js/gacha.js
// js/gacha.js - ระบบสุ่มกาชา Epic Seven Clone Frontend

let gachaList = [];
let gachaUserLog = [];
let gachaPity = {}; // {gachaId: <count>}

// โหลดข้อมูลกาชาทั้งหมด
async function loadGachaData() {
    if (gachaList.length) return;
    const res = await fetch('data/gacha.json').then(r => r.json());
    gachaList = res.gachas;
}

// โหลด log กาช่าของผู้ใช้
function loadGachaUserLog() {
    gachaUserLog = JSON.parse(localStorage.getItem('gacha_user_log') || '[]');
    gachaPity = JSON.parse(localStorage.getItem('gacha_pity') || '{}');
}
// เซฟ log/pity
function saveGachaLog() {
    localStorage.setItem('gacha_user_log', JSON.stringify(gachaUserLog));
    localStorage.setItem('gacha_pity', JSON.stringify(gachaPity));
}

// Render popup UI
async function openGachaPopup() {
    await loadGachaData(); loadGachaUserLog();
    // Render ทุกกาชาที่ enabled
    let avai = gachaList.filter(g => g.enabled);
    if (!avai.length) {
        window.openPopup('gacha', `<div>ไม่พบกาชาที่เปิดใช้งาน</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'กาชา');
        return;
    }
    // Render banner + ปุ่มสุ่ม
    let html = avai.map(g => `
        <div style="background:#1b232e;padding:24px 1.5em;border-radius:18px;margin-bottom:24px;text-align:center;box-shadow:0 2px 18px #278ddf18;">
            <img src="img/gacha/${g.banner_img || 'noimg.png'}" style="width:100%;min-width:210px;max-width:330px;border-radius:9px;margin-bottom:7px;box-shadow:0 1px 40px #35cfff23;">
            <div style="font-size:1.14em;color:#7ffbfb;font-weight:600;margin-bottom:4px;">${g.name}</div>
            <div style="color:#aef;margin-bottom:1em;">${g.desc || ''}</div>
            <div style="font-size:.95em;margin-bottom:1em;"><b>ค่าใช้จ่าย: </b>
                <span style="color:goldenrod;font-weight:bold;">${g.cost.amount}</span> 
                <img src="img/item/${g.cost.item}.png" style="width:19px;vertical-align:middle;" />
            </div>
            <div><button class="primary-btn" onclick="gachaSummon('${g.id}',1)">สุ่ม 1 ครั้ง</button>
            <button class="primary-btn" onclick="gachaSummon('${g.id}',10)">สุ่ม 10 ครั้ง</button></div>
            <div style="margin-top:18px;font-size:.9em;">
                <a href="#" onclick="openGachaLogPopup('${g.id}');return false;" style="color:#85deff;text-decoration:underline;">ดูประวัติการสุ่ม</a>
                ${g.pity?.enabled ? `<span style="margin-left:2em;color:#ffa;">Pity: ${gachaPity[g.id]||0}/${g.pity.max}</span>` : ''}
            </div>
        </div>
    `).join('');
    window.openPopup('gacha', html, 'large', 'กาชา');
}

// ฟังก์ชันสุ่ม gacha ([กดปุ่ม])
window.gachaSummon = async function(gachaId, times = 1) {
    await loadGachaData(); loadGachaUserLog();
    let g = gachaList.find(x => x.id === gachaId); if (!g) return;
    // ตรวจ inventory
    let inv = window.inventoryEngine?.list();
    let currency = inv?.find(i => i.id === g.cost.item);
    if (!currency || currency.qty < g.cost.amount * times) {
        alert(`คุณมี ${g.cost.item} ไม่เพียงพอ`);
        return;
    }
    // loop draw
    let poolFlat = [];
    g.pool.forEach(entry => {
        for (let i = 0; i < entry.rate; i++) poolFlat.push(entry.char_id);
    });
    let got = [], pityFlag = false;
    for (let t = 0; t < times; t++) {
        let pity = (g.pity?.enabled ? gachaPity[g.id] || 0 : 0);
        let pick;
        // pity trigger
        if (g.pity?.enabled && g.pity.max && pity+1 >= g.pity.max) {
            pick = g.pool.find(c => c.rarity === g.pity.guarantee_rarity)?.char_id || poolFlat[0];
            gachaPity[g.id] = 0;
            pityFlag = true;
        } else {
            pick = poolFlat[Math.floor(Math.random() * poolFlat.length)];
            // ถ้าได้การ์ดตาม pity reset
            let card = g.pool.find(c => c.char_id === pick);
            if (g.pity?.enabled) {
                if(card && card.rarity === g.pity.guarantee_rarity) gachaPity[g.id] = 0;
                else gachaPity[g.id] = (gachaPity[g.id] || 0) + 1;
            }
        }
        got.push(pick);
        // เพิ่มตัวละครเข้าคลัง (characterCollection / LocalStorage)
        window.collectCharacter?.(pick);
        // Log
        gachaUserLog.push({
            time: Date.now(),
            char: pick,
            gacha_id: g.id,
            rarity: g.pool.find(c => c.char_id === pick)?.rarity || 3
        });
    }
    // หักทุน
    window.inventoryEngine.remove(g.cost.item, g.cost.amount * times);
    saveGachaLog();
    // Show animation/result popup
    openGachaResult(g, got, pityFlag);
};

// Add character (เข้าคลัง ถ้าไม่มี)
window.collectCharacter = function(charId) {
    // เอาตัวละครลง localStorage/char_collection
    let chars = JSON.parse(localStorage.getItem('char_collection') || '[]');
    if(!chars.includes(charId)) chars.push(charId);
    localStorage.setItem('char_collection', JSON.stringify(chars));
}

// แสดงผลสุ่มกาชา (animationเล็กน้อย + รายละเอียด + เพิ่มตัวละคร)
function openGachaResult(gacha, resultArr, pityFlag) {
    let html = `<div style="text-align:center;">
        <div style="font-size:1.7em;margin-bottom:6px;">🎴 Gacha Result</div>
        <div style="color:#fcc;${pityFlag ? 'font-weight:bold;' : ''}">${pityFlag ? 'Pity Triggerd! การันตีได้รับระดับสูงสุด!' : ''}</div>
        <div style="display:flex;justify-content:center;gap:13px;flex-wrap:wrap;margin-top:1em;">` +
        resultArr.map(cid => {
            let imgSrc = `img/char/${cid}.png`;
            return `<div style="background:#223352;border:2px solid #35aaffb7;border-radius:13px;padding:8px 12px;display:flex;flex-direction:column;align-items:center;min-width:93px;">
                <img src="${imgSrc}" style="width:58px;margin-bottom:8px;border-radius:10px;box-shadow:0 0 17px #27508080;" />
                <b style="color:#aef;">${cid}</b>
            </div>`;
        }).join('') +
        `</div>
        <div style="margin-top:18px;">
            <button class="primary-btn" onclick="closePopup();openGachaPopup();">กลับหน้ากาชา</button>
        </div>
    </div>`;
    window.openPopup('gachaResult', html, 'large', 'สุ่มกาชาสำเร็จ');
}

// ดูประวัติกาชา
window.openGachaLogPopup = function(gachaId) {
    loadGachaUserLog();
    let logs = gachaUserLog.filter(x => x.gacha_id === gachaId).slice(-30).reverse();
    let html = logs.length ? `<div style="max-height:300px;overflow-y:auto;"><table style="width:100%;">
        <tr style="color:#aae;"><th>#</th><th>เวลา</th><th>ผลสุ่ม</th><th>Rarity</th></tr>
        ${logs.map((l,i) => `<tr>
            <td>${i+1}</td>
            <td>${(new Date(l.time)).toLocaleString()}</td>
            <td>${l.char}</td>
            <td><span style="color:${l.rarity>=5?'gold':'#fff'};">★${l.rarity}</span></td>
        </tr>`).join('')}
        </table></div>` : `<div style="text-align:center">ยังไม่ได้สุ่มกาชา</div>`;
    window.openPopup('gachaLog'+gachaId, html, 'large', "ประวัติกาชา");
}

// auto hook ปุ่ม
document.addEventListener('DOMContentLoaded', () => {
    let btn = document.getElementById('btnGacha');
    if(btn) btn.onclick = openGachaPopup;
});

// สำหรับระบบ/admin เรียก
window.gachaEngine = {
    open: openGachaPopup,
    log: openGachaLogPopup,
    summon: window.gachaSummon
};

เพิ่มไฟล์ data/stage/chapter1.json
{
  "id": "chapter1",
  "name": "หุบเขาเริ่มต้น",
  "desc": "จุดกำเนิดการผจญภัยของคุณในโลกสุดอันตราย",
  "zones": [
    {
      "id": "zone1",
      "name": "ทุ่งฝึกฝน",
      "stages": [
        {
          "id": "stage1",
          "name": "ทางเข้าหุบเขา",
          "desc": "สู้กับ Slime ตัวแรก! ฝึกพื้นฐานการต่อสู้",
          "require_energy": 5,
          "waves": [
            {
              "wave_no": 1,
              "enemies": [
                { "id": "slime_basic", "level": 1 }
              ]
            }
          ],
          "unlocked_by": null,
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 1, "rate": 80 },
            { "id": "gold", "min": 150, "max": 300, "rate": 100 }
          ],
          "exp_reward": 25,
          "recommended_level": 1
        },
        {
          "id": "stage2",
          "name": "สะพานโบราณ",
          "desc": "ผ่าน Slime หลายตัว สู่พื้นที่ลึก",
          "require_energy": 7,
          "waves": [
            {
              "wave_no": 1,
              "enemies": [
                { "id": "slime_basic", "level": 2 },
                { "id": "slime_basic", "level": 2 }
              ]
            }
          ],
          "unlocked_by": "stage1",
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 2, "rate": 70 },
            { "id": "gold", "min": 170, "max": 350, "rate": 100 }
          ],
          "exp_reward": 32,
          "recommended_level": 2
        },
        {
          "id": "stage3",
          "name": "สนามทดสอบ",
          "desc": "มอนสเตอร์กลุ่ม เริ่มท้าทายมากขึ้น",
          "require_energy": 9,
          "waves": [
            {
              "wave_no": 1,
              "enemies": [
                { "id": "slime_basic", "level": 3 },
                { "id": "slime_basic", "level": 3 }
              ]
            },
            {
              "wave_no": 2,
              "enemies": [
                { "id": "slime_basic", "level": 4 },
                { "id": "slime_basic", "level": 4 }
              ]
            }
          ],
          "unlocked_by": "stage2",
          "drops": [
            { "id": "exp_potion", "min": 2, "max": 2, "rate": 100 },
            { "id": "rune_shard", "min": 1, "max": 1, "rate": 40 }
          ],
          "exp_reward": 48,
          "recommended_level": 3
        }
      ]
    }
  ]
}

เพิ่มไฟล์ js/stage.js
// js/stage.js - ระบบดันเจี้ยน Stage/Map (Frontend Only)
// Author: (Your Name)
/*
หน้าที่:
- โหลดข้อมูลแผนที่/ดันเจี้ยนจาก data/stage/*.json
- render UI map (เป็น popup) เลือก chapter/zone/stage
- lock/unlock stage ตามเงื่อนไข
- เรียก battleEngine
- จัดการ energy
*/

let chapterData = []; // บททั้งหมด (โหลด async)
let stageProgress = {}; // ความคืบหน้า stage

// โหลด progress จาก localStorage (ผ่านแล้ว, unlock)
function loadStageProgress() {
    try {
        stageProgress = JSON.parse(localStorage.getItem('stage_progress') || '{}');
    } catch { stageProgress = {}; }
}

// เซฟ progress
function saveStageProgress() {
    localStorage.setItem('stage_progress', JSON.stringify(stageProgress));
}

// โหลด chapter ทั้งหมด (mock: ทำแค่ 1 file ก่อน)
async function loadChapters() {
    chapterData = [];
    // ใน production, อาจ fetch รายการบทจาก summary json
    let ch = await fetch('data/stage/chapter1.json').then(r => r.json());
    chapterData.push(ch);
}

// Render popup หน้าเลือก Stage (pop-up เท่านั้น)
async function openStageMapPopup() {
    await loadChapters();
    loadStageProgress();
    let html = '';
    chapterData.forEach(chap => {
        html += `<div style="border:2px solid #294c70;padding:18px 18px 11px 18px;margin:18px 0 0 0;border-radius:15px;background:#202d3a;">
        <h3 style="color:#7ce1ff;">${chap.name}</h3>
        <div style="font-size:.97em;color:#aad;">${chap.desc || ""}</div>
        ${chap.zones.map(zone => `
            <div style="margin-top:13px;">
                <b style="color:#ffe78c">${zone.name}</b>
                <div style="display:flex;gap:17px;margin-top:9px;">
                ${zone.stages.map(s => {
                    let unlocked = !s.unlocked_by || stageProgress[s.unlocked_by];
                    let cleared = stageProgress[s.id];
                    return `<div style="border:1.5px solid #233d7f;background:${cleared?'#25462c':'#24344b'};border-radius:14px;min-width:128px;padding:14px 8px 10px 8px;position:relative;opacity:${unlocked?1:.35};">
                            <b>${s.name}</b>
                            ${cleared?'<span style="color:#6df;font-size:.95em">✓ ผ่านแล้ว</span>':''}
                            <div style="font-size:.92em;color:#acffc3;">Energy: ${s.require_energy}</div>
                            <div style="font-size:.88em;color:#aad;margin-bottom:6px;">${s.desc}</div>
                            <button class="primary-btn" style="padding:4px 1.1em;font-size:.97em" 
                                ${unlocked ? `onclick="startStageBattle('${chap.id}','${zone.id}','${s.id}')"` : 'disabled'}>
                                ${cleared?'เล่นซ้ำ':'เริ่มด่าน'}
                            </button>
                        </div>`;
                }).join('')}
                </div>
            </div>
        `).join('')}
        </div>`;
    });
    html += `<div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>`;
    window.openPopup('stageMap', html, 'large', "เลือกแผนที่ดันเจี้ยน");
}

// Event - เมื่อผู้ใช้เลือก Stage
window.startStageBattle = async function (chapterId,zoneId,stageId) {
    // โหลด stage data
    let chapter = chapterData.find(ch => ch.id === chapterId);
    if(!chapter) return;
    let zone = chapter.zones.find(z => z.id === zoneId);
    if(!zone) return;
    let stage = zone.stages.find(s => s.id === stageId);
    if(!stage) return;

    // Check energy
    let energy = Number(localStorage.getItem("user_energy") || 0);
    if(energy < stage.require_energy){
        alert("Energy ไม่พอ!");
        return;
    }
    // ลด energy
    energy -= stage.require_energy;
    localStorage.setItem("user_energy",energy);

    // เรียก battle engine - Setup enemy จาก waves
    // ตัวอย่าง: ตั้ง monsters global
    window.prepareBattleFromStage(stage);

    // ปิด popup map, แสดงสนามรบ
    closePopup();
    document.getElementById('mainBattlefield').classList.remove('hide'); // show battlefield
    // เตรียมเริ่ม battle
    setTimeout(() => {
        if (window.battleEngine && window.battleEngine.startBattle) {
            window.battleEngine.startBattle();
        }
    }, 777); // ให้ animation UI ทัน
}

// เตรียม data ฝั่งมอนสเตอร์จาก stage (wave 1 เท่านั้น, สามารถต่อยอดเวฟ)
window.prepareBattleFromStage = function(stage) {
    // Fix: รับแค่ wave 1 (ในอนาคต loop wave)
    if (!stage || !stage.waves || !stage.waves.length) return;
    let wave = stage.waves[0];
    window.monsters = []; // override monster global

    window.monsters = wave.enemies.map((m,ix) => ({
        ...m,
        ...window.getCharDataSync(m.id, m.level),    // ดึงค่าสเตตัส base+level
        id: m.id+"_"+(ix+1),
        currHp: m.hp,
        alive: true,
        buffs: [],
        debuffs: [],
        cooldowns: [0,0,0],
        side: 'mon',
        index: ix
    }));
    // Option: ถ้าใช้เวฟ ต้อง implement ค่อยๆสลับเวฟ
};

// ดึง charData (mock sync สำหรับตัวมอน basic, ในอนาคตใช้ async + cache)
window.getCharDataSync = function(charId, lv=1) {
    // สำหรับ dev: ดึงจาก localStorage cache ก่อน, ถ้าไม่มี fetch xhr
    try {
        let raw = localStorage.getItem('char_' + charId);
        if(raw) return JSON.parse(raw);
        let xhr = new XMLHttpRequest();
        xhr.open("GET", `data/char/${charId}.json`, false);
        xhr.send();
        if (xhr.status === 200) {
            let data = JSON.parse(xhr.responseText);
            // scale stat
            let stat = {...data};
            if(lv && lv > 1){
                let scale = (lv-1)*.12 + 1.0;
                stat.hp = Math.floor(stat.hp * scale);
                stat.atk = Math.floor(stat.atk * scale);
                stat.def = Math.floor(stat.def * scale);
                stat.level = lv;
            }
            return stat;
        }
    } catch { }
    return {hp:100,atk:20,def:9,level:lv};
};

// ตรวจผลจบด่าน (win) แล้วเซฟ progress/unlock ต่อด่านถัดไป
window.updateStageProgress = function(stageId) {
    loadStageProgress();
    stageProgress[stageId] = true;
    saveStageProgress();
};

// Hook UI: เสริมเมนูปุ่ม "เลือกดันเจี้ยน" (btnStage)
document.addEventListener('DOMContentLoaded', ()=>{
    let btn = document.getElementById('btnStageMap');
    if(btn) btn.onclick = openStageMapPopup;
});
// (option) เพิ่มปุ่มใน index.html, หรือเรียกด้วย openStageMapPopup()

// export
window.stageEngine = {
    open: openStageMapPopup,
    reload: loadChapters,
    progress: ()=>stageProgress
};

เพิ่มไฟล์ data/shop.json
{
  "shops": [
    {
      "id": "main",
      "name": "ร้านค้าหลัก",
      "type": "main",
      "enabled": true,
      "desc": "ซื้อไอเท็ม, วัตถุดิบ, และของจำเป็นประจำวัน",
      "refresh_type": "none",      // none | time | manual | daily | weekly
      "refresh_cycle_minutes": 0,
      "items": [
        {
          "id": "gold_5000",
          "item_id": "gold",
          "amount": 5000,
          "price_item": "diamond",
          "price_amount": 10,
          "desc": "รับ 5,000 Gold ทันที",
          "can_buy": 999,
          "daily_limit": 3,
          "enabled": true
        },
        {
          "id": "exp_potion_1",
          "item_id": "exp_potion",
          "amount": 1,
          "price_item": "gold",
          "price_amount": 110,
          "desc": "EXP Potion x1 สำหรับอัปเลเวลตัวละคร",
          "can_buy": 99,
          "daily_limit": 5,
          "enabled": true
        },
        {
          "id": "rune_shard_1",
          "item_id": "rune_shard",
          "amount": 1,
          "price_item": "gold",
          "price_amount": 200,
          "desc": "Rune Shard สำหรับสร้างรูน",
          "can_buy": 50,
          "daily_limit": 0,
          "enabled": true
        }
      ]
    },
    {
      "id": "event",
      "name": "Event Shop",
      "type": "event",
      "enabled": false,
      "desc": "ร้านค้านี้เปิดเฉพาะช่วงกิจกรรม",
      "refresh_type": "none",
      "items": []
    },
    {
      "id": "secret",
      "name": "Secret Shop",
      "type": "secret",
      "enabled": false,
      "desc": "สุ่มเปลี่ยนสินค้าใหม่ทุก 30 นาที",
      "refresh_type": "time",
      "refresh_cycle_minutes": 30,
      "items": []
    }
  ]
}

เพิ่มไฟล์ js/shop.js
// js/shop.js - Epic Seven Clone Frontend Shop System

let shopData = [];
let purchaseHistory = {}; // Log per user/day: { shopId_itemId: numBought }

async function loadShopData() {
    if (shopData.length) return;
    let res = await fetch('data/shop.json').then(r => r.json());
    shopData = res.shops;
}

function loadShopHistory() {
    try {
        purchaseHistory = JSON.parse(localStorage.getItem('shop_purchase_history') || '{}');
    } catch { purchaseHistory = {}; }
}
function saveShopHistory() {
    localStorage.setItem('shop_purchase_history', JSON.stringify(purchaseHistory));
}

// ---------- Render UI ----------
async function openShopPopup(shopId = "main") {
    await loadShopData(); loadShopHistory();
    let shop = shopData.find(s => s.id === shopId && s.enabled);
    if (!shop) {
        window.openPopup('shop', `<div>ไม่พบร้านค้านี้ หรือร้านค้านี้ปิดอยู่</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'ร้านค้า');
        return;
    }

    let html = `
      <div style="font-size:1.14em;color:#dac1ff;margin-bottom:6px;">${shop.desc || ''}</div>
      <div style="display:flex;gap:17px;flex-wrap:wrap;align-items:stretch;">
        ${shop.items.filter(i => i.enabled).map(item => renderShopItem(shop, item)).join('')}
      </div>
      <div style="text-align:right;margin-top:23px;">
        <button class="secondary-btn" onclick="closePopup()">ปิด</button>
      </div>
    `;
    window.openPopup('shop', html, 'large', shop.name);
    renderShopLiveUI(shop.id);
}

// Helper แสดงสินค้า 1 อัน
function renderShopItem(shop, item) {
    let inv = window.inventoryEngine?.list() || [];
    let priceOwned = inv.find(i => i.id === item.price_item)?.qty || 0;
    let itemData = window.inventoryEngine.findItemById(item.item_id) || {};
    // ซื้อไปแล้วกี่ครั้งวันนี้
    let key = `${shop.id}_${item.id}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    let canBuy = item.can_buy && bought < item.can_buy;
    let canBuyToday = item.daily_limit ? bought < item.daily_limit : true;
    let disabled = !canBuy || !canBuyToday || priceOwned < item.price_amount;

    return `
      <div style="background:#223246;border:2px solid #53a0fa5c;border-radius:13px;min-width:162px;flex:1 0 174px;padding:14px 12px 18px 12px;margin-bottom:.8em;display:flex;flex-direction:column;align-items:center;justify-content:space-between;">
        <img src="img/item/${itemData.img||'noimg.png'}" alt="${itemData.name||item.item_id}" style="width:38px;margin-bottom:7px;" />
        <div style="font-size:1.1em;font-weight:bold;">${itemData.name||item.item_id} x${item.amount}</div>
        <div style="color:#ffbe77;font-size:.98em;">${item.desc || (itemData && itemData.description)||''}</div>
        <div style="margin:.8em 0;font-size:.95em;">
          <b>ราคา:</b> <span style="color: gold;font-weight:bold;">${item.price_amount}</span> <img src="img/item/${item.price_item}.png" style="width:18px;vertical-align:middle" /> 
          <br/>
          <span style="font-size:.97em;color:#cdf;">คงเหลือ: ${priceOwned}</span>
        </div>
        ${item.daily_limit ? `<div style="color:#9eecff;font-size:.92em;margin:.4em 0;">วันนี้ซื้อแล้ว: ${bought} / ${item.daily_limit}</div>` : ''}
        <button class="primary-btn" style="padding:6px 1.4em;font-size:.97em;" onclick="buyShopItem('${shop.id}','${item.id}')" ${disabled?"disabled":""}>${disabled?'ซื้อไม่ได้':'ซื้อ'}</button>
      </div>
    `;
}

// ---------- Buy flow ----------
window.buyShopItem = function(shopId, itemId) {
    let shop = shopData.find(s => s.id === shopId);
    if (!shop) return;
    let item = shop.items.find(i => i.id === itemId);
    if (!item) return;
    let key = `${shopId}_${itemId}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    if (item.can_buy && bought >= item.can_buy) return alert("ถึงจำนวนรอบสูงสุดแล้ว");
    if (item.daily_limit && bought >= item.daily_limit) return alert("ถึงจำนวนจำกัดรายวันแล้ว");
    let inv = window.inventoryEngine?.list() || [];
    let owned = inv.find(i => i.id === item.price_item)?.qty || 0;
    if (owned < item.price_amount) return alert("ทรัพยากรไม่เพียงพอ");

    // confirm popup
    let itemInfo = window.inventoryEngine.findItemById(item.item_id) || {};
    window.openPopup('confirmBuy', `
      <div style="text-align:center;">
        <img src="img/item/${itemInfo.img||'noimg.png'}" style="width:49px;margin-bottom:8px;">
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">${itemInfo.name || item.item_id}</div>
        <div style="margin-bottom:8px;">${item.desc || ''} <br> <b>x${item.amount}</b></div>
        <div style="color:gold;font-size:.98em;">ราคา ${item.price_amount} <img src="img/item/${item.price_item}.png" style="width:17px;vertical-align:middle" /> </div>
        <button onclick="confirmShopBuy('${shopId}','${item.id}')" class="primary-btn" style="margin:.7em 1em 0 1em;">ยืนยันซื้อ</button>
        <button onclick="closePopup()" class="secondary-btn" style="margin:.7em 0 0 0;">ยกเลิก</button>
      </div>
    `, 'small', 'ยืนยันสั่งซื้อ');
}

// ดำเนินการซื้อจริง
window.confirmShopBuy = function(shopId, itemId) {
    let shop = shopData.find(s => s.id === shopId);
    if (!shop) return;
    let item = shop.items.find(i => i.id === itemId);
    let key = `${shopId}_${itemId}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    if (item.can_buy && bought >= item.can_buy) return alert("ถึงจำนวนสูงสุดแล้ว");
    if (item.daily_limit && bought >= item.daily_limit) return alert("ถึงจำนวนจำกัดรายวันแล้ว");
    let inv = window.inventoryEngine?.list() || [];
    let own = inv.find(i => i.id === item.price_item);
    if (!own || own.qty < item.price_amount) return alert("ทรัพยากรไม่พอ");
    window.inventoryEngine.remove(item.price_item, item.price_amount);
    window.inventoryEngine.add(item.item_id, item.amount);
    purchaseHistory[key] = (bought || 0) + 1;
    saveShopHistory();
    closePopup('confirmBuy');
    // popup สรุป
    window.openPopup('shopResult', `
      <div style="text-align:center;color:#53fdc2;">
        <div style="font-size:1.15em;margin:11px 0;"><b>ซื้อสำเร็จ!</b></div>
        <img src="img/item/${item.item_id}.png" style="width:47px;" />
        <div>ได้รับ <b>${window.inventoryEngine.findItemById(item.item_id)?.name || item.item_id} x${item.amount}</b></div>
        <div style="margin-top:13px;"><button class="primary-btn" onclick="closePopup();openShopPopup('${shopId}')">กลับหน้าร้าน</button></div>
      </div>
    `, 'small', 'ซื้อสำเร็จ');
}

// Helper: date string ต่อวัน
function getTodayStr() {
    let d = new Date();
    return d.getFullYear().toString() + (d.getMonth()+1).toString().padStart(2,"0") + d.getDate().toString().padStart(2,"0");
}

// Render shop item area live
function renderShopLiveUI(shopId) {
    // ควร refresh ปริมาณเงิน, จำนวนรอบในแต่ละปุ่มหลังซื้อ
    // Optional สามารถ trigger ใส่ event ด้วย
}

// Auto menu bind
document.addEventListener('DOMContentLoaded', ()=> {
    let btn = document.getElementById('btnShop');
    if (btn) btn.onclick = ()=> openShopPopup('main');
});

// Expose global
window.shopEngine = {
    open: openShopPopup,
    reload: loadShopData
};

เพิ่มไฟล์ js/announcement.js
// js/announcement.js

let announcementList = [];

/** โหลดรายการ announcement (async) */
async function loadAnnouncements() {
    if (announcementList.length) return;
    let raw = await fetch('data/announcement.json').then(r => r.json());
    announcementList = raw.announcements || [];
}

/** Render popup รวมประกาศในหมวดต่างๆ */
async function openAnnouncementPopup() {
    await loadAnnouncements();
    // เช็ค unread ด้วย localStorage
    let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
    // Pin ประกาศ
    let pin = announcementList.filter(a => a.pin && isAnnouncementAvailable(a));
    let normal = announcementList.filter(a => !a.pin && isAnnouncementAvailable(a));
    // Group ตาม type
    function groupBy(arr, key) {
        return arr.reduce((r, x) => ((r[x[key]] = r[x[key]] || []).push(x), r), {});
    }
    let normalGrp = groupBy(normal, 'type');
    let tabTypes = ['all', ...Object.keys(normalGrp)];
    let activeType = 'all';
    // Render tab & list
    let htmlTabs = tabTypes.map(type => 
        `<button class="primary-btn" style="margin-right:8px;font-weight:${type===activeType?'bold':'400'};" onclick="changeAnnouncementTab('${type}')">${type==='all'?'ทั้งหมด':typeTitle(type)}</button>`
    ).join('');
    let htmlPin = pin.length ? `<div style="margin-bottom:16px;">${pin.map(renderAnnounceCard).join('')}</div>` : '';
    let htmlList = normal.map(renderAnnounceCard).join('');
    let html = `
        <div>
            <div style="margin-bottom:13px;">${htmlTabs}</div>
            ${htmlPin}
            <div id="announceMainList">${htmlList}</div>
        </div>
        <div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>
    `;
    window.openPopup('announcement', html, 'large', 'ประกาศ');
    // จุดแดงเมนู
    setMenuNoti('btnAnnouncement', hasUnreadAnnouncement());
}

/** Render card รายการ */
function renderAnnounceCard(a, idx = 0) {
    let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
    let unread = !readIds.includes(a.id);
    let badge = a.type === 'patch' ? '🛠️ ' : a.type === 'event' ? '🎉 ' : a.type === 'reward' ? '🎁 ' :
                a.type === 'shop' ? '🛒 ' : a.type === 'system' ? '⚠️ ' : '';
    let pin = a.pin ? '<span style="color:#fdec60;font-size:1.1em;">📌</span>' : '';
    let statusDot = unread ? '<span style="display:inline-block;width:9px;height:9px;border-radius:7px;background:#ff6565;margin-left:6px;margin-bottom:1px;"></span>' : '';
    return `
    <div class="announce-card" style="background:#222d3d;border-radius:9px;margin-bottom:11px;padding:7px 13px 7px 13px;box-shadow:0 1px 16px #1470ad21;border:2px solid #174e8b42;cursor:pointer;transition:.14s;" onclick="viewAnnouncement('${a.id}')">
        <div style="font-size:1.02em;margin-bottom:1px;font-weight:bold;">
          ${pin} ${badge} <span>${a.title || '-'}</span> ${statusDot}
        </div>
        <div style="color:#9ad;font-size:.95em;">${a.show_time?formatTime(a.show_time):""} ${typeTitle(a.type)}</div>
        <div style="font-size:.93em;">
            ${a.short ? escapeHTML(a.short || '') : truncate(stripTags(a.content || ''), 71)}
        </div>
    </div>
    `;
}

/** ดูประกาศเต็ม */
window.viewAnnouncement = function (id) {
    let ann = announcementList.find(a => a.id === id);
    if (!ann) return;
    // Mark as read
    let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
    if (!readIds.includes(ann.id)) {
        readIds.push(ann.id);
        localStorage.setItem('read_announcement_ids', JSON.stringify(readIds));
    }
    // รัน custom action (เช่น popup / shop ฯลฯ)
    if (ann.force_popup) setTimeout(() => {}, 1); // สามารถเพิ่ม logic
    // Render detail
    let badge = ann.type === 'patch' ? '🛠️ ' : ann.type === 'event' ? '🎉 ' : ann.type === 'reward' ? '🎁 ' :
                ann.type === 'shop' ? '🛒 ' : ann.type === 'system' ? '⚠️ ' : '';
    let html = `
        <div style="font-size:1.19em;margin-bottom:.6em;">
            ${badge}<b>${escapeHTML(ann.title || '')}</b>
            ${ann.pin?'<span style="font-size:1.1em;color:#fdc900;">📌</span>':''}
        </div>
        <div style="color:#bce1ff;font-size:.97em;margin-bottom:4px;">
            หมวด: ${typeTitle(ann.type)} &nbsp; ${ann.show_time?formatTime(ann.show_time):""}
        </div>
        <div style="margin:9px 0 18px 0;white-space:pre-line;">${richText(ann.content||'')}</div>
        ${ann.link_url ? `<div><a href="${ann.link_url}" target="_blank" style="color:#3fa8ff;text-decoration:underline;">รายละเอียดเพิ่มเติม</a></div>` : ''}
        <div style="text-align:right;margin-top:1.1em;">
          <button class="secondary-btn" onclick="closePopup();openAnnouncementPopup();">กลับ</button>
        </div>
    `;
    window.openPopup('announceDetail', html, 'large', ann.title ? `${badge}${ann.title}` : "รายละเอียดประกาศ");
    setMenuNoti('btnAnnouncement', hasUnreadAnnouncement());
};

/** ช่วยเหลือ Group UI */
function typeTitle(type) {
    return {
        'patch': 'Patch Note',
        'event': 'กิจกรรม',
        'reward': 'ของรางวัล',
        'shop': 'ร้านค้า/โปรโมชั่น',
        'system': 'แจ้งระบบ',
        'general': 'ทั่วไป',
        'inbox': 'ข้อความเฉพาะ',
    }[type] || type;
}
function stripTags(html) { return html.replace(/(<([^>]+)>)/gi, ""); }
function truncate(str, len) { return str.length <= len ? str : str.substring(0, len - 2) + "..."; }
function formatTime(ts) { if(!ts) return ""; let d = new Date(ts); return `${d.getDate()}/${d.getMonth()+1}/${d.getFullYear()}`; }
function escapeHTML(str) { return str.replace(/[<>&"]/g, c => ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c])); }
function richText(str) {
    // Line breaks, emoji, bold
    return escapeHTML(str).replace(/\n/g, '<br>').replace(/\*(.*?)\*/g, '<b>$1</b>');
}
/** ตรวจว่าประกาศนี้ควรแสดง? (เวลาปัจจุบัน & flag) */
function isAnnouncementAvailable(a) {
    const now = Date.now();
    if ((a.start_time && now < a.start_time) || (a.end_time && now > a.end_time)) return false;
    return a.enabled !== false;
}
/** มีประกาศใหม่ unread */
function hasUnreadAnnouncement() {
    let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
    return announcementList.some(a => isAnnouncementAvailable(a) && !readIds.includes(a.id));
}
/** tab switch */
window.changeAnnouncementTab = function (type) {
    // Reload announcement popup & filter
    let list = announcementList.filter(a => isAnnouncementAvailable(a) 
        && (type === 'all' || a.type === type));
    let htmlPin = list.filter(a=>a.pin).map(renderAnnounceCard).join('');
    let htmlList = list.filter(a=>!a.pin).map(renderAnnounceCard).join('');
    document.getElementById('announceMainList').innerHTML = htmlPin + htmlList;
};

// Auto bind main menu
document.addEventListener('DOMContentLoaded', ()=> {
    let btn = document.getElementById('btnAnnouncement');
    if (btn) btn.onclick = openAnnouncementPopup;
    if (hasUnreadAnnouncement()) setMenuNoti('btnAnnouncement', true);
});

/* สำหรับระบบ admin: เพิ่ม/ลบ/แก้ไข realtime ในไฟล์นี้ หรือทาง admin.js */

// สำหรับระบบอื่น (optional)
window.announcementEngine = {
    open: openAnnouncementPopup,
    getAll: () => announcementList,
    reload: async ()=>{ announcementList = []; await loadAnnouncements(); }
};

เพิ่มไฟล์ data/announcement.json
{
  "announcements": [
    {
      "id": "patch_20240601",
      "type": "patch",
      "title": "อัปเดตระบบต่อสู้เวอร์ชัน 1.0",
      "content": "*เพิ่มระบบ auto battle* โหมดใหม่: SPD BAR\nAnimation Slide การ์ดโจมตีแบบ Yu-Gi-Oh!\n\n- เพิ่มรับ EXP\n- เพิ่มระบบสุ่มกาชาและร้านค้า",
      "start_time": 1717200000000,
      "end_time": null,
      "show_time": 1717239842000,
      "pin": true,
      "force_popup": true,
      "enabled": true
    },
    {
      "id": "reward_june2024",
      "type": "reward",
      "title": "แจกไอเท็มฟรีประจำเดือนมิถุนายน",
      "content": "ล็อกอินวันนี้รับของขวัญเพชร 500\nและ EXP Potion x2 ฟรีไปเลย!\n\n*ระยะเวลา 1-7 มิ.ย. 2024*",
      "start_time": 1717214400000,
      "end_time": 1717791999000,
      "show_time": 1717214500000,
      "pin": false,
      "enabled": true
    },
    {
      "id": "event_runeweek",
      "type": "event",
      "title": "กิจกรรม Rune Week",
      "content": "เข้าสู่ระบบทุกวัน รับ Rune Shard x2\nและสุ่มกาชาได้เพิ่ม 1 ครั้งทุกวัน!",
      "start_time": 1717300800000,
      "end_time": 1717895999000,
      "show_time": 1717387200000,
      "pin": false,
      "enabled": true
    },
    {
      "id": "shop_promotion",
      "type": "shop",
      "title": "โปรโมชั่นร้านค้าเดือนมิถุนายน",
      "content": "ไอเท็มลดราคาสูงสุด 30% ที่ร้านค้าหลัก\n*เฉพาะ 1-5 มิ.ย. 2024*",
      "start_time": 1717214400000,
      "end_time": 1717559999000,
      "show_time": 1717214600000,
      "pin": false,
      "link_url": "",
      "enabled": true
    },
    {
      "id": "system_maintenance",
      "type": "system",
      "title": "แจ้งเวลาปิดปรับปรุงเซิร์ฟเวอร์",
      "content": "ระบบจะปิดปรับปรุงในวันที่ 4 มิ.ย. 2024 เวลา 00:00-03:00 น.\n*กรุณา logout ให้เรียบร้อยก่อนเวลานี้*",
      "start_time": 1717430400000,
      "end_time": 1717441200000,
      "show_time": 1717430500000,
      "pin": false,
      "enabled": true
    }
  ]
}

เพิ่มไฟล์ data/redeem.json
{
  "codes": [
    {
      "id": "WELCOME2024",           // ชื่อโค้ด
      "reward": [                    // รางวัลรับได้
        { "type": "item", "id": "diamond", "qty": 500 },
        { "type": "item", "id": "exp_potion", "qty": 2 }
      ],
      "desc": "รับฟรีเพชร 500 + EXP Potion x2 (สำหรับผู้เล่นใหม่)",
      "start_time": 1717200000000,  // 1 มิ.ย. 2024
      "end_time": 1767167999000,    // 31 ธ.ค. 2025
      "max_usage": 10000,           // ใช้ได้รวมไม่เกิน 10,000 ครั้ง
      "used_count": 0,              // มีคนใช้ไปกี่ครั้ง (อัปเดตเฉพาะฝั่ง admin หรือ backend)
      "per_user": 1,                // 1 ไอดีใช้ได้กี่ครั้ง (ส่วนนี้ฝั่ง user ตรวจสอบ)
      "enabled": true
    },
    {
      "id": "JUNE_EVENT01",
      "reward": [
        { "type": "item", "id": "rune_shard", "qty": 6 }
      ],
      "desc": "กิจกรรม Rune June รับ Rune Shard x6",
      "start_time": 1717214400000,  // 1 มิ.ย. 2024, 06:00
      "end_time": 1717791999000,    // 7 มิ.ย. 2024, 23:59
      "max_usage": 500,
      "used_count": 49,
      "per_user": 1,
      "enabled": true
    },
    {
      "id": "INDIV_CODE_DEMO_123X",
      "reward": [
        { "type": "character", "id": "astra", "qty": 1 }
      ],
      "desc": "แจก Astra 5★ สำหรับกิจกรรม DEVS",
      "start_time": 1717200000000,
      "end_time": 1720000000000,
      "max_usage": 1,
      "used_count": 0,
      "per_user": 1,
      "enabled": true
    }
  ]
}

เพิ่มไฟล์ js/redeem.js
// js/redeem.js

let redeemCodeList = [];
let userUsedRedeem = []; // [{ code_id: 'WELCOME2024', redeemed_time: ... }], load/บันทึกใน localStorage

async function loadRedeemCodeList() {
  if (redeemCodeList.length) return;
  try {
    redeemCodeList = (await fetch('data/redeem.json').then(r => r.json()))?.codes || [];
  } catch { redeemCodeList = []; }
  loadUserRedeemUsed();
}
function loadUserRedeemUsed() {
  userUsedRedeem = JSON.parse(localStorage.getItem('user_used_redeem') || '[]');
}
function saveUserRedeemUsed() {
  localStorage.setItem('user_used_redeem', JSON.stringify(userUsedRedeem));
}

// เปิด Pop-up "กรอกโค้ดรับรางวัล"
window.openRedeemPopup = function () {
  const html = `
    <div style="text-align:center;">
      <div style="font-size:1.16em;font-weight:600;margin-bottom:.88em;">🎁 กรอกโค้ดรับของรางวัล</div>
      <input id="redeemInputBox" placeholder="ใส่โค้ด (A-Z, 0-9)" style="width: 90%;" maxlength="32"/>
      <div style="margin:1.3em 0;"><button class="primary-btn" onclick="checkRedeemCode()">ยืนยันรับรางวัล</button></div>
      <div id="redeemResultHint" style="color:#ffc29a;font-size:.94em;margin-top:1em;"></div>
      <div style="color:#aee;margin-top:1.7em;font-size:.89em;">
        *โค้ด 1 คนใช้ได้ 1 ครั้ง, มีวันหมดอายุ, เฉพาะโค้ดที่ยังเปิดใช้งาน
      </div>
      <button class="secondary-btn" style="margin-top:2.2em;" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('redeem', html, 'small', 'กรอกโค้ด');
  setTimeout(() => document.getElementById('redeemInputBox')?.focus(), 100);
};

// ยืนยันโค้ด
window.checkRedeemCode = async function () {
  await loadRedeemCodeList();
  const box = document.getElementById('redeemInputBox');
  if (!box) return;
  let code = box.value.trim().toUpperCase();
  let hintEl = document.getElementById('redeemResultHint');
  hintEl.innerText = "";
  if (!code.match(/^[A-Z0-9\-_]+$/)) return hintEl.innerText = "กรุณากรอกโค้ดที่ถูกต้อง (A-Z, 0-9)";
  let redeem = redeemCodeList.find(c => c.id === code && c.enabled !== false);
  const now = Date.now();
  if (!redeem)
    return hintEl.innerText = "❌ ไม่พบโค้ดนี้ หรือโค้ดถูกปิด/หมดอายุแล้ว";
  if (redeem.start_time && now < redeem.start_time)
    return hintEl.innerText = "❌ โค้ดยังไม่เปิดให้ใช้";
  if (redeem.end_time && now > redeem.end_time)
    return hintEl.innerText = "❌ โค้ดนี้หมดอายุแล้ว";
  if (redeem.max_usage && redeem.used_count >= redeem.max_usage)
    return hintEl.innerText = "❌ โค้ดนี้ถูกใช้เต็มจำนวนแล้ว";

  // per user
  loadUserRedeemUsed();
  if (userUsedRedeem.some(u => u.code_id === code)) {
    return hintEl.innerText = "❌ คุณใช้โค้ดนี้ไปแล้ว 1 ครั้ง";
  }

  // ตรวจไอดีผู้เล่น (ควรล็อกอินก่อน, แต่ถ้ายังไม่มี auth, ก็แค่จำลองไปก่อน)
  let curUserId = localStorage.getItem('user_id') || 'guest';
  // (ส่วนนี้จะเชื่อมต่อกับระบบ auth.js ภายหลัง)

  // แจกของ (เพิ่มเข้า inventory/character)
  const rewardHtml = [];
  if (redeem.reward && Array.isArray(redeem.reward)) {
    for (let r of redeem.reward) {
      if (r.type === 'item') {
        window.addToInventory?.(r.id, r.qty || 1);
        rewardHtml.push(`<div>🎁 ได้รับ <b>${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</b></div>`);
      } else if (r.type === 'character') {
        window.collectCharacter?.(r.id);
        rewardHtml.push(`<div>🎴 ได้รับตัวละคร <b style="color:#84bcff;">${r.id}</b></div>`);
      }
    }
  }

  // เซฟ userUsedRedeem
  userUsedRedeem.push({ code_id: code, time: now, user: curUserId });
  saveUserRedeemUsed();

  // (เพิ่ม used_count จะเกิดขึ้นฝั่ง admin/หลังบ้านจริงเท่านั้น)
  // แสดง popup ผลลัพธ์
  window.openPopup('redeemSuccess', `
    <div style="text-align:center;">
      <div style="font-size:1.15em;font-weight:700;color:#56f7ca;margin-bottom:9px;">รับรางวัลสำเร็จ!</div>
      ${rewardHtml.join('')}
      <button class="primary-btn" style="margin-top:1.2em;" onclick="closePopup();">โอเค</button>
    </div>
  `, 'small', 'ได้รับของรางวัล');
};

// Auto bind ปุ่มเมนู (ID: btnRedeem หรือจะใส่เอง)
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnRedeem');
  if (btn) btn.onclick = window.openRedeemPopup;
});

// Expose export
window.redeemEngine = {
  open: window.openRedeemPopup,
  check: window.checkRedeemCode,
  reload: async () => { redeemCodeList = []; await loadRedeemCodeList(); }
};

เพิ่มไฟล์ js/auth.js
// js/auth.js - Epic Seven Card Battle - Auth/Login System (Frontend only)
// Author: (yourname)
// รองรับ admin, player, check session, call API user info

let loginState = {
    loggedIn: false,
    isAdmin: false,
    user: null
};
let users = [];

async function loadUserList() {
    if (users.length) return;
    users = await fetch('data/user.json').then(res => res.json());
}
function saveCurrentSession(user) {
    localStorage.setItem('user_id', user.id);
    localStorage.setItem('user_name', user.name);
    localStorage.setItem('user_is_admin', user.role === "admin" ? "1" : "0");
    loginState = { loggedIn: true, isAdmin: user.role === "admin", user };
}

function clearSession() {
    localStorage.removeItem('user_id');
    localStorage.removeItem('user_name');
    localStorage.removeItem('user_is_admin');
    loginState = { loggedIn: false, isAdmin: false, user: null };
}

// UI Login - Popup HTML
function renderLoginPopup() {
    return `
    <div class="popup small">
    <button class="close" onclick="closePopup()">×</button>
    <h2>เข้าสู่ระบบ</h2>
    <div id="loginErrorMsg" style="color:#f77;font-size:.9em;"></div>
    <input id="auth_user_id" placeholder="User ID..." autocomplete="username"/>
    <input id="auth_user_pw" type="password" placeholder="Password..." autocomplete="current-password" />
    <button class="primary-btn" style="margin-top:1.1em;" onclick="doLoginNow()">ล็อกอิน</button>
    <button class="secondary-btn" onclick="closePopup()" style="margin:1em 0 0 0;">ยกเลิก</button>
    </div>
    `;
}

// ตรวจ session (โหลดครั้งแรก)
function checkSession() {
    let userId = localStorage.getItem('user_id');
    let userName = localStorage.getItem('user_name');
    let isAdmin = localStorage.getItem('user_is_admin') === "1";
    if (userId && userName) {
        loginState = { loggedIn: true, isAdmin, user: { id: userId, name: userName, role: isAdmin ? "admin" : "player" } };
    }
    setPlayerName(loginState.loggedIn ? loginState.user.name : "");
}

// ปุ่มล็อกอินบน index
document.addEventListener('DOMContentLoaded', () => {
    checkSession();
    let btn = document.getElementById('btnLogin');
    if (btn) btn.onclick = openLoginPopup;
    if (loginState.loggedIn) {
        btn.textContent = "ออกจากระบบ";
        btn.onclick = doLogout;
    }
    // อัปเดตชื่อผู้ใช้
    setPlayerName(loginState.loggedIn ? loginState.user.name : "");
});

// เปิด popup ล็อกอิน
window.openLoginPopup = async function () {
    await loadUserList();
    window.openPopup('login', renderLoginPopup(), 'small', 'เข้าสู่ระบบ');
    setTimeout(() => document.getElementById('auth_user_id')?.focus(), 180);
}
// ปุ่ม "เข้าสู่ระบบ" จริง
window.doLoginNow = async function () {
    await loadUserList();
    let id = document.getElementById('auth_user_id').value.trim();
    let pw = document.getElementById('auth_user_pw').value;
    let el = document.getElementById('loginErrorMsg');
    let user = users.find(u =>
        u.id === id && u.password === pw && u.enabled !== false
    );
    if (user) {
        saveCurrentSession(user);
        setPlayerName(user.name);
        closePopup();
        location.reload();
    } else {
        el.innerText = "รหัสผ่านหรือชื่อผู้ใช้ไม่ถูกต้อง!";
    }
}

// ปุ่ม logout
window.doLogout = function () {
    clearSession();
    location.reload();
}

// Helper สำหรับระบบ/JS อื่นดึง user ปัจจุบัน
window.getCurrentUser = function () {
    checkSession();
    return loginState.user || null;
}

window.isAdmin = function () {
    checkSession();
    return loginState.isAdmin;
}

window.isLoggedIn = function () {
    checkSession();
    return loginState.loggedIn;
}

เพิ่มไฟล์ data/user.json
[
  {
    "id": "admin",
    "name": "Admin",
    "password": "adminpass123",
    "role": "admin",
    "enabled": true
  },
  {
    "id": "player1",
    "name": "Achiraya",
    "password": "p1demo!!",
    "role": "player",
    "enabled": true
  },
  {
    "id": "player2",
    "name": "Somchai",
    "password": "playerdemo2",
    "role": "player",
    "enabled": true
  }
]

เพิ่มไฟล์ js/characterCollection.js
// js/characterCollection.js

/**
 * Epic Seven - Character Collection System (Frontend Only)
 * - Card grid, search, sort, filter, responsive, upgrade, show stat
 * - Data driven by: localStorage char_collection & data/char/*.json
 * - Connect: upgrade.js, rune.js, team.js, popupManager.js
 * (c) 2024
 **/

let charCollection = [];  // [{"id": ...}, ...] as owned
let charMeta = [];        // All meta (`data/char/*.json`)
let filters = { text: '', star: 0, element: 'all', class: 'all' };

// ------------ 1. Load user collection from localStorage ------------
function loadCharCollection() {
    let arr = JSON.parse(localStorage.getItem('char_collection') || "[]");
    charCollection = arr.filter((id, idx) => arr.indexOf(id) === idx); // unique
}

// ------------ 2. Load all owned char meta data ------------
async function loadCharMeta() {
    await loadCharCollection();
    // Only load characters in collection (faster)
    charMeta = await Promise.all(charCollection.map(async id => {
        try {
            let res = await fetch(`data/char/${id}.json`);
            return await res.json();
        } catch (e) { return null; }
    }));
    charMeta = charMeta.filter(c => !!c);
}

// ------------ 3. Render main UI grid ------------
function renderCharGrid() {
    let area = document.getElementById('characterArea');
    if (!area) return;
    // Filter/sort
    let cs = charMeta.slice();
    if (filters.star > 0) cs = cs.filter(c => (c.star || 0) === Number(filters.star));
    if (filters.element !== 'all') cs = cs.filter(c => (c.element || "") === filters.element);
    if (filters.class !== 'all') cs = cs.filter(c => (c.class || "") === filters.class);
    if (filters.text.length) cs = cs.filter(c => c.name.toLowerCase().includes(filters.text.toLowerCase()));
    cs.sort((a, b) => (b.star || 0) - (a.star || 0) || (a.name.localeCompare(b.name)));
    // Responsive grid: 6 col PC, 3 col mobile
    let isMobile = window.innerWidth < 650;
    let html = `<div style="display:grid;grid-template-columns:repeat(${isMobile ? 3 : 6},1fr);gap:16px;">` +
        (cs.length ? cs.map(c => charCardBox(c)).join('') : '<div style="color:#fff;">ไม่มีตัวละคร</div>') +
        `</div>`;
    area.innerHTML = `
        <div style="display:flex;gap:10px;margin-bottom:10px;">
            <input id="charSearchBox" placeholder="ค้นหาชื่อ..." style="flex:1;max-width:180px;" value="${filters.text || ''}"/>
            <select id="starFilter"><option value="0">★ ทั้งหมด</option><option value="3">★3</option><option value="4">★4</option><option value="5">★5</option></select>
            <select id="eleFilter"><option value="all">ทุกธาตุ</option><option value="fire">🔥 ไฟ</option><option value="water">💧 น้ำ</option><option value="earth">🌱 ดิน</option><option value="dark">🌑 มืด</option><option value="light">🌟 แสง</option></select>
            <select id="classFilter"><option value="all">ทุกคลาส</option><option value="knight">อัศวิน</option><option value="warrior">นักรบ</option><option value="mage">จอมเวทย์</option><option value="ranger">เรนเจอร์</option><option value="assassin">แอสซาซิน</option><option value="monster">มอนสเตอร์</option></select>
        </div>
        ${html}
    `;
    // Set filter values
    document.getElementById('starFilter').value = filters.star;
    document.getElementById('eleFilter').value = filters.element;
    document.getElementById('classFilter').value = filters.class;
    // Search events
    document.getElementById('charSearchBox').oninput = ev => { filters.text = ev.target.value.trim(); renderCharGrid(); };
    document.getElementById('starFilter').onchange = ev => { filters.star = ev.target.value; renderCharGrid(); };
    document.getElementById('eleFilter').onchange = ev => { filters.element = ev.target.value; renderCharGrid(); };
    document.getElementById('classFilter').onchange = ev => { filters.class = ev.target.value; renderCharGrid(); };
}

// ------------ 4. Card box HTML ------------
function charCardBox(c) {
    let lock = isCharLocked(c.id);
    return `
      <div class="card" data-chrid="${c.id}" style="position:relative;">
        <img src="img/char/${c.img}" class="hero-img" alt="${c.name}" />
        <div class="name">${c.name}</div>
        <div style="font-size:.93em;color:#d9d;line-height:1.2em;">Lv. ${c.level || '-'} ★${c.star || '-'}</div>
        <div style="font-size:.89em;color:#cff;">ธาตุ: ${elIcon(c.element)} | ${classIcon(c.class)}</div>
        <div style="margin:6px 0;">
          <button class="primary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="showCharDetailPopup('${c.id}')">รายละเอียด</button>
          <button class="secondary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
          <button class="primary-btn" style="padding:3px 1em;font-size:.93em;" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
        </div>
        <button style="position:absolute;top:7px;right:14px;opacity:.8;background:none;border:0;color:#fa8;font-size:1.5em;outline:none;z-index:7"
            onclick="toggleCharLock('${c.id}');event.stopPropagation()" title="${lock ? 'ปลดล็อก' : 'ล็อก'}">
            ${lock ? '🔒' : '🔓'}
        </button>
      </div>`;
}
// ธาตุ
function elIcon(el) {
    return { fire: '🔥', water: '💧', earth: '🌱', dark: '🌑', light: '🌟' }[el] || '❔';
}
function classIcon(cls) {
    return { knight: '🛡️', warrior: '⚔️', mage: '🦉', ranger: '🏹', assassin: '🗡️', monster: '👾' }[cls] || '👽';
}

// ------------ 5. Lock/Unlock ------------
function isCharLocked(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    return ll.includes(chid);
}
function toggleCharLock(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    let idx = ll.indexOf(chid);
    if (idx >= 0) ll.splice(idx, 1); else ll.push(chid);
    localStorage.setItem('char_lock', JSON.stringify(ll));
    renderCharGrid();
}

// ------------ 6. Popup: Char Detail ------------
window.showCharDetailPopup = async function (charId) {
    let c = charMeta.find(c => c.id === charId);
    if (!c) return;
    let html = `
        <div style="display:flex;flex-direction:column;align-items:center;gap:7px;">
            <img src="img/char/${c.img}" class="hero-img" style="width:82px;margin:0 auto 9px auto;" />
            <div style="font-size:1.22em;font-weight:600">${c.name}</div>
            <div style="color:#b6deff;">Lv.${c.level || '-'} / ★${c.star||'-'} | ${elIcon(c.element)} ${classIcon(c.class)}</div>
            <hr style="width:86%;border:1px solid #234;" />
            <div>HP <b>${c.hp}</b> | ATK <b>${c.atk}</b> | DEF <b>${c.def}</b> | SPD <b>${c.spd}</b></div>
            <div>CRIT <b>${c.crit_rate}%</b> | CRIT DMG <b>${c.crit_dmg}%</b> | EFF <b>${c.effectiveness}%</b></div>
            <div>Skills: <ul>${(c.skills || []).map(s => `<li><b>${s.name}</b>: ${s.desc || ''}</li>`).join('')}</ul></div>
            <div style="margin-top:7px;">
                <button class="primary-btn" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
                <button class="primary-btn" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
                <button class="secondary-btn" onclick="closePopup()" style="margin-left:11px;">ปิด</button>
            </div>
        </div>`;
    window.openPopup('charDetail', html, 'large', c.name);
}

// ------------ 7. INIT [DOM Ready, bind menu] ------------
document.addEventListener('DOMContentLoaded', async () => {
    let btn = document.getElementById('btnCharacter');
    if (btn) btn.onclick = async () => {
        await loadCharMeta();
        renderCharGrid();
        window.openPopup('characterCollection', `<div id="characterArea"></div>`, 'large', 'คลังตัวละคร');
        renderCharGrid();
    };
});

เพิ่มไฟล์ js/passive.js
// js/passive.js
//
// Epic Seven Auto Battle - Passive Engine
// รองรับ Passive ทุกรูปแบบ (Triggered / Aura / Always) Modular based
// (c) 2024

let passiveList = []; // loaded from passive.json

// Async โหลด passive config จาก passive.json
async function loadPassiveList() {
    if (passiveList.length) return;
    try {
        passiveList = await fetch('data/passive.json').then(r => r.json());
    } catch { passiveList = []; }
}

// ------------ Logic: Apply Passive ------------
/**
 * เพิ่ม passive effect ให้ตัวละคร ณ ตอน start battle
 * @param {Object} char ตัวละคร (obj)
 * @param {Array | string} passiveIds - ชื่อ passive (หรือหลายอัน)
 */
async function applyPassive(char, passiveIds) {
    await loadPassiveList();
    if (!passiveIds) return;
    let allIds = Array.isArray(passiveIds) ? passiveIds : [passiveIds];
    allIds.forEach(pid => {
        let pas = passiveList.find(p => p.id === pid);
        if (!pas) return;
        // aura (เพิ่ม stat/บัฟ)
        if (pas.type === "aura" && pas.effect) {
            Object.keys(pas.effect).forEach(stat => {
                char[stat] = (char[stat] || 0) + pas.effect[stat];
            });
            // optional: แจ้งเตือน/ไอคอน passive aura
            char._passiveNotes = char._passiveNotes || [];
            char._passiveNotes.push({ txt: pas.name, icon: pas.icon });
        }
        // always (flag/trace)
        if (pas.type === "always" && pas.effect) {
            char._passiveAlways = Object.assign({}, char._passiveAlways || {}, pas.effect);
        }
        // trigger passive รอ hook battle
        if (pas.type === "trigger") {
            char._passiveTrigger = char._passiveTrigger || [];
            char._passiveTrigger.push(pas);
        }
    });
}

/**
 * เรียกเมื่อเกิด event ระหว่าง battle เงื่อนไข trigger
 * เช่น "onHit", "onDamaged", "onDeath", "onAllyDeath"
 * @param {Object} char - target (obj)
 * @param {string} event - event name (เช่น onHit, onDamaged)
 * @param {Object} payload - option เพิ่มเติม
 */
function doPassiveEvent(char, event, payload = {}) {
    if (!char || !char._passiveTrigger) return;
    char._passiveTrigger.forEach(pas => {
        if (pas.event === event && Math.random() * 100 < (pas.chance || 100)) {
            // trigger buff/debuff/self effect
            if (pas.effect) {
                Object.keys(pas.effect).forEach(k => {
                    // เพิ่ม HP/ATK/DEF instant
                    if (["hp", "atk", "def", "spd"].includes(k)) {
                        char[k] += pas.effect[k];
                        popupPassive(char, pas, "+" + k.toUpperCase() + " " + pas.effect[k]);
                    }
                    // heal
                    if (k === "heal") {
                        let heal = Math.floor(char.hp * pas.effect[k]);
                        char.currHp = Math.min(char.hp, char.currHp + heal);
                        popupPassive(char, pas, "+HP " + heal);
                    }
                    // buff/debuff
                    if (k === "buff" && window.effectEngine)
                        window.effectEngine.addEffect(char, Array.isArray(pas.effect[k]) ? pas.effect[k] : [pas.effect[k]], "buff");
                    if (k === "debuff" && window.effectEngine)
                        window.effectEngine.addEffect(char, Array.isArray(pas.effect[k]) ? pas.effect[k] : [pas.effect[k]], "debuff");
                });
            }
            if (pas.showText) popupPassive(char, pas, pas.showText);
        }
    });
}

// ฝัง hook ใน battle.js, effect.js หรือ animation/callbacks
window.passiveEngine = {
    load: loadPassiveList,
    apply: applyPassive,
    doEvent: doPassiveEvent
};

/**
 * Show popup note passive บนการ์ด
 */
function popupPassive(char, pas, txt) {
    let c = document.getElementById(`${char.side || 'hero'}${char.index || 0}`);
    if (!c) return;
    let pop = document.createElement('span');
    pop.className = "damage-popup";
    pop.style.color = pas.color || '#22ffd8';
    pop.innerHTML = pas.icon ? pas.icon + ' ' : '';
    pop.innerHTML += '<b>PASSIVE</b>: ' + (txt || pas.name);
    c.appendChild(pop);
    setTimeout(() => pop.remove(), 1100);
}

// ตัวอย่างการใช้งาน
// ใน battle.js, หลังจากโหลด character แล้ว:
// await passiveEngine.apply(char, char.passive);
// doPassiveEvent(char, 'onDamaged', { ... });

เพิ่มไฟล์ data/passive.json
[
  {
    "id": "counter_attack",
    "name": "Counter Strike",
    "icon": "↩️",
    "desc": "มีโอกาส 25% โต้กลับเมื่อถูกโจมตี",
    "type": "trigger",
    "event": "onDamaged",
    "chance": 25,
    "effect": {"buff":[{"type":"counter_ready","turn":1}]},
    "showText": "โต้กลับ!"
  },
  {
    "id": "team_aura_def",
    "name": "Commander Aura",
    "icon": "🛡️",
    "desc": "ทีมได้รับ DEF+12 ตลอดเวลาขณะต่อสู้",
    "type": "aura",
    "effect": { "def": 12 }
  },
  {
    "id": "self_heal",
    "name": "Regeneration",
    "icon": "💚",
    "desc": "ฟื้นฟู HP 10% ของ Max HP เมื่อจบเทิร์นตัวเอง",
    "type": "trigger",
    "event": "onEndTurn",
    "chance": 100,
    "effect": { "heal": 0.10 },
    "showText": "Regenerate"
  },
  {
    "id": "immunity_permanent",
    "name": "Immunity Master",
    "icon": "🔒",
    "desc": "ไม่ติด debuff เลย",
    "type": "always",
    "effect": { "immune_all": true }
  },
  {
    "id": "relentless_aura_spd",
    "name": "Relentless Aura",
    "icon": "💨",
    "desc": "ทีมได้รับ SPD+8",
    "type": "aura",
    "effect": { "spd": 8 }
  },
  {
    "id": "burn_on_hit",
    "name": "Inferno Retaliate",
    "icon": "🔥",
    "desc": "มีโอกาส 30% ติด burn ศัตรูที่ตีตัวนี้",
    "type": "trigger",
    "event": "onDamaged",
    "chance": 30,
    "effect": { "debuff": [{"type":"burn", "turn":2}] },
    "showText": "Burned!"
  }
]

เพิ่มไฟล์ admin.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <title>Admin Panel - Epic Seven Card Auto Battle</title>
  <link rel="stylesheet" href="css/style.css" />
</head>
<body class="dark-bg">
<header>
  <nav class="navbar">
    <div class="logo">ADMIN - Epic Seven Card Battle</div>
    <ul class="menu">
      <li><button onclick="window.location.href='index.html'">กลับหน้าหลักเกม</button></li>
      <li><button id="btnUserMgr">บัญชีผู้เล่น</button></li>
      <li><button id="btnCharMgr">ตัวละคร/Skills</button></li>
      <li><button id="btnItemMgr">ไอเท็ม</button></li>
      <li><button id="btnRuneMgr">รูน</button></li>
      <li><button id="btnQuestMgr">เควสต์</button></li>
      <li><button id="btnGachaMgr">กาชา</button></li>
      <li><button id="btnStageMgr">ดันเจี้ยน</button></li>
      <li><button id="btnShopMgr">ร้านค้า</button></li>
      <li><button id="btnAnnounceMgr">ประกาศ</button></li>
      <li><button id="btnRedeemMgr">โค้ด</button></li>
      <li><button id="btnChatMod">แชท</button></li>
    </ul>
    <div class="profile">
      <span id="adminName"></span>
      <button id="btnLogout">ออกจากระบบ</button>
    </div>
  </nav>
</header>

<main style="max-width: 1120px;margin: 1.5em auto;background:#262a38bb;border-radius:18px;box-shadow:0 2px 26px #0b0a10a6;padding:26px 24px;min-height:440px;">
  <div id="adminMainArea"></div>
</main>

<div id="popupLayer"></div>
<footer>
  <small style="color: #aaa;">&copy; 2024 - Admin Panel (For Epic Seven Fan Project)</small>
</footer>

<script src="js/utils.js"></script>
<script src="js/ui.js"></script>
<script src="js/admin.js"></script>
</body>
</html>

เพิ่มไฟล์ js/admin.js
// js/admin.js (ฉบับเต็มสำหรับ admin panel)

/* ==== 1) LOGIN ADMIN GUARD ==== */
document.addEventListener('DOMContentLoaded', () => {
  // Check admin session
  const isAdmin = localStorage.getItem("user_is_admin") === "1";
  const adminName = localStorage.getItem("user_name");

  if (!isAdmin) {
    alert("ต้องเป็นผู้ดูแลระบบเท่านั้น");
    window.location.href = "index.html";
    return;
  }
  document.getElementById('adminName').innerText = `👤 ${adminName}`;
  document.getElementById("btnLogout").onclick = function () {
    localStorage.removeItem("user_id");
    localStorage.removeItem("user_name");
    localStorage.removeItem("user_is_admin");
    window.location.href = "index.html";
  };

  // Menu event mapping
  {
    let mapping = {
      btnUserMgr:   renderUserMgr,
      btnCharMgr:   renderCharMgr,
      btnItemMgr:   renderItemMgr,
      btnRuneMgr:   renderRuneMgr,
      btnQuestMgr:  renderQuestMgr,
      btnGachaMgr:  renderGachaMgr,
      btnStageMgr:  renderStageMgr,
      btnShopMgr:   renderShopMgr,
      btnAnnounceMgr: renderAnnounceMgr,
      btnRedeemMgr: renderRedeemMgr,
      btnChatMod:   renderChatMgr
    };
    Object.entries(mapping).forEach(([btn, fn])=>{
      let el = document.getElementById(btn);
      if (el) el.onclick = fn;
    });
  }

  // Default: open user mgr
  renderUserMgr();
});

// Helper: set main admin area content
function setAdminMain(html) {
  document.getElementById("adminMainArea").innerHTML = html;
}

/* ==== 2) USER MANAGEMENT ==== */
async function renderUserMgr() {
  let res = await fetch('data/user.json').then(r=>r.json());
  let html = `<h2>จัดการผู้ใช้</h2>
    <table style="width:100%;background:#223247;border-radius:12px;">
      <tr style="color:#bfa;font-size:1.13em;"><th>ID</th><th>ชื่อ</th><th>Role</th><th>สถานะ</th><th>ควบคุม</th></tr>
      ${res.map(u=>
        `<tr>
          <td>${u.id}</td>
          <td>${u.name}</td>
          <td>${u.role}</td>
          <td><span style="color:${u.enabled?'#7fe':'#fad'};">${u.enabled?'✔️ ใช้งาน':'❌ ถูกปิด'}</span></td>
          <td>
            <button onclick="editUserPopup('${u.id}')" class="primary-btn" style="font-size:.95em;">แก้ไข</button>
            <button onclick="banUser('${u.id}')" class="secondary-btn" style="font-size:.93em;">แบนผู้ใช้</button>
          </td>
        </tr>`).join('')}
    </table>
    <div style="margin:16px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addUserPopup()">+ เพิ่มผู้ใช้</button>
    </div>`;
  setAdminMain(html);
}
window.renderUserMgr = renderUserMgr;

window.editUserPopup = function (uid) {
  alert("ฟอร์มแก้ไขผู้ใช้อยู่ระหว่างพัฒนา");
}
window.addUserPopup = function () {
  alert("ฟอร์มเพิ่มผู้ใช้ใหม่อยู่ระหว่างพัฒนา");
}
window.banUser = function (uid) {
  alert(`ระบบแบนผู้ใช้ "${uid}" อยู่ระหว่างพัฒนา (ในเวอร์ชัน local ต้องแก้ใน data/user.json โดยตรงหรือเชื่อมต่อ backend)`);
};

/* ==== 3) CHAR MANAGEMENT ==== */
async function renderCharMgr() {
  let charIds = ['astra','slime_basic'];
  let all = await Promise.all(charIds.map(id=>fetch(`data/char/${id}.json`).then(r=>r.json())));
  let html = `<h2>จัดการตัวละคร (meta-json)</h2>
    <table style="width:100%;background:#2a3247;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>★</th><th>ธาตุ</th><th>class</th><th>สกิล</th><th>แก้ไข</th></tr>
      ${all.map(c=>`
        <tr>
         <td><img src="img/char/${c.img}" style="width:36px;border-radius:9px;" /></td>
         <td>${c.id}</td>
         <td>${c.name}</td>
         <td>${c.star}</td>
         <td>${c.element}</td>
         <td>${c.class}</td>
         <td>${(c.skills||[]).length}</td>
         <td><button onclick="editCharPopup('${c.id}')" class="primary-btn" style="font-size:.93em;">แก้ไข</button></td>
        </tr>`).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addCharPopup()">+ เพิ่มตัวละคร</button>
    </div>
    <div style="color:#aaa;padding:13px 0;">*การอัปเดตจะ Reflect เมื่อลงไฟล์ .json จริง (auto reload)</div>`;
  setAdminMain(html);
}
window.renderCharMgr = renderCharMgr;
window.editCharPopup = function (cid) { window.openPopup('editChar',`<div>ยังไม่รองรับ (โปรดแก้ json โดยตรง)</div>`,'small','แก้ไขตัวละคร'); }
window.addCharPopup = function () { window.openPopup('addChar',`<div>ยังไม่รองรับ (โปรดเขียน .json ใหม่ใน data/char/)</div>`,'small','เพิ่มตัวละคร'); }

/* ==== 4) ITEM MANAGEMENT ==== */
async function renderItemMgr() {
  let items = await fetch('data/item.json').then(r=>r.json());
  let html = `<h2>จัดการไอเท็ม</h2>
    <table style="width:100%;background:#273257;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>type</th><th>desc</th><th>ราคา</th></tr>
      ${items.map(it=>
        `<tr>
           <td><img src="img/item/${it.img||'noimg.png'}" style="width:32px" /></td>
           <td>${it.id}</td><td>${it.name}</td>
           <td>${it.type||'-'}</td><td>${it.description||'-'}</td>
           <td>${it.price}</td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="alert('เพิ่มไอเท็ม: โปรดเพิ่มที่ data/item.json')">+ เพิ่มไอเท็ม</button>
    </div>`;
  setAdminMain(html);
}
window.renderItemMgr = renderItemMgr;

/* ==== 5) RUNE ==== */
async function renderRuneMgr() {
  let runes = await fetch('data/rune.json').then(r=>r.json());
  let html = `<h2>จัดการรูน (rune.json)</h2>
    <table style="width:100%;background:#223549;border-radius:12px;">
      <tr><th>ICON</th><th>id</th><th>name</th><th>slot</th><th>main stat</th><th>set</th><th>sub</th></tr>
      ${runes.filter(r=>r.id).map(r=>
        `<tr>
         <td>${r.icon||'🔸'}</td>
         <td>${r.id}</td>
         <td>${r.name}</td>
         <td>${r.slot}</td>
         <td>${r.main_stat ? `${r.main_stat.type}+${r.main_stat.val}` : '-'}</td>
         <td>${r.set}</td>
         <td>${(r.sub_stats||[]).map(s=>`${s.type}+${s.val}`).join(', ')}</td>
        </tr>`).join('')}
    </table>
    <div style="text-align:right;margin-top:13px;">
      <button class="primary-btn" onclick="alert('เพิ่มรูน: โปรดเพิ่มใน data/rune.json')">+ เพิ่มรูน</button>
    </div>`;
  setAdminMain(html);
}
window.renderRuneMgr = renderRuneMgr;

/* ==== 6) QUEST (JSON) ==== */
async function renderQuestMgr() {
  setAdminMain(`<h2>จัดการเควสต์ (โปรดแก้ไขที่ data/quest/*.json)</h2>
    <div>เควสต์/ภารกิจสามารถเพิ่มหรือแก้ไขได้ทันทีที่ไฟล์แล้ว reload เกม</div>
    <div style="margin:16px 0;"><button class="primary-btn" onclick="alert('รอเพิ่มหน้าเควสต์')">ตัวอย่าง</button></div>`);
}

/* ==== 7) GACHA ==== */
async function renderGachaMgr() {
  let gacha = await fetch('data/gacha.json').then(r=>r.json());
  let html = `<h2>จัดการกาชา (gacha.json)</h2>
      <table style="width:100%;background:#243168;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>เปิดใช้งาน</th><th>type</th><th>cost</th><th>pool</th><th>ควบคุม</th></tr>
      ${gacha.gachas.map(g=>
        `<tr>
         <td>${g.id}</td>
         <td>${g.name}</td>
         <td>${g.enabled ? "✔" : "❌"}</td>
         <td>${g.type}</td>
         <td>${g.cost.amount} ${g.cost.item}</td>
         <td>${g.pool.map(p=>`${p.char_id}(★${p.rarity})`).join(', ')}</td>
         <td><button onclick="alert('edit gacha: โปรดแก้ไขที่ data/gacha.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:11px;text-align:right;">
        <button onclick="alert('เพิ่มกาชา: โปรดแก้ไข data/gacha.json')" class="primary-btn">+ เพิ่มกาชา</button>
      </div>`;
  setAdminMain(html);
}
window.renderGachaMgr = renderGachaMgr;

/* ==== 8) STAGE/DUNGEON ==== */
async function renderStageMgr() {
  setAdminMain(`<h2>จัดการ Stage/Dungeon</h2>
  <div>แผนที่, Zone, Stage ทั้งหมด config ใน data/stage/*.json</div>`);
}

/* ==== 9) SHOP ==== */
async function renderShopMgr() {
  let shop = await fetch('data/shop.json').then(r=>r.json());
  let html = `<h2>จัดการร้านค้า</h2>
      <table style="width:100%;background:#223249;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>type</th><th>สถานะ</th><th>สินค้า</th></tr>
      ${shop.shops.map(s=>
        `<tr>
         <td>${s.id}</td>
         <td>${s.name}</td>
         <td>${s.type}</td>
         <td>${s.enabled ? "✔" : "❌"}</td>
         <td>${(s.items||[]).length} รายการ</td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:10px;text-align:right;">
        <button onclick="alert('update shop: โปรดแก้ไขที่ data/shop.json')" class="primary-btn">+ เพิ่มร้านค้า/สินค้า</button>
      </div>`;
  setAdminMain(html);
}
window.renderShopMgr = renderShopMgr;

/* ==== 10) ANNOUNCEMENT ==== */
async function renderAnnounceMgr() {
  let ann = await fetch('data/announcement.json').then(r=>r.json());
  let html = `<h2>จัดการประกาศ</h2>
    <table style="width:100%;background:#142449;border-radius:10px;">
    <tr><th>id</th><th>title</th><th>pin</th><th>type</th><th>เวลา</th><th>แก้ไข</th></tr>
    ${ann.announcements.map(a=>
      `<tr>
        <td>${a.id}</td><td>${a.title}</td>
        <td>${a.pin?'✔':'❌'}</td>
        <td>${a.type}</td>
        <td>${a.show_time ? new Date(a.show_time).toLocaleString() : '-'}</td>
        <td><button onclick="alert('Announce: โปรดแก้ไขที่ data/announcement.json')" class="primary-btn" style="font-size:.96em;">แก้ไข</button></td>
      </tr>`
    ).join('')}
    </table>
    <div style="margin-top:10px;text-align:right">
     <button class="primary-btn" onclick="alert('เพิ่ม/ลบประกาศ: โปรดแก้ที่ announcement.json')">+ เพิ่มประกาศ</button>
    </div>
    <div style="color:#ead;padding:13px;">*ประกาศใหม่/ลบ ต้อง reload ไฟล์ announcement.json แล้วรีเฟรชเกม</div>`;
  setAdminMain(html);
}
window.renderAnnounceMgr = renderAnnounceMgr;

/* ==== 11) REDEEM CODE ==== */
async function renderRedeemMgr() {
  let rc = await fetch('data/redeem.json').then(r=>r.json());
  let html = `<h2>จัดการโค้ด (redeem)</h2>
    <table style="width:100%;background:#212d41;border-radius:12px;">
      <tr><th>id</th><th>desc</th><th>active</th><th>จำนวนที่ใช้</th><th>แก้ไข</th></tr>
      ${rc.codes.map(c=>
        `<tr>
         <td>${c.id}</td>
         <td>${c.desc}</td>
         <td>${c.enabled?'✔':'❌'}</td>
         <td>${c.used_count||0}/${c.max_usage||'-'}</td>
         <td><button onclick="alert('แก้ไขโค้ด: โปรดแก้ไขใน data/redeem.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin-top:11px;text-align:right;">
      <button onclick="alert('เพิ่มโค้ด: โปรดแก้ไข data/redeem.json โดยตรง')" class="primary-btn">+ เพิ่มโค้ด</button>
    </div>`;
  setAdminMain(html);
}
window.renderRedeemMgr = renderRedeemMgr;

/* ==== 12) CHAT MOD/PANEL ==== */
async function renderChatMgr() {
  // Load chat log, banned words
  let chat = [];
  try { chat = await fetch('data/chat.json').then(r=>r.json()); } catch { chat = []; }
  let banned = [];
  try { banned = await fetch('data/banned_words.json').then(r=>r.json()); } catch {banned = [];}
  let html = `<h2>ควบคุมแชท/ข้อความ</h2>
    <h3>บันทึกข้อความล่าสุด (${chat.length})</h3>
    <div style="max-height:210px;overflow-y:auto;">
      <table style="width:100%;background:#23236c;border-radius:11px;">
        <tr><th style="width:120px;">เวลา</th><th style="width:180px;">ผู้ใช้</th><th>ข้อความ</th><th>ควบคุม</th></tr>
        ${chat.slice(-50).reverse().map(c=>
          `<tr>
            <td>${c.time ? (new Date(c.time)).toLocaleTimeString() : '-'}</td>
            <td>${c.user}</td>
            <td>${escapeHTML(c.text)}</td>
            <td>
              <button class="secondary-btn" style="padding:.2em 1.2em;" onclick="alert('ลบข้อความนี้: แก้ chat.json')">ลบ</button>
            </td>
          </tr>`
        ).join('')}
      </table>
    </div>
    <h3>คำต้องห้าม (${banned.length})</h3>
    <div>
      <ul>
      ${banned.map(word=>`<li>${escapeHTML(word)} <button class="secondary-btn" onclick="alert('ลบคำต้องห้าม: โปรดแก้ banned_words.json โดยตรง')">ลบ</button></li>`).join('')}
      </ul>
      <button class="primary-btn" onclick="alert('เพิ่มคำต้องห้าม: โปรดเพิ่มใน banned_words.json')">+ เพิ่มคำต้องห้าม</button>
    </div>
    <div style="color:#98ffe7;margin:11px 0 0 0;">* ต้องอัปเดตไฟล์ JSON และรีเฟรชจึงจะมีผล</div>`;
  setAdminMain(html);
}
window.renderChatMgr = renderChatMgr;

// Utility for safe display in table
function escapeHTML(str) {
  return (str || "").replace(/[<>&"]/g, c=>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c]));
}

เพิ่มไฟล์ js/chat.js
// js/chat.js

/*
  Epic Seven Card Auto Battle - Chat System
  - GM / Global / System / Player Chat
  - เก็บ chat.json + banned_words.json
  - Responsive, security filter, limited send rate
  - ใช้กับ popup UI
  (C) 2024
*/

let chatList = [];     // [{user, text, time}, ...]
let bannedWords = [];  // ["badword1", ...]
let chatLastTime = 0;
const CHAT_LOG_MAX = 50;

// โหลด chat log (localStorage/data)
async function loadChat() {
  if (!chatList.length) {
    try {
      let arr = JSON.parse(localStorage.getItem('chat_log') || "[]");
      chatList = arr;
    } catch { chatList = []; }
  }
}
function saveChat() {
  let arr = chatList.slice(-CHAT_LOG_MAX); // keep recent
  localStorage.setItem('chat_log', JSON.stringify(arr));
}

// โหลด banned words
async function loadBannedWords() {
  if (!bannedWords.length) {
    try {
      let arr = await fetch('data/banned_words.json').then(r=>r.json());
      bannedWords = arr;
    } catch { bannedWords = []; }
  }
}

// ฟังก์ชัน render popup UI
async function openChatPopup() {
  await loadChat(); await loadBannedWords();
  renderChatListUI();

  let html = `
      <div style="max-height:300px;overflow-y:auto;" id="chatAreaList"></div>
      <div style="margin-top:1.0em;display:flex;gap:7px;">
        <input id="chatInputBox" maxlength="90" placeholder="พิมพ์ที่นี่..." style="flex:1;"/>
        <button class="primary-btn" onclick="sendChatMsg()">ส่ง</button>
      </div>
      <div style="font-size:.86em;color:#cae;margin-top:.3em;">ขีดจำกัดครั้งละ 1 ข้อความต่อ 3 วินาที</div>
      <button class="secondary-btn" style="margin-top:9px;" onclick="closePopup()">ปิด</button>
  `;
  window.openPopup('chat', html, 'tall', 'แชท Global');

  document.getElementById('chatInputBox').focus();
  setInterval(renderChatListUI, 4000); // refresh
}

// Render ข้อความ
function renderChatListUI() {
  let el = document.getElementById('chatAreaList');
  if (!el) return;
  let arr = chatList.slice(-CHAT_LOG_MAX);
  el.innerHTML = arr.map(c =>
   `<div style="display:flex;align-items:center;gap:7px;margin-bottom:2px;">
      <span style="color:#77f;font-weight:600;font-size:.98em;">[${formatChatTime(c.time)}] ${escapeHTML(c.user)}:</span>
      <span style="font-size:.97em;">${escapeHTML(c.text)}</span>
      ${c.system ? ` <span style="color:#ef7;font-size:.89em;">[System]</span>` : ""}
    </div>`).join('');
  el.scrollTop = el.scrollHeight;
}

// ฟอร์แมตเวลา
function formatChatTime(ts) {
  let d = new Date(ts);
  return d.getHours().toString().padStart(2,"0")+":"+d.getMinutes().toString().padStart(2,"0");
}

// ส่งข้อความ
window.sendChatMsg = function() {
  let box = document.getElementById('chatInputBox');
  if (!box) return;
  let txt = (box.value || "").trim();
  if (!txt) return;
  if (txt.length>90) return alert('ข้อความยาวเกิน 90 ตัวอักษร');
  let now = Date.now();
  // Anti spam/rapid
  if (now - chatLastTime < 3000) { alert("ต้องรอ 3 วินาทีต่อข้อความ"); return; }
  chatLastTime = now;
  // ดึงชื่อ
  let username = localStorage.getItem('user_name') || 'Guest';
  // Filter banned
  let test = txt.toLowerCase();
  if (bannedWords.some(w => test.includes(w))) { alert("ข้อความไม่เหมาะสม!"); return; }
  // Safe HTML, not allow tags
  if (txt.match(/[<>]/)) { alert("ไม่อนุญาต HTML"); return; }
  // Push log
  chatList.push({ user: username, text: txt, time: now, system: false });
  // ตัดเก็บแค่ 50 messages
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  box.value = "";
  renderChatListUI();
}

// Add system message (เรียกจาก battle/gacha)
window.addSystemChat = function(msg) {
  let now = Date.now();
  chatList.push({ user: "System", text: msg, time: now, system: true });
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  renderChatListUI();
}

// Escape HTML
function escapeHTML(str) {
  return (str || "").replace(/[<>"']/g, c =>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;',"'":'&#39;'}[c]));
}

// Auto mount ปุ่มแชทในเมนู
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnChat');
  if (btn) btn.onclick = openChatPopup;
});

// Export
window.chatEngine = {
  open: openChatPopup,
  addSystem: window.addSystemChat,
  reloadWords: async()=>{bannedWords=[];await loadBannedWords();}
};

เพิ่มไฟล์ data/chat.json
[
  {
    "user": "System",
    "text": "ยินดีต้อนรับสู่แชท Global!",
    "time": 1717214400000,
    "system": true
  }
]

เพิ่มไฟล์ data/banned_words.json
[
  "เหี้ย","ควย","สัส","fuck","shit","bitch","แม่ง","ส้นตีน"
]

เพิ่มไฟล์ js/gachaLog.js
// js/gachaLog.js - Epic Seven Card System: Gacha Log ระบบล็อกประวัติการสุ่มกาชา

/**
 * ฟังก์ชั่นจัดการ log การสุ่มกาชาของผู้ใช้ (เก็บ/ดึงจาก localStorage + รองรับโหลด/เซฟไฟล์แยกภายนอกในอนาคต)
 * สามารถเรียกดูย้อนหลัง, ค้นหารายการ, แยก per user, per event, เรียงลำดับ ฯลฯ
 * (c) 2024
 */

// โครงสร้างข้อมูล 1 log: { user_id, time, gacha_id, char_id, rarity }

let gachaLogList = [];   // Log ทั้งหมดที่โหลดมาแล้ว
let gachaLogLoaded = false;

// โหลด log gacha (จาก localStorage หรือ data/gacha_log.json สำหรับ admin/audit)
async function loadGachaLog() {
    if (gachaLogLoaded) return;
    // โหลดของ user ปัจจุบันจาก localStorage เสมอ
    try {
        gachaLogList = JSON.parse(localStorage.getItem('gacha_log') || '[]');
    } catch { gachaLogList = []; }

    // ถ้าเป็น admin หรือ dev สามารถโหลด data/gacha_log.json (read-only) เพื่อดู log ทุกคน (จำลอง)
    if (window.isAdmin && window.isAdmin()) {
        try {
            let allLog = await fetch('data/gacha_log.json').then(r => r.json());
            gachaLogList = allLog.logs || [];
        } catch { /* skip if unavailable */ }
    }
    gachaLogLoaded = true;
}

// เซฟ log ลง localStorage ของผู้ใช้ (เรียกทุกครั้งมีการสุ่ม gacha)
function saveGachaLog() {
    localStorage.setItem('gacha_log', JSON.stringify(gachaLogList));
}

// เพิ่ม log ใหม่ (ใช้ทุกครั้งหลังสุ่ม gacha ได้ ตัวเดียวหรือหลายใบ)
window.addGachaLog = function({ user_id, gacha_id, char_id, rarity }) {
    // บันทึก timestamp + id ผู้ใช้
    const entry = {
        user_id: user_id || (localStorage.getItem('user_id') || 'guest'),
        gacha_id,
        char_id,
        rarity,
        time: Date.now()
    };
    gachaLogList.push(entry);
    // เก็บ log แค่ 200 รายการล่าสุดต่อ user
    gachaLogList = gachaLogList.slice(-200);
    saveGachaLog();
};

// ดู log ย้อนหลัง (ของ user คนเดียว)
window.queryMyGachaLog = async function(limit = 50) {
    await loadGachaLog();
    const user_id = localStorage.getItem('user_id') || 'guest';
    return gachaLogList.filter(l => l.user_id === user_id).slice(-limit).reverse();
};

// สำหรับ admin: ดู log ทุกคน (require isAdmin)
window.queryAllGachaLog = async function(limit = 1000) {
    await loadGachaLog();
    if (!window.isAdmin || !window.isAdmin()) {
        alert("ต้องเป็นแอดมินจึงจะดู log ทั้งหมดได้");
        return [];
    }
    return gachaLogList.slice(-limit).reverse();
};

// Render Popup แสดง log กาชา user
window.openMyGachaLogPopup = async function() {
    const log = await window.queryMyGachaLog(60);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">ประวัติการสุ่มกาชาล่าสุด</div>
        <div style="max-height:340px;overflow-y:auto;">
        <table style="background:#1a2637;width:99%;border-radius:13px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="5" style="color:#faa;text-align:center;">ยังไม่มีกาชา</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('gachaLog', html, 'large', "ประวัติสุ่มกาชา");
};

// (Admin) Render Log ทั้งหมด popup
window.openAdminAllGachaLogPopup = async function() {
    const log = await window.queryAllGachaLog(500);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">[ADMIN] ประวัติการสุ่มกาชาทุกผู้ใช้</div>
        <div style="max-height:370px;overflow-y:auto;">
        <table style="background:#19263a;width:99%;border-radius:8px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>User</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.user_id}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="6" style="color:#faa;">ไม่มี log</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('allGachaLog', html, 'large', "Gacha Log (ADMIN)");
};

// Auto menu: เพิ่มใน admin panel หรือเมนู profile
document.addEventListener('DOMContentLoaded', ()=>{
    if (document.getElementById('btnGachaLog')) {
        document.getElementById('btnGachaLog').onclick = window.openMyGachaLogPopup;
    }
    // หรือเรียก popup ได้จาก gacha.js หลังสุ่มเสร็จ
});

// Export ให้ระบบอื่นเชื่อม
window.gachaLogEngine = {
    add: window.addGachaLog,
    mylog: window.queryMyGachaLog,
    all: window.queryAllGachaLog,
    open: window.openMyGachaLogPopup
};

เพิ่มไฟล์ data/gacha_log.json
{
  "logs": [
    {
      "user_id": "player1",
      "time": 1717228300000,
      "gacha_id": "premium_summon",
      "char_id": "astra",
      "rarity": 5
    },
    {
      "user_id": "player2",
      "time": 1717228400000,
      "gacha_id": "premium_summon",
      "char_id": "slime_basic",
      "rarity": 3
    }
    // ...บันทึกต่อท้ายได้เรื่อยๆ
  ]
}

เพิ่มไฟล์ js/energy.js
// js/energy.js
//
// Epic Seven Card Battle - Energy (Stamina) System (Frontend only)
//
// รองรับ energy bar, ลด/เพิ่มระหว่างเล่นดันเจี้ยน, รีเซ็ต, ใช้ item, ป็อปอัป เติม/แจ้งหมด, อัปเดต UI อัตโนมัติ
// สามารถ sync กับ LocalStorage หรือ API/JSON ในอนาคตได้

const DEFAULT_MAX_ENERGY = 45;     // cap ค่า default
const REGEN_INTERVAL_MIN = 12;     // 1 energy ต่อกี่นาที? (12 นาที = 5/ชม)
const REGEN_AMOUNT    = 1;
const REGEN_TICK_MS   = 60 * 1000; // 1 นาที/loop (ปรับเป็น 10 วิ/DEV ได้)
const ENERGY_ITEM_IDS = ['heal_potion']; // ใช้ heal_potion เติม energy ได้
let energy_config = { max: DEFAULT_MAX_ENERGY, regen_min: REGEN_INTERVAL_MIN };

// ===== 1. STATE =====
function getEnergy() {
    let e = Number(localStorage.getItem('user_energy'));
    if (isNaN(e)) e = energy_config.max;
    return e;
}

function setEnergy(val) {
    localStorage.setItem('user_energy', val);
    renderEnergyBar();
}

function getEnergyMax() {
    return energy_config.max || DEFAULT_MAX_ENERGY;
}

// เวลาเหลือจนเติม 1 energy อัตโนมัติ (timestamp)
function getNextRegenTs() {
    let ts = Number(localStorage.getItem('energy_next_ts'));
    if (!ts) {
        ts = Date.now() + energy_config.regen_min * 60 * 1000;
        localStorage.setItem('energy_next_ts', ts);
    }
    return ts;
}

function setNextRegenTs(ts) {
    localStorage.setItem('energy_next_ts', ts);
}

// ===== 2. REGEN AUTO PER TIME (เฉพาะออน/เปิดเกม) =====
function energyRegenTick() {
    let eNow = getEnergy();
    let eMax = getEnergyMax();
    if (eNow >= eMax) {
        setNextRegenTs(Date.now() + energy_config.regen_min * 60 * 1000);
        return;
    }
    let ts = getNextRegenTs();
    let now = Date.now();
    if (now >= ts) {
        setEnergy(Math.min(eMax, eNow + REGEN_AMOUNT));
        setNextRegenTs(now + energy_config.regen_min * 60 * 1000);
        renderEnergyBar();
    }
}

// ===== 3. Energy UI BAR (Footer, Header, หรือ Popup) =====
function renderEnergyBar() {
    let bar = document.getElementById('energyBarUI');
    if (!bar) {
        bar = document.createElement('div');
        bar.id = 'energyBarUI';
        Object.assign(bar.style, {
            position: 'fixed',
            left: '18px',
            top: '82px',
            zIndex: '50',
            background: '#211d27e8',
            color: '#c8f8fd',
            borderRadius: '12px',
            padding: '7px 16px 5px 16px',
            fontFamily: 'inherit',
            fontWeight: 'bold',
            boxShadow: '0 3px 19px #14effa24',
            fontSize: '1.08em',
            minWidth: '110px',
            userSelect: 'none',
            cursor: 'pointer'
        });
        document.body.appendChild(bar);
        bar.onclick = openEnergyDetailPopup;
    }
    let energy = getEnergy();
    let eMax = getEnergyMax();
    let ts = getNextRegenTs();
    let minLeft = Math.max(0, Math.ceil((ts - Date.now()) / 60000));
    bar.innerHTML = `<span style="color:#71eaff;font-size:1.23em;">⚡ ENERGY</span> <span style="color:#fafd85;">${energy}</span>/<b>${eMax}</b><span style="font-size:.93em;color:#8ee;"> ${energy < eMax ? `(+1 ใน ${minLeft}นาที)` : ''}</span>`;
}

// Popup รายละเอียด
function openEnergyDetailPopup() {
    let energy = getEnergy();
    let max = getEnergyMax();
    let minLeft = Math.ceil((getNextRegenTs() - Date.now()) / 60000);
    let html = `
      <div style="padding:6px 11px;text-align:center;">
        <div style="font-size:1.1em;margin-bottom:8px;">⚡ <b>พลังงาน</b> (${energy} / ${max})</div>
        <div style="color:#bdf;">${energy < max ? `จะฟื้น +1 energy ในอีก <b>${minLeft}</b> นาที` : 'เต็มสูงสุดแล้ว'}</div>
        <hr style="margin:12px 0;" />
        <button class="primary-btn" style="margin-bottom:6px;" onclick="refillEnergyWithItem()">ใช้ Heal Potion เพิ่ม Energy</button>
        <div style="font-size:.95em;color:#7cf;">Heal Potion = +15 Energy</div>
        <hr style="margin:12px 0;" />
        <button class="secondary-btn" onclick="closePopup()">ปิด</button>
      </div>
    `;
    window.openPopup('energyDetail', html, 'small', 'พลังงาน Energy');
}

window.refillEnergyWithItem = function() {
    // ใช้ไอเท็ม (heal_potion) ใน inventory
    let inventory = window.inventoryEngine?.list() || [];
    let owned = inventory.find(i => ENERGY_ITEM_IDS.includes(i.id) && i.qty >= 1);
    if (!owned) {
        alert("ไม่มี Heal Potion ในคลัง");
        return;
    }
    let val = 15;
    let energy = getEnergy();
    let max = getEnergyMax();
    let after = Math.min(max, energy + val);
    setEnergy(after);
    window.inventoryEngine.remove(owned.id, 1);
    closePopup('energyDetail');
    setTimeout(() => renderEnergyBar(), 222);
    alert(`Energy +${after - energy}`);
};

// ===== 4. Energy ลด/เพิ่ม ระหว่างเล่นดันเจี้ยน/อื่นๆ =====
window.addEnergy = function(val) {
    let e = Math.min(getEnergyMax(), getEnergy() + val);
    setEnergy(e);
    renderEnergyBar();
};
window.reduceEnergy = function(val) {
    let e = Math.max(0, getEnergy() - val);
    setEnergy(e);
    renderEnergyBar();
};

// ===== 5. INIT (DOMContentLoaded) =====
document.addEventListener('DOMContentLoaded', () => {
    // โหลด config
    fetch('data/energy.json').then(r => r.json()).then(cfg => {
        if (cfg?.max) energy_config.max = cfg.max;
        if (cfg?.regen_min) energy_config.regen_min = cfg.regen_min;
    }).catch(() => {});

    // ถ้ายังไม่มี energy ให้เติมเต็ม
    if (!localStorage.getItem('user_energy')) setEnergy(energy_config.max);
    // ติด energy bar UI
    setTimeout(() => renderEnergyBar(), 350);

    // Loop regen ทุก REGEN_TICK_MS
    setInterval(energyRegenTick, REGEN_TICK_MS);

    // ทุกครั้งที่เล่นดันเจี้ยนหรืออื่น ๆ ต้องเรียก
    window.renderEnergyBar = renderEnergyBar;
    window.openEnergyDetailPopup = openEnergyDetailPopup;
});

// ===== 6. Export API สำหรับระบบอื่นเชื่อมใช้ =====
window.energyEngine = {
    get: getEnergy,
    set: setEnergy,
    max: getEnergyMax,
    add: window.addEnergy,
    reduce: window.reduceEnergy,
    render: renderEnergyBar,
    openDetail: openEnergyDetailPopup,
    config: energy_config,
};

เพิ่มไฟล์ data/energy.json
{
  "max": 45,         // Max Energy สำหรับ user เริ่มต้น (สามารถปรับเพิ่มใน admin/อีเวนต์)
  "regen_min": 12    // 1 energy ฟื้นอัตโนมัติทุก 12 นาที
}

เพิ่มไฟล์ data/config.json
{
  "battle": {
    "spd_bar_max": 100,
    "spd_frame": 120,
    "max_team": 4,
    "max_monster": 4,
    "show_crit_popup": true,
    "ani_slide_duration": 350
  },
  "exp": {
    "base_win": 60,
    "base_lose": 18,
    "exp_up_event": 1.0
  },
  "drop": {
    "exp_potion_rate": 55,
    "rune_shard_rate": 22,
    "gold_rate": 80
  },
  "stat_curve": {
    "hero_hp": 1.085,
    "hero_atk": 1.08,
    "hero_def": 1.09
  },
  "energy": {
    "max": 45,
    "regen_min": 12
  },
  "cooldown": {
    "base_cd_reduce": 1,
    "cd_reset_by_item": true
  },
  "limit": {
    "max_inventory": 999,
    "max_char_collection": 50,
    "max_party": 4
  },
  "gacha": {
    "pity_enabled": true,
    "pity_count": 20,
    "gacha_log_limit": 150
  },
  "file_version": "1.0.0",
  "update": "2024-06-07"
}

เพิ่มไฟล์ js/localization.js
// js/localization.js
/**
 * Localization System (Epic Seven Card Battle)
 * - Auto-detect, allow manual switch
 * - All string must use key, ex: t("menu.team")
 * - Work with all modular code, async/dynamic
 * (c) 2024
 */

let langData = {};       // Object of all text key:value
let langList = ['th', 'en']; // So far - more add as needed
let currentLang = 'th';  // Default: Thai

// Load language data from /data/lang/*.json
async function loadLang(lang) {
    if (!langList.includes(lang)) lang = 'en';
    currentLang = lang;
    langData = {};
    try {
        langData = await fetch(`data/lang/${lang}.json`).then(r => r.json());
        localStorage.setItem('user_lang', lang);
    } catch {
        langData = {};
    }
    applyLanguageToUI();
}

// Localizer function t(key) | lang(key)
function t(key, args = {}) {
    let keys = key.split('.');
    let val = langData;
    for (let k of keys) {
        val = (val || {})[k];
        if (!val) break;
    }
    if (!val) return key;
    // Replace {xxx} in text by args.xxx
    if (typeof val === 'string') {
        return val.replace(/{(\w+)}/g, (a, b) => args[b] || '');
    }
    return val;
}

// Apply language to all .trans-key UI (with data-trans="key")
function applyLanguageToUI() {
    document.querySelectorAll('[data-trans]').forEach(el => {
        el.innerHTML = t(el.getAttribute('data-trans'));
    });
}

// Add lang switcher menu/button in your UI
function renderLangMenu(containerId = "langMenu") {
    let html = `<select id="langSel" style="padding:.4em 1.4em;font-size:1em;">` +
        langList.map(code => `<option value="${code}" ${code === currentLang ? "selected" : ""}>${langName(code)}</option>`).join('') +
        `</select>`;
    (document.getElementById(containerId) || document.body).innerHTML = html;
    setTimeout(() => {
        document.getElementById('langSel').onchange = e => {
            loadLang(e.target.value);
            applyLanguageToUI();
        };
    }, 1);
}

function langName(code) {
    return {
        en: 'English',
        th: 'ไทย',
        ja: '日本語'
    }[code] || code.toUpperCase();
}

// On startup: load language (from localStorage or browser)
document.addEventListener('DOMContentLoaded', () => {
    let userLang = localStorage.getItem('user_lang') || navigator.language.substr(0,2) || 'th';
    if (!langList.includes(userLang)) userLang = 'th';
    loadLang(userLang);
    // Optional: render switcher menu somewhere (ex: footer)
    if (document.getElementById('footerLangMenu')) renderLangMenu('footerLangMenu');
});

// Expose for modules
window.t = t;
window.lang = t;
window.selectLang = loadLang;
window.applyLanguageToUI = applyLanguageToUI;
window.renderLangMenu = renderLangMenu;

เพิ่มไฟล์ data/lang/th.json
{
  "menu": {
    "team": "จัดทีม",
    "battle": "ต่อสู้",
    "inventory": "คลังไอเท็ม",
    "quest": "เควสต์",
    "shop": "ร้านค้า",
    "gacha": "กาชา",
    "character": "คลังตัวละคร",
    "announcement": "ประกาศ",
    "chat": "แชท",
    "login": "เข้าสู่ระบบ",
    "logout": "ออกจากระบบ"
  },
  "popup": {
    "ok": "ตกลง",
    "cancel": "ยกเลิก",
    "close": "ปิด",
    "confirm": "ยืนยัน",
    "use_item": "ใช้ไอเท็ม",
    "upgrade": "อัปเกรด",
    "equip": "ใส่รูน",
    "result_win": "ชัยชนะ!",
    "result_lose": "แพ้"
  },
  "battle": {
    "auto": "ออโต้",
    "start": "เริ่มต่อสู้",
    "back": "กลับ",
    "hp": "HP",
    "atk": "โจมตี",
    "def": "ป้องกัน",
    "spd": "ความเร็ว",
    "crit": "คริ",
    "exp_gain": "ได้รับ EXP",
    "drop_items": "ไอเท็มที่ได้รับ"
  },
  "inventory": {
    "title": "คลังไอเท็ม",
    "use": "ใช้",
    "no_item": "ยังไม่มีไอเท็ม"
  },
  "character": {
    "title": "คลังตัวละคร",
    "lock": "ล็อก",
    "unlock": "ปลดล็อก",
    "upgrade": "อัปเกรด"
  },
  "gacha": {
    "draw1": "สุ่ม 1 ครั้ง",
    "draw10": "สุ่ม 10 ครั้ง",
    "result": "ผลลัพธ์การกาชา"
  },
  "energy": {
    "energy": "พลังงาน",
    "full": "เต็ม",
    "refill": "เติมพลังงาน",
    "next": "อีก {min} นาที"
  },
  "admin": {
    "panel": "Admin Panel",
    "user": "ผู้ใช้",
    "item": "ไอเท็ม",
    "quest": "เควสต์",
    "gacha": "กาชา",
    "shop": "ร้านค้า"
  }
}

เพิ่มไฟล์ data/lang/en.json
{
  "menu": {
    "team": "Team Setup",
    "battle": "Battle",
    "inventory": "Inventory",
    "quest": "Quest",
    "shop": "Shop",
    "gacha": "Gacha",
    "character": "Characters",
    "announcement": "Announcement",
    "chat": "Chat",
    "login": "Login",
    "logout": "Logout"
  },
  "popup": {
    "ok": "OK",
    "cancel": "Cancel",
    "close": "Close",
    "confirm": "Confirm",
    "use_item": "Use Item",
    "upgrade": "Upgrade",
    "equip": "Equip",
    "result_win": "Victory!",
    "result_lose": "Defeat"
  },
  "battle": {
    "auto": "Auto",
    "start": "Start Battle",
    "back": "Back",
    "hp": "HP",
    "atk": "ATK",
    "def": "DEF",
    "spd": "SPD",
    "crit": "Crit",
    "exp_gain": "EXP gained",
    "drop_items": "Drop Items"
  },
  "inventory": {
    "title": "Inventory",
    "use": "Use",
    "no_item": "No items"
  },
  "character": {
    "title": "Character Box",
    "lock": "Lock",
    "unlock": "Unlock",
    "upgrade": "Upgrade"
  },
  "gacha": {
    "draw1": "Draw 1",
    "draw10": "Draw 10",
    "result": "Gacha Result"
  },
  "energy": {
    "energy": "Energy",
    "full": "Full",
    "refill": "Refill",
    "next": "in {min} min"
  },
  "admin": {
    "panel": "Admin Panel",
    "user": "User",
    "item": "Item",
    "quest": "Quest",
    "gacha": "Gacha",
    "shop": "Shop"
  }
}

ทุกไฟล์ได้รับการเพิ่มเข้าไปในทุกระบบเรียบร้อยแล้ว หลังจากนี้จะเป็นการอัปเดตจุดต่างๆเพื่อให้สอดคล้องและเชื่อมต่อได้กับทุกไฟล์ที่ควรสัมผัสกัน คุณจะต้องเป็นคนหาจุดที่ต้องอัปเดตนั้น แล้ววิเคราะห์ออกมาว่าจะต้องแก้ไขไฟล์ไหนบ้าง แล้วควรเริ่มจากไฟล์ไหนก่อนเรียงลำดับมา จากการอัปเดตครั้งนี้คุณควรที่จะต้องเช็ค console ก่อนว่าเกิด error มั้ย
ข้อควรระวังห้ามแก้ไขจนต้องขัดกับจุดอื่นอีกไม่งั้นจะเป็นการแก้ไม่รู้จบ

รายการอัปเดตไฟล์
1.js/ui.js, popupManager.js (core popup & noti)
2.เพิ่ม js/utils.js แล้ว import ในทุกไฟล์ที่จำเป็น
3.battle.js, team.js, effect.js, passive.js, animationEngine.js, result.js (loop, state, event, win/lose, popup call)
4.inventory.js, item.json, shop.js, reward, quest, stage, energy (ของ, ด่าน, exp, พลังงาน, ระบบเกี่ยวกับรางวัล เติม-ลดได้)
5.characterCollection.js, upgrade.js, rune.js (ฐานข้อมูลตัวละคร/อัปเกรด/รูน)
6.gacha.js, gachaLog.js (รวมทั้งหลังสุ่ม add to collection แล้ว log)
7.chat.js, announcement.js, redeem.js (popup, noti, dot, admin)
8.admin.js (guard, panel UI, lazy load JSON ใน panel)
สรุปจุดอัปเดตและลำดับ (โค้ดเต็ม ไม่แก้ไขซ้ำ)
1. เริ่มจากตรวจสอบและรีแฟกเตอร์ UI/Popup Manager ให้พร้อมใช้กับทุก module
2. เขียน utils.js แล้ว update ไฟล์อื่นๆ ให้ import ฟังก์ชันจาก utils
3. ตรวจสอบ battle.js, effect.js, passive.js ให้ทำงานร่วมกัน (trigger event, passive, buff/debuff, animation)
4. ตรวจสอบ inventory หลัง shop, quest, battle, redeem, gacha เพื่อ sync ข้อมูลทันที
5. ให้ quest/stage/unlock/exp/energy update สถานะหลังเล่น
6. ตรวจสอบ language/i18n ให้ .innerHTML ใน popup ทุกฟีเจอร์รับ t(key) ไม่ hardcode
7. เชื่อมโยง admin panel ทุกเมนู json/ข้อมูลต้องโหลดใหม่ทันที หลังเพิ่ม/ลบ/แก้ไข

รายงานการอัปเดตต่อจากนี้

อัปเดต js/popupManager.js
// js/popupManager.js

let popupStack = [];  // Stack เก็บ popup layer ทั้งหมด

/**
 * เปิด Popup กลางจอ (เพิ่ม Stack)
 * @param {Object} options
 * @property {String} id ไม่ซ้ำแต่ละประเภท
 * @property {String} title
 * @property {String} content HTML
 * @property {String} size 'normal'|'large'|'tall'|'small'
 * @property {Function} onClose callback
 * @property {Boolean} showCloseBtn
 * @property {String} autoFocus selector
 */
window.popupManager = {
    open: function (options = {}) {
        // หากซ้ำ id ใน stack ไม่ต้องเปิดซ้ำ
        if (popupStack.some(p => p.id === options.id)) return;
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;
        const { id, title, content, size, onClose, showCloseBtn, autoFocus } = options;
        const sz = size || 'normal';
        let html = `
      <div class="popup${sz==='large'?' large':sz==='tall'?' tall':sz==='small'?' small':''}" style="z-index:${100+popupStack.length*2};" popup-id="${id||''}">
          ${showCloseBtn===false?'':`<button class="close" onclick="popupManager.close('${id||''}')">&times;</button>`}
          <h2 style="margin-bottom:.39em;">${typeof t === 'function' ? t(title||id) : (title||'')}</h2>
          <div class="popup-content" style="margin-top:9px;">${content || ''}</div>
      </div>`;
        let wrap = document.createElement('div');
        wrap.className = 'popup-wrap-layer';
        wrap.style = `position:fixed; top:0; left:0; width:100vw;height:100vh;display:flex;
          align-items:center;justify-content:center;z-index:${99 + popupStack.length*2+1};`;
        wrap.innerHTML = html;
        popupStack.push({
            id,
            wrap,
            onClose: typeof onClose === "function"?onClose:null
        });
        popupLayer.appendChild(wrap);
        popupLayer.classList.add('active');
        if (autoFocus) {
            setTimeout(()=>{ const el = wrap.querySelector(autoFocus); if(el) el.focus(); }, 150)
        }
        // สำหรับระบบ language/refresh
        if (typeof applyLanguageToUI === "function") setTimeout(applyLanguageToUI, 15);
    },

    /** ปิด Popup (ทีละชั้น หรือระบุ id) */
    close: function(id='') {
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;
        if (!popupStack.length) return;
        let pop;
        if(id) {
            let idx = popupStack.findIndex(p=>p.id===id);
            if(idx===-1) return;
            pop = popupStack.splice(idx,1)[0];
            if (pop && pop.wrap) pop.wrap.remove();
        } else {
            pop = popupStack.pop();
            if (pop && pop.wrap) pop.wrap.remove();
        }
        if (pop && pop.onClose) pop.onClose();
        if (!popupStack.length) popupLayer.classList.remove('active');
    },

    /** ปิด Popups ทั้งหมด (reset stack) */
    closeAll: function () {
        const popupLayer = document.getElementById('popupLayer');
        popupStack.forEach(p => {
            if (p.wrap) p.wrap.remove();
            if (typeof p.onClose==="function") p.onClose();
        });
        popupStack = [];
        if (popupLayer) popupLayer.classList.remove('active');
    },

    /** Render content ใหม่บน popup id นี้ (เช่น refresh) */
    update: function(id, content) {
        let pop = popupStack.find(p => p.id===id);
        if(pop && pop.wrap) {
            let inner = pop.wrap.querySelector('.popup-content');
            if(inner) inner.innerHTML = content;
        }
    },

    getStack: function () { return [...popupStack]; }
};

// Shortcuts
window.openPopup = function (id, content = '', size = 'normal', title = '', options = {}) {
    window.popupManager.open({id, title: title || id, content, size, ...options});
}
window.closePopup = function (id = '') { window.popupManager.close(id); }
window.closeAllPopup = function () { window.popupManager.closeAll(); }

// Escape key = close popup
document.addEventListener('keyup', ev => {
    if(ev.key === 'Escape') popupManager.close();
});
// Click shadow layer (สำหรับปิด popup ที่อนุญาต)
document.getElementById('popupLayer')?.addEventListener('mousedown', ev => {
    if(ev.target.classList.contains('popup-wrap-layer')) {
        if(!popupStack.length) return;
        let last = popupStack[popupStack.length-1];
        if(last && last.wrap && last.wrap.querySelector('.close')) {
            window.popupManager.close();
        }
    }
});

// Menu notification dots (ex. new announcement, quest, etc.)
window.setMenuNoti = function(btnId, show) {
    const btn = document.getElementById(btnId);
    if(btn) {
        if(show) btn.classList.add('noti');
        else btn.classList.remove('noti');
    }
};

อัปเดตไฟล์ js/ui.js
// js/ui.js

document.addEventListener('DOMContentLoaded', () => {
    // Menu button event mapping: [btnId, popupId or function]
    const menuActions = {
        btnTeam: () => openPopup('team', '', 'large', t("menu.team")),
        btnBattle: () => openPopup('Battle', '', 'large', t("menu.battle")),
        btnInventory: () => openPopup('inventory', '', 'large', t("menu.inventory")),
        btnQuest: () => openPopup('quest', '', 'large', t("menu.quest")),
        btnShop: () => openPopup('shop', '', 'large', t("menu.shop")),
        btnGacha: () => openPopup('gacha', '', 'large', t("menu.gacha")),
        btnCharacter: () => openPopup('characterCollection', '', 'large', t("menu.character")),
        btnAnnouncement: () => openPopup('announcement', '', 'large', t("menu.announcement")),
        btnChat: () => openPopup('chat', '', 'tall', t("menu.chat")),
        btnLogin: () => openPopup('login', '', 'small', t("menu.login")),
    };
    Object.entries(menuActions).forEach(([btnId, action]) => {
        const btn = document.getElementById(btnId);
        if (btn) btn.addEventListener('click', action);
    });

    // Profile name
    window.setPlayerName = function(name) {
        let el = document.getElementById('playerName');
        if(el) el.textContent = name || '';
    };

    // ESC key (ซ้ำเพื่อ backup)
    document.addEventListener('keyup', (ev) => { if (ev.key === 'Escape') closePopup(); });

    // battlefield "Back" button: hide battlefield, show menu
    const btnBack = document.getElementById('btnBack');
    if (btnBack) btnBack.addEventListener('click', () => {
        document.getElementById('mainBattlefield').classList.add('hide');
    });

    // Default: dot & notification handler
    window.setMenuNoti = function(btnId, show) {
        const btn = document.getElementById(btnId);
        if(btn) {
            if(show) btn.classList.add('noti');
            else btn.classList.remove('noti');
        }
    };

    // Language menu auto for footer/demo
    if (typeof renderLangMenu === "function" && document.getElementById('footerLangMenu')) {
        renderLangMenu('footerLangMenu');
    }
});

เพิ่มไฟล์ js/utils.js
// js/utils.js
// Utility & helper functions สำหรับ Epic Seven Card Auto Battle ทุกโมดูลใช้ได้

/**
 * Deep clone object (recursively)
 * @param {Object} obj
 * @returns {Object}
 */
window.deepCopy = function(obj) {
    return JSON.parse(JSON.stringify(obj));
};

/**
 * Random int [min, max] (inclusive)
 */
window.randInt = function(min, max) {
    if (min === max) return min;
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

/**
 * Find element by selector, throw if not found
 * @param {string} selector
 * @returns {HTMLElement}
 */
window.$ = function(selector) {
    let el = document.querySelector(selector);
    if (!el) throw new Error("Element not found: " + selector);
    return el;
};

/**
 * Pluralize text (รองรับ en/th)
 * Example: plural('item', 2, 'en'), plural('ไอเท็ม', 1, 'th')
 */
window.plural = function(word, n, lang = 'th') {
    if (lang === 'en') return n === 1 ? word : word + 's';
    return word;
};

/**
 * Capitalize first letter
 */
window.capFirst = function(str) {
    if (!str) return "";
    return str.charAt(0).toUpperCase() + str.slice(1);
};

/**
 * Format number with commas (1,234,567)
 */
window.numberWithCommas = function(num) {
    return (num||0).toLocaleString('en-US');
};

/**
 * Format timestamp to "DD/MM/YYYY HH:MM"
 */
window.formatTime = function(ts) {
    let d = new Date(ts); 
    return `${d.getDate().toString().padStart(2,"0")}/${(d.getMonth()+1).toString().padStart(2,"0")}/${d.getFullYear()} ${(d.getHours()||0).toString().padStart(2,"0")}:${(d.getMinutes()||0).toString().padStart(2,"0")}`;
};

/**
 * Sleep (await sleep(ms))
 */
window.sleep = function(ms) {
    return new Promise((r) => setTimeout(r, ms));
};

/**
 * Escape HTML special chars (for safe display in innerHTML)
 */
window.escapeHTML = function(str) {
    return (str||"").replace(/[<>&"']/g, c =>
        ({
            '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;', "'": '&#39;'
        }[c])
    );
};

/**
 * Remove HTML tags (keep just text)
 */
window.stripHTML = function(str) {
    return (str||"").replace(/<(.*?)>/g, "");
};

/**
 * Truncate text to length + ...
 */
window.truncate = function(str, len) {
    str = str || "";
    if(str.length <= len) return str;
    return str.substr(0, len-3) + "...";
};

อัปเดตไฟล์ data/item.json
[
  {
    "id": "gold",
    "name": "Gold",
    "type": "currency",
    "description": "เหรียญทองสำหรับใช้งานในร้านค้า อัปเกรด หรือสุ่มกาชา",
    "img": "gold.png",
    "rarity": 1,
    "usable": false,
    "price": 0
  },
  {
    "id": "diamond",
    "name": "Crystal",
    "type": "currency",
    "description": "เพชร ใช้ซื้อของหรือสุ่มกาชา พิเศษ",
    "img": "diamond.png",
    "rarity": 2,
    "usable": false,
    "price": 0
  },
  {
    "id": "exp_potion",
    "name": "EXP Potion",
    "type": "xp_item",
    "description": "เพิ่ม EXP ให้ตัวละครทันที ใช้เลือกเป้าหมาย",
    "img": "exp_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "exp": 500 },
    "price": 200
  },
  {
    "id": "skill_book",
    "name": "Skill Book",
    "type": "upgrade",
    "description": "หนังสืออัปเกรดสกิลตัวละคร (สุ่ม 1 skill)",
    "img": "skill_book.png",
    "rarity": 3,
    "usable": true,
    "effect": { "skillup": 1 },
    "price": 900
  },
  {
    "id": "rune_shard",
    "name": "Rune Shard",
    "type": "rune_material",
    "description": "เศษรูน ใช้สำหรับอัปเกรดหรือสร้างรูน",
    "img": "rune_shard.png",
    "rarity": 2,
    "usable": false,
    "price": 150
  },
  {
    "id": "heal_potion",
    "name": "Heal Potion",
    "type": "heal",
    "description": "ไอเท็มใช้ฟื้นฟู HP 50% ให้ตัวละครที่เลือก หรือใช้เติม Energy (+15)",
    "img": "heal_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "hp_pct": 50, "energy": 15 },
    "price": 120
  }
]

อัปเดตไฟล์ js/inventory.js
// js/inventory.js

let itemData = [];
let inventory = [];

/** โหลดไอเท็มจาก data/item.json */
async function loadItemData() {
  if (itemData.length) return;
  itemData = await fetch('data/item.json').then(r => r.json());
}

/** โหลดคลังของผู้เล่น (จาก localStorage) */
function loadInventory() {
  let raw = localStorage.getItem('user_inventory');
  inventory = raw ? JSON.parse(raw) : [];
}

/** เซฟ inventory */
function saveInventory() {
  localStorage.setItem('user_inventory', JSON.stringify(inventory));
}

/** ค้นหาไอเท็มใน data/item.json */
function findItemById(id) {
  return itemData.find(i => i.id === id);
}

/** render UI คลังไอเท็ม */
function renderInventoryUI() {
  let html = `
    <div style="display:flex;flex-direction:column;gap:7px;max-height:420px;overflow-y:auto;">
      ${inventory.length === 0 ? '<div style="color:#bbb;text-align:center;">ยังไม่มีไอเท็ม</div>' :
        inventory.map(item => {
          let info = findItemById(item.id) || {};
          return `
          <div style="display:flex;align-items:center;background:#272b38;padding:10px 16px;border-radius:10px;gap:19px;">
            <div style="width:36px;height:36px;border-radius:8px;background:#201624;display:flex;justify-content:center;align-items:center;">
              ${info.img ? `<img src="img/item/${info.img}" alt="${info.name}" style="width:32px;">` : "🎒"}
            </div>
            <div style="flex-grow:1;">
              <b>${info.name || item.id}</b>
              <div style="font-size:.91em;color:#84ccff;margin-top:2px;">${info.description || ''}</div>
            </div>
            <div style="color:#aaffbe;font-weight:bold;font-size:1.07em;">x${item.qty}</div>
            ${info.usable ? `<button class="primary-btn" style="padding:5px 1em 5px 1em;font-size:.96em;" onclick="useItemPrompt('${item.id}')">ใช้เลย</button>` : ""}
          </div>`;
        }).join('')}
    </div>
  `;
  document.getElementById('inventoryArea').innerHTML = html;
}

/** ฟังก์ชัน popup ยืนยันการใช้ไอเท็ม */
window.useItemPrompt = function(itemId) {
  let info = findItemById(itemId);
  window.openPopup('useItem', `
    <div style="text-align:center;">
      <img src="img/item/${info.img}" style="width:52px;margin-bottom:8px;">
      <div style="font-size:1.09em;">${info.name}</div>
      <div style="margin:.6em 0 1.1em 0;font-size:.97em;color:#7cf;">${info.description}</div>
      <button class="primary-btn" style="margin:.8em .3em 0 .3em;padding:.5em 2.1em;" onclick="useItemNow('${itemId}')">ยืนยันใช้ไอเท็ม</button>
      <button class="secondary-btn" style="margin:.8em .3em 0 .3em;" onclick="closePopup()">ยกเลิก</button>
    </div>
  `, 'small', `ใช้ ${info.name}`);
}

/** ใช้ไอเท็มทันที (ลด qty, เรียก effect, update ui) */
window.useItemNow = function(itemId) {
  let idx = inventory.findIndex(i => i.id === itemId);
  let info = findItemById(itemId);
  if (idx === -1 || !info) return;
  if (inventory[idx].qty <= 0) return;
  // Effect (mock: อัปเดต character / heal / exp อัตโนมัติ)
  if (info.effect && info.effect.exp) {
    // เพิ่ม exp ตัวละครแรกใน team
    let t = JSON.parse(localStorage.getItem('userTeam') || "[]");
    if (t.length) {
      let cid = t[0];
      let cdata = JSON.parse(localStorage.getItem("char_" + cid) || '{}');
      if (cdata) {
        cdata.exp = (cdata.exp || 0) + info.effect.exp;
        localStorage.setItem("char_" + cid, JSON.stringify(cdata));
        alert(`เพิ่ม EXP ให้ ${cdata.name} +${info.effect.exp}`);
      }
    }
  }
  // Heal to selected: (Opt: implement in character select popup)
  // เพิ่ม energy bar (สำหรับ Heal Potion) 
  if (info.effect && info.effect.energy) {
    let energy = Number(localStorage.getItem("user_energy") || 0);
    let maxEnergy = 45; // default, สามารถโยง config/energy.js ได้
    let after = Math.min(maxEnergy, energy + info.effect.energy);
    localStorage.setItem("user_energy", after);
    alert(`เติม Energy +${after - energy}`);
    if (typeof renderEnergyBar === "function") renderEnergyBar();
  }
  inventory[idx].qty--;
  if (inventory[idx].qty === 0) inventory.splice(idx, 1);
  saveInventory();
  window.closePopup();
  renderInventoryUI();
}

/** เพิ่มไอเท็มเข้า inventory */
window.addToInventory = function(itemId, qty) {
  if (!itemId || !qty) return;
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) inventory[idx].qty += qty;
  else inventory.push({ id: itemId, qty });
  saveInventory();
}

/** ลบไอเท็ม (admin, debug) */
window.removeFromInventory = function(itemId, qty) {
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) {
    inventory[idx].qty -= qty;
    if (inventory[idx].qty <= 0) inventory.splice(idx, 1);
    saveInventory();
  }
}

// DOM integration, auto popup on menu
document.addEventListener('DOMContentLoaded', async () => {
  await loadItemData();
  loadInventory();
  // เชื่อม hook popup
  const showInvPopup = () => {
    window.openPopup('inventory', `
      <div id="inventoryArea"></div>
      <div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>
    `, 'large', "คลังไอเท็ม");
    renderInventoryUI();
  };
  let btn = document.getElementById('btnInventory');
  if (btn) btn.onclick = showInvPopup;

  window.renderInventoryUI = renderInventoryUI;
});

/** เชื่อมต่อ API ให้ระบบอื่นเรียกใช้ */
window.inventoryEngine = {
  load: loadInventory,
  save: saveInventory,
  add: window.addToInventory,
  remove: window.removeFromInventory,
  list: () => inventory,
  findItemById,
  reloadAll: async () => { await loadItemData(); loadInventory(); },
}

อัปเดตไฟล์ js/shop.js
// js/shop.js - Epic Seven Clone Frontend Shop System

let shopData = [];
let purchaseHistory = {}; // Log per user/day: { shopId_itemId: numBought }

async function loadShopData() {
    if (shopData.length) return;
    let res = await fetch('data/shop.json').then(r => r.json());
    shopData = res.shops;
}

function loadShopHistory() {
    try {
        purchaseHistory = JSON.parse(localStorage.getItem('shop_purchase_history') || '{}');
    } catch { purchaseHistory = {}; }
}

function saveShopHistory() {
    localStorage.setItem('shop_purchase_history', JSON.stringify(purchaseHistory));
}

// ---------- Render UI ----------
async function openShopPopup(shopId = "main") {
    await loadShopData(); loadShopHistory();
    let shop = shopData.find(s => s.id === shopId && s.enabled);
    if (!shop) {
        window.openPopup('shop', `<div>ไม่พบร้านค้านี้ หรือร้านค้านี้ปิดอยู่</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'ร้านค้า');
        return;
    }

    let html = `
      <div style="font-size:1.14em;color:#dac1ff;margin-bottom:6px;">${shop.desc || ''}</div>
      <div style="display:flex;gap:17px;flex-wrap:wrap;align-items:stretch;">
        ${shop.items.filter(i => i.enabled).map(item => renderShopItem(shop, item)).join('')}
      </div>
      <div style="text-align:right;margin-top:23px;">
        <button class="secondary-btn" onclick="closePopup()">ปิด</button>
      </div>
    `;

    window.openPopup('shop', html, 'large', shop.name);
    renderShopLiveUI(shop.id);
}

// Helper แสดงสินค้า 1 อัน
function renderShopItem(shop, item) {
    let inv = window.inventoryEngine?.list() || [];
    let priceOwned = inv.find(i => i.id === item.price_item)?.qty || 0;
    let itemData = window.inventoryEngine.findItemById(item.item_id) || {};
    // ซื้อไปแล้วกี่ครั้งวันนี้
    let key = `${shop.id}_${item.id}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    let canBuy = item.can_buy && bought < item.can_buy;
    let canBuyToday = item.daily_limit ? bought < item.daily_limit : true;
    let disabled = !canBuy || !canBuyToday || priceOwned < item.price_amount;

    return `
      <div style="background:#223246;border:2px solid #53a0fa5c;border-radius:13px;min-width:162px;flex:1 0 174px;padding:14px 12px 18px 12px;margin-bottom:.8em;display:flex;flex-direction:column;align-items:center;justify-content:space-between;">
        <img src="img/item/${itemData.img||'noimg.png'}" alt="${itemData.name||item.item_id}" style="width:38px;margin-bottom:7px;" />
        <div style="font-size:1.1em;font-weight:bold;">${itemData.name||item.item_id} x${item.amount}</div>
        <div style="color:#ffbe77;font-size:.98em;">${item.desc || (itemData && itemData.description)||''}</div>
        <div style="margin:.8em 0;font-size:.95em;">
          <b>ราคา:</b> <span style="color: gold;font-weight:bold;">${item.price_amount}</span> <img src="img/item/${item.price_item}.png" style="width:18px;vertical-align:middle" /> 
          <br/>
          <span style="font-size:.97em;color:#cdf;">คงเหลือ: ${priceOwned}</span>
        </div>
        ${item.daily_limit ? `<div style="color:#9eecff;font-size:.92em;margin:.4em 0;">วันนี้ซื้อแล้ว: ${bought} / ${item.daily_limit}</div>` : ''}
        <button class="primary-btn" style="padding:6px 1.4em;font-size:.97em;" onclick="buyShopItem('${shop.id}','${item.id}')" ${disabled?"disabled":""}>${disabled?'ซื้อไม่ได้':'ซื้อ'}</button>
      </div>
    `;
}

// ---------- Buy flow ----------
window.buyShopItem = function(shopId, itemId) {
    let shop = shopData.find(s => s.id === shopId);
    if (!shop) return;
    let item = shop.items.find(i => i.id === itemId);
    if (!item) return;
    let key = `${shopId}_${itemId}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    if (item.can_buy && bought >= item.can_buy) return alert("ถึงจำนวนรอบสูงสุดแล้ว");
    if (item.daily_limit && bought >= item.daily_limit) return alert("ถึงจำนวนจำกัดรายวันแล้ว");
    let inv = window.inventoryEngine?.list() || [];
    let owned = inv.find(i => i.id === item.price_item)?.qty || 0;
    if (owned < item.price_amount) return alert("ทรัพยากรไม่เพียงพอ");
    // confirm popup
    let itemInfo = window.inventoryEngine.findItemById(item.item_id) || {};
    window.openPopup('confirmBuy', `
      <div style="text-align:center;">
        <img src="img/item/${itemInfo.img||'noimg.png'}" style="width:49px;margin-bottom:8px;">
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">${itemInfo.name || item.item_id}</div>
        <div style="margin-bottom:8px;">${item.desc || ''} <br> <b>x${item.amount}</b></div>
        <div style="color:gold;font-size:.98em;">ราคา ${item.price_amount} <img src="img/item/${item.price_item}.png" style="width:17px;vertical-align:middle" /> </div>
        <button onclick="confirmShopBuy('${shopId}','${item.id}')" class="primary-btn" style="margin:.7em 1em 0 1em;">ยืนยันซื้อ</button>
        <button onclick="closePopup()" class="secondary-btn" style="margin:.7em 0 0 0;">ยกเลิก</button>
      </div>
    `, 'small', 'ยืนยันสั่งซื้อ');
}

// ดำเนินการซื้อจริง
window.confirmShopBuy = function(shopId, itemId) {
    let shop = shopData.find(s => s.id === shopId);
    if (!shop) return;
    let item = shop.items.find(i => i.id === itemId);
    let key = `${shopId}_${itemId}_${getTodayStr()}`;
    let bought = purchaseHistory[key] || 0;
    if (item.can_buy && bought >= item.can_buy) return alert("ถึงจำนวนสูงสุดแล้ว");
    if (item.daily_limit && bought >= item.daily_limit) return alert("ถึงจำนวนจำกัดรายวันแล้ว");
    let inv = window.inventoryEngine?.list() || [];
    let own = inv.find(i => i.id === item.price_item);
    if (!own || own.qty < item.price_amount) return alert("ทรัพยากรไม่พอ");

    window.inventoryEngine.remove(item.price_item, item.price_amount);
    window.inventoryEngine.add(item.item_id, item.amount);
    purchaseHistory[key] = (bought || 0) + 1;
    saveShopHistory();
    closePopup('confirmBuy');
    // popup สรุป
    window.openPopup('shopResult', `
      <div style="text-align:center;color:#53fdc2;">
        <div style="font-size:1.15em;margin:11px 0;"><b>ซื้อสำเร็จ        !</b></div>
        <img src="img/item/${item.item_id}.png" style="width:47px;" />
        <div>ได้รับ <b>${window.inventoryEngine.findItemById(item.item_id)?.name || item.item_id} x${item.amount}</b></div>
        <div style="margin-top:13px;"><button class="primary-btn" onclick="closePopup();openShopPopup('${shopId}')">กลับหน้าร้าน</button></div>
      </div>
    `, 'small', 'ซื้อสำเร็จ');
}

// Helper: date string ต่อวัน
function getTodayStr() {
    let d = new Date();
    return d.getFullYear().toString() + (d.getMonth()+1).toString().padStart(2,"0") + d.getDate().toString().padStart(2,"0");
}

// Render shop item area live
function renderShopLiveUI(shopId) {
    // สามารถ refresh ปริมาณเงิน, จำนวนรอบในแต่ละปุ่มหลังซื้อได้ถ้าต้องการ
}

// Auto menu bind
document.addEventListener('DOMContentLoaded', () => {
    let btn = document.getElementById('btnShop');
    if (btn) btn.onclick = () => openShopPopup('main');
});

// Expose global
window.shopEngine = {
    open: openShopPopup,
    reload: loadShopData
};

เพิ่มไฟล์ js/reward.js
// js/reward.js

/**
 * RewardHandler สำหรับทุกระบบที่ต้องแจกของ (drop, quest, redeem, stage)
 * ใช้ร่วมกับ inventory.js, characterCollection.js
 */

window.rewardEngine = {
  /**
   * ให้รางวัลได้ทั้ง item/character/exp/gold ดูโครงสร้าง rewardObj:
   * rewardObj = [{type: "item"/"character"/"exp"/"gold", id: "item_id", qty: n}]
   */
  give: function (rewardObj = []) {
    if (!Array.isArray(rewardObj)) return;

    let htmlList = [];

    rewardObj.forEach(r => {
      if (r.type === "item") {
        window.addToInventory?.(r.id, r.qty || 1);
        htmlList.push(`<div>🎁 ได้รับ <b>${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</b></div>`);
      } else if (r.type === "character") {
        window.collectCharacter?.(r.id);
        htmlList.push(`<div>🎴 ตัวละคร <b style="color:#99d5ff">${r.id}</b> เข้าคลัง</div>`);
      } else if (r.type === "exp") {
        // +exp ตัวแรกใน team
        let t = JSON.parse(localStorage.getItem('userTeam') || "[]");
        if (t.length) {
          let cid = t[0];
          let cdata = JSON.parse(localStorage.getItem("char_" + cid) || '{}');
          cdata.exp = (cdata.exp || 0) + (r.qty || 1);
          localStorage.setItem("char_" + cid, JSON.stringify(cdata));
          htmlList.push(`<div>⭐ EXP +${r.qty} ให้ตัวแรกในทีม</div>`);
        }
      } else if (r.type === "gold") {
        window.addToInventory?.('gold', r.qty || 1);
        htmlList.push(`<div>💰 Gold +${r.qty}</div>`);
      }
    });

    // Immediate show popup (optional)
    if (htmlList.length) {
      window.openPopup('rewardResult',
        `<div style="text-align:center;color:#74fec9">${htmlList.join('')}
          <button class="primary-btn" style="margin-top:16px" onclick="closePopup()">ตกลง</button>
        </div>`, 'small', 'ได้รับรางวัล!'
      );
    }
  }
};

เพิ่มไฟล์ js/quest.js
// js/quest.js

/**
 * ระบบเควสต์รายวัน / สัปดาห์ / event, UI popup, เชื่อม inventory/reward
 * ข้อมูลหลักอยู่ที่ data/quest/<xxx>.json
 */

let questData = [];
let questProgress = {}; // ต่อ user

async function loadQuests() {
  questData = [];
  // สมมุติใช้ไฟล์เดียวรายวัน/สัปดาห์ก่อน
  let daily = await fetch('data/quest/daily.json').then(r => r.json()).catch(() => []);
  let weekly = await fetch('data/quest/weekly.json').then(r => r.json()).catch(() => []);
  questData = [...(daily.quests || []), ...(weekly.quests || [])];
  loadQuestProgress();
}
function loadQuestProgress() {
  try {
    questProgress = JSON.parse(localStorage.getItem('quest_progress') || '{}');
  } catch { questProgress = {}; }
}
function saveQuestProgress() {
  localStorage.setItem('quest_progress', JSON.stringify(questProgress));
}

async function openQuestPopup() {
  await loadQuests();
  loadQuestProgress();
  let html = questData.length
    ? questData.map(q => renderQuestCard(q)).join('')
    : `<div style="text-align:center;color:#ddd">ยังไม่มีเควสต์ในระบบ</div>`;
  window.openPopup('quest', `<div>${html}</div>
    <div style="margin-top:16px;text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>`, 'large', 'เควสต์');
}
function renderQuestCard(q) {
  let prog = questProgress[q.id] || { cur: 0, claimed: false };
  let done = prog.cur >= (q.target || 1);
  return `<div style="background:#1f302a;border-radius:11px;margin:8px 0;padding:12px 13px;color:${done ? '#adeb98' : '#fff'}">
    <b>${q.name}</b><br>
    <div style="color:#bde8ff">${q.desc || ''}</div>
    <div style="margin:7px 0">ความคืบหน้า: <b>${prog.cur || 0} / ${q.target || 1}</b> ${done ? '✅' : ''}</div>
    <div>รางวัล: ${q.reward.map(r => `<span>${r.type === "item" ? "🎁" : r.type === "character" ? "🎴" : "⭐"} ${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</span>`).join(' ')}</div>
    <button class="primary-btn" style="margin-top:8px" onclick="claimQuest('${q.id}')" ${!done || prog.claimed ? 'disabled' : ''}>รับรางวัล${prog.claimed ? 'แล้ว' : ''}</button>
  </div>`;
}
window.claimQuest = function (questId) {
  let q = questData.find(x => x.id === questId);
  if (!q) return;
  loadQuestProgress();
  let prog = questProgress[questId] || { cur: 0, claimed: false };
  if ((prog.cur || 0) >= q.target && !prog.claimed) {
    window.rewardEngine.give(q.reward);
    prog.claimed = true;
    questProgress[questId] = prog;
    saveQuestProgress();
    openQuestPopup();
  } else {
    alert("ยังทำเควสต์ไม่ครบ");
  }
}
// ฟังก์ชันเพิ่มความคืบหน้า: เรียกเมื่อระบบหลัก trigger
window.increaseQuestProgress = function (questId, amt = 1) {
  loadQuestProgress();
  let prog = questProgress[questId] || { cur: 0, claimed: false };
  prog.cur += amt;
  questProgress[questId] = prog;
  saveQuestProgress();
}

// Auto bind menu
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnQuest');
  if (btn) btn.onclick = openQuestPopup;
});
// export
window.questEngine = {
  open: openQuestPopup,
  reload: loadQuests,
  progress: questProgress,
  increment: window.increaseQuestProgress,
};

อัปเดตไฟล์ js/stage.js
// (ต่อจาก js/stage.js ด้านบน)
// ...
window.startStageBattle = async function (chapterId,zoneId,stageId) {
    // โหลด stage data
    let chapter = chapterData.find(ch => ch.id === chapterId);
    if(!chapter) return;
    let zone = chapter.zones.find(z => z.id === zoneId);
    if(!zone) return;
    let stage = zone.stages.find(s => s.id === stageId);
    if(!stage) return;

    // Check energy
    let energy = Number(localStorage.getItem("user_energy") || 0);
    if(energy < stage.require_energy){
        alert("Energy ไม่พอ!");
        return;
    }

    // ลด energy และ update UI energy
    energy -= stage.require_energy;
    localStorage.setItem("user_energy",energy);
    if (typeof renderEnergyBar === "function") renderEnergyBar();

    // Set up battle - simulate 1 wave (extendible)
    window.prepareBattleFromStage(stage);

    // Store currentStage state (เชื่อมต่อกับ battle/result)
    localStorage.setItem('current_stage_id', stage.id);
    localStorage.setItem('current_stage_zone', zone.id);
    localStorage.setItem('current_stage_chapter', chapter.id);

    closePopup();
    document.getElementById('mainBattlefield').classList.remove('hide');
    setTimeout(() => {
        if (window.battleEngine && window.battleEngine.startBattle) {
            window.battleEngine.startBattle();
        }
    }, 777);
};

// (เพิ่ม/แก้ไข) เมื่อจบด่าน ให้ update unlock stage & reward
window.hookStageBattleEnd = function(state) {
    // Call after battle win/lose popup
    // รับ state == "win"|"lose"
    let curStageId = localStorage.getItem('current_stage_id');
    if (state === 'win' && curStageId) {
        window.updateStageProgress(curStageId);
        // เพิ่ม exp/item/gold ตาม stage
        // (ดึง stage จาก chapterData)
        let chapterId = localStorage.getItem('current_stage_chapter');
        let zoneId = localStorage.getItem('current_stage_zone');
        let chapter = chapterData.find(c=>c.id===chapterId);
        let zone = chapter && chapter.zones.find(z=>z.id===zoneId);
        let stage = zone && zone.stages.find(s=>s.id===curStageId);
        if (stage && stage.drops && stage.drops.length) {
            // แจก drop
            let dropList = [];
            stage.drops.forEach(d => {
                if (Math.random()*100 < d.rate) {
                    let n = randInt(d.min,d.max);
                    dropList.push({type:'item',id:d.id,qty:n});
                }
            });
            window.rewardEngine?.give(dropList);
        }
        // แจก exp
        if(stage && stage.exp_reward) window.rewardEngine?.give([{type:'exp',qty:stage.exp_reward}]);
    }
    // unlock
    setTimeout(()=>{ openStageMapPopup(); }, 1000);
};

// (เรียกใน result.js รองรับการอัปเดต progress)
window.updateStageProgress = function(stageId) {
    loadStageProgress();
    stageProgress[stageId] = true;
    saveStageProgress();
};

// export (ต่อ)
window.stageEngine = Object.assign(window.stageEngine||{},{
  end: window.hookStageBattleEnd,
});

อัปเดต js/characterCollection.js
// js/characterCollection.js

/**
 * Epic Seven - Character Collection System (Frontend Only)
 * - Card grid, search, sort, filter, responsive, upgrade, rune
 * - Data driven by: localStorage char_collection & data/char/*.json
 * - Connect: upgrade.js, rune.js, team.js, popupManager.js
 * (c) 2024
 */

let charCollection = [];  // Owned character IDs
let charMeta = [];        // All char meta loaded
let filters = { text: '', star: 0, element: 'all', class: 'all' };

// ------------ 1. Load user collection from localStorage ------------
function loadCharCollection() {
    let arr = JSON.parse(localStorage.getItem('char_collection') || "[]");
    charCollection = arr.filter((id, idx) => arr.indexOf(id) === idx); // unique
}

// ------------ 2. Load meta data for all owned characters ------------
async function loadCharMeta() {
    await loadCharCollection();
    charMeta = await Promise.all(charCollection.map(async id => {
        try {
            let res = await fetch(`data/char/${id}.json`);
            return await res.json();
        } catch (e) { return null; }
    }));
    charMeta = charMeta.filter(c => !!c);
}

// ------------ 3. Render main UI grid ------------
function renderCharGrid() {
    let area = document.getElementById('characterArea');
    if (!area) return;
    let cs = charMeta.slice();
    if (filters.star > 0) cs = cs.filter(c => (c.star || 0) === Number(filters.star));
    if (filters.element !== 'all') cs = cs.filter(c => (c.element || "") === filters.element);
    if (filters.class !== 'all') cs = cs.filter(c => (c.class || "") === filters.class);
    if (filters.text.length) cs = cs.filter(c => c.name.toLowerCase().includes(filters.text.toLowerCase()));
    cs.sort((a, b) => (b.star || 0) - (a.star || 0) || (a.name.localeCompare(b.name)));
    let isMobile = window.innerWidth < 650;
    let html = `<div style="display:grid;grid-template-columns:repeat(${isMobile ? 3 : 6},1fr);gap:16px;">` +
        (cs.length ? cs.map(c => charCardBox(c)).join('') : '<div style="color:#fff;">ไม่มีตัวละคร</div>') +
        `</div>`;
    area.innerHTML = `
      <div style="display:flex;gap:10px;margin-bottom:10px;">
        <input id="charSearchBox" placeholder="ค้นหาชื่อ..." style="flex:1;max-width:180px;" value="${filters.text || ''}"/>
        <select id="starFilter"><option value="0">★ ทั้งหมด</option><option value="3">★3</option><option value="4">★4</option><option value="5">★5</option></select>
        <select id="eleFilter"><option value="all">ทุกธาตุ</option><option value="fire">🔥 ไฟ</option><option value="water">💧 น้ำ</option><option value="earth">🌱 ดิน</option><option value="dark">🌑 มืด</option><option value="light">🌟 แสง</option></select>
        <select id="classFilter"><option value="all">ทุกคลาส</option><option value="knight">อัศวิน</option><option value="warrior">นักรบ</option><option value="mage">จอมเวทย์</option><option value="ranger">เรนเจอร์</option><option value="assassin">แอสซาซิน</option><option value="monster">มอนสเตอร์</option></select>
      </div>
      ${html}
    `;
    document.getElementById('starFilter').value = filters.star;
    document.getElementById('eleFilter').value = filters.element;
    document.getElementById('classFilter').value = filters.class;
    document.getElementById('charSearchBox').oninput = ev => { filters.text = ev.target.value.trim(); renderCharGrid(); };
    document.getElementById('starFilter').onchange = ev => { filters.star = ev.target.value; renderCharGrid(); };
    document.getElementById('eleFilter').onchange = ev => { filters.element = ev.target.value; renderCharGrid(); };
    document.getElementById('classFilter').onchange = ev => { filters.class = ev.target.value; renderCharGrid(); };
}

// ------------ 4. Card box HTML ------------
function charCardBox(c) {
    let lock = isCharLocked(c.id);
    return `
      <div class="card" data-chrid="${c.id}" style="position:relative;">
        <img src="img/char/${c.img}" class="hero-img" alt="${c.name}" />
        <div class="name">${c.name}</div>
        <div style="font-size:.93em;color:#d9d;line-height:1.2em;">Lv. ${c.level || '-'} ★${c.star || '-'}</div>
        <div style="font-size:.89em;color:#cff;">ธาตุ: ${elIcon(c.element)} | ${classIcon(c.class)}</div>
        <div style="margin:6px 0;">
            <button class="primary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="showCharDetailPopup('${c.id}')">รายละเอียด</button>
            <button class="secondary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
            <button class="primary-btn" style="padding:3px 1em;font-size:.93em;" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
        </div>
        <button style="position:absolute;top:7px;right:14px;opacity:.8;background:none;border:0;color:#fa8;font-size:1.5em;outline:none;z-index:7"
            onclick="toggleCharLock('${c.id}');event.stopPropagation()" title="${lock ? 'ปลดล็อก' : 'ล็อก'}">
            ${lock ? '🔒' : '🔓'}
        </button>
      </div>`;
}
function elIcon(el) {
    return { fire: '🔥', water: '💧', earth: '🌱', dark: '🌑', light: '🌟' }[el] || '❔';
}
function classIcon(cls) {
    return { knight: '🛡️', warrior: '⚔️', mage: '🦉', ranger: '🏹', assassin: '🗡️', monster: '👾' }[cls] || '👽';
}

// ------------ 5. Lock/Unlock ------------
function isCharLocked(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    return ll.includes(chid);
}
function toggleCharLock(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    let idx = ll.indexOf(chid);
    if (idx >= 0) ll.splice(idx, 1); else ll.push(chid);
    localStorage.setItem('char_lock', JSON.stringify(ll));
    renderCharGrid();
}

// ------------ 6. Popup: Char Detail ------------
window.showCharDetailPopup = async function (charId) {
    let c = charMeta.find(c => c.id === charId);
    if (!c) return;
    let html = `
        <div style="display:flex;flex-direction:column;align-items:center;gap:7px;">
            <img src="img/char/${c.img}" class="hero-img" style="width:82px;margin:0 auto 9px auto;" />
            <div style="font-size:1.22em;font-weight:600">${c.name}</div>
            <div style="color:#b6deff;">Lv.${c.level || '-'} / ★${c.star||'-'} | ${elIcon(c.element)} ${classIcon(c.class)}</div>
            <hr style="width:86%;border:1px solid #234;" />
            <div>HP <b>${c.hp}</b> | ATK <b>${c.atk}</b> | DEF <b>${c.def}</b> | SPD <b>${c.spd}</b></div>
            <div>CRIT <b>${c.crit_rate}%</b> | CRIT DMG <b>${c.crit_dmg}%</b> | EFF <b>${c.effectiveness}%</b></div>
            <div>Skills: <ul>${(c.skills || []).map(s => `<li><b>${s.name}</b>: ${s.desc || ''}</li>`).join('')}</ul></div>
            <div style="margin-top:7px;">
                <button class="primary-btn" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
                <button class="primary-btn" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
                <button class="secondary-btn" onclick="closePopup()" style="margin-left:11px;">ปิด</button>
            </div>
        </div>`;
    window.openPopup('charDetail', html, 'large', c.name);
}

// ------------ 7. INIT [DOM Ready, bind menu] ------------
document.addEventListener('DOMContentLoaded', async () => {
    let btn = document.getElementById('btnCharacter');
    if (btn)
        btn.onclick = async () => {
            await loadCharMeta();
            renderCharGrid();
            window.openPopup('characterCollection', `<div id="characterArea"></div>`, 'large', 'คลังตัวละคร');
            renderCharGrid();
        };
});

// ให้ระบบอื่นเชื่อมต่อ (upgrade, rune)
window.characterEngine = {
    load: loadCharMeta,
    render: renderCharGrid
};

อัปเดตไฟล์ js/upgrade.js
// js/upgrade.js - Epic Seven Auto Battle - Upgrade System

let upgradeConfig = {};
let charUpgradeTarget = null;
let inventory = [];

/** Load upgrade config from /data/upgrade.json */
async function loadUpgradeConfig() {
  if (Object.keys(upgradeConfig).length) return;
  upgradeConfig = await fetch('data/upgrade.json').then(r => r.json());
}

/** Render Upgrade popup for a character */
async function openUpgradePopup(characterId) {
  await loadUpgradeConfig();
  await window.inventoryEngine.reloadAll();
  let char = JSON.parse(localStorage.getItem('char_' + characterId)
               || localStorage.getItem('char_' + characterId.replace('_', ''))
               || '{}');
  if (!char || !char.id) { alert("ไม่พบตัวละครนี้"); return; }
  charUpgradeTarget = char;
  let html = `
    <div style="display:flex;flex-direction:column;align-items:center;gap:10px;">
      <img src="img/char/${char.img}" style="width:72px;border-radius:15px;box-shadow:0 0 22px #1defeb66;">
      <div style="font-size:1.18em;font-weight:bold;">${char.name}</div>
      <div>Lv. <b>${char.level}</b> <span style="color:#ffe480;">★${char.star}</span>
          / <b>EXP</b> ${char.exp}/${char.exp_max || '?'}
      </div>
      <div style="color:#87c7ff;">HP <b>${char.hp}</b> | ATK <b>${char.atk}</b> | DEF <b>${char.def}</b> | SPD <b>${char.spd}</b></div>
      <hr style="width:88%; border:1px solid #234">
      <div style="display:flex;gap:12px;">
        <button class="primary-btn" onclick="doLevelUpChar('${char.id}')">เพิ่มเลเวล</button>
        <button class="primary-btn" onclick="doSkillUpChar('${char.id}')">อัปเกรดสกิล</button>
        <button class="primary-btn" onclick="doPromoteChar('${char.id}')">เลื่อนขั้น/เพิ่มดาว</button>
      </div>
      <button class="secondary-btn" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('upgradePopup', html, 'large', 'อัปเกรดตัวละคร');
}

/** Level Up (use exp_potion) */
window.doLevelUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let expItem = upgradeConfig.levelup.exp_item;
  let inv = window.inventoryEngine.list();
  let owned = inv.find(i => i.id === expItem);
  if (!owned || owned.qty <= 0) { alert("ไม่มี EXP Potion ในคลัง"); return; }
  let expAdd = 500;
  char.exp = (char.exp || 0) + expAdd;
  let lvled = false;
  while (char.exp >= (char.exp_max || 99999)) {
    char.exp -= char.exp_max;
    char.level = (char.level || 1) + 1;
    lvled = true;
  }
  if (lvled) alert("Level UP!");
  char.hp = Math.round(char.hp * 1.085);
  char.atk = Math.round(char.atk * 1.08);
  char.def = Math.round(char.def * 1.09);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(expItem, 1);
  openUpgradePopup(char.id);
};

/** Skill Up (use skill_book) */
window.doSkillUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let inv = window.inventoryEngine.list();
  let skillBookItem = upgradeConfig.skillup.item;
  let owned = inv.find(i => i.id === skillBookItem);
  if (!owned || owned.qty <= 0) { alert("ไม่มี Skill Book ในคลัง"); return; }
  let skills = char.skills || [];
  if (!skills.length) { alert("ไม่มีสกิลให้อัปเกรด"); return; }
  let idx = Math.floor(Math.random() * skills.length);
  let sk = skills[idx];
  if (sk.multiplier) sk.multiplier = +(sk.multiplier + upgradeConfig.skillup.increase_percent/100).toFixed(2);
  if (sk.cooldown && sk.cooldown > 1) sk.cooldown = Math.max(1, sk.cooldown - 1);
  char.skills[idx] = sk;
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(skillBookItem, 1);
  alert(`อัปเกรด Skill "${sk.name}" ให้แรงขึ้น!`);
  openUpgradePopup(char.id);
};

/** Promote: Increase Stars (use gold + material) */
window.doPromoteChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let starNext = (char.star || 1) + 1;
  let prom = upgradeConfig.promotion.requirements.find(r => r.star === char.star);
  if (!prom) { alert("ดาวสูงสุดแล้ว"); return; }
  let inv = window.inventoryEngine.list();
  let gold = inv.find(i => i.id === 'gold');
  if (!gold || gold.qty < prom.cost_gold) { alert("Gold ไม่พอ"); return; }
  let enough = prom.materials.every(mat =>
    inv.find(i => i.id === mat.id && i.qty >= mat.qty));
  if (!enough) { alert("วัตถุดิบไม่พอ"); return; }
  window.inventoryEngine.remove('gold', prom.cost_gold);
  prom.materials.forEach(mat => window.inventoryEngine.remove(mat.id, mat.qty));
  char.star = starNext;
  char.hp = Math.floor(char.hp * 1.20);
  char.atk = Math.floor(char.atk * 1.15);
  char.def = Math.floor(char.def * 1.12);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  alert("เลื่อนขั้นสำเร็จ! ดาวใหม่: " + char.star);
  openUpgradePopup(char.id);
};

// เชื่อมกับ characterCollection
document.addEventListener('DOMContentLoaded', () => {
  window.upgradeCharPopup = openUpgradePopup;
  let area = document.getElementById('characterArea');
  if (area) area.addEventListener('click', e => {
    let target = e.target.closest('[data-upgrade]');
    if (target) openUpgradePopup(target.dataset.upgrade);
  });
});

// Expose
window.upgradeEngine = {
  open: openUpgradePopup,
  reloadConfig: loadUpgradeConfig
};

อัปเดตไฟล์ js/rune.js
// js/rune.js

let runeData = [];
let runeSetBonuses = {};
let userRunes = [];    // ทุกรูนของ user (id, unlock, slot)
let equippedRunes = {}; // { char_id: [slot1, slot2, slot3, slot4] }
let currentCharEquip = null;

// โหลดข้อมูลรูนจาก data/rune.json
async function loadRuneData() {
  if (runeData.length) return;
  let arr = await fetch('data/rune.json').then(r => r.json());
  runeData = arr.filter(x => !x.set_bonuses);
  runeSetBonuses = arr.find(x => x.set_bonuses)?.set_bonuses || {};
}

// โหลดรูนของ user (จาก localStorage)
function loadUserRunes() {
  userRunes = JSON.parse(localStorage.getItem('user_runes') || "[]");
  equippedRunes = JSON.parse(localStorage.getItem('equipped_runes') || "{}");
}

// เซฟรูนกลับ localStorage
function saveUserRunes() {
  localStorage.setItem('user_runes', JSON.stringify(userRunes));
  localStorage.setItem('equipped_runes', JSON.stringify(equippedRunes));
}

// UI - render pop-up สวมใส่รูน
async function openRuneEquipPopup(char_id) {
  await loadRuneData(); loadUserRunes();
  currentCharEquip = char_id;
  let charRunes = equippedRunes[char_id] || [null, null, null, null];
  let runeSlotHtml = '';
  for (let slot = 1; slot <= 4; slot++) {
    let runeId = charRunes[slot - 1];
    let ru = runeData.find(r => r.id === runeId);
    runeSlotHtml += `<div style="border:1px solid #348ac9;border-radius:10px;padding:8px 7px;min-width:96px;min-height:65px;margin:3px 0;">
      <b>ช่อง ${slot}:</b> ${ru ?
        `<span title="${ru.name}" style="font-size:1.2em;vertical-align:middle;">${ru.icon ?? '🔸'}</span> 
        <span style="color:#7df;font-weight:600;">${ru.name}</span>
        <button class="secondary-btn" style="font-size:.96em;padding:.1em .8em;margin-left:4px;" onclick="unequipRune(${slot})">ถอน</button>
        <div style="font-size:0.88em;color:#acfc94;margin-top:4px;">${mainStatText(ru.main_stat)} ${ru.sub_stats.map(mainStatText).join(', ')}</div>`
        : `<span style="color:#888;">ว่าง</span>
          <button class="primary-btn" style="font-size:.9em;" onclick="showSelectRune(${slot})">+ เพิ่มรูน</button>`
      }
      </div>`;
  }
  const setBuffHtml = renderSetBonus(charRunes);
  const html = `
    <div style="display:flex;flex-direction:column;gap:7px;">
      <h3>รูนของตัวละครนี้</h3>
      ${runeSlotHtml}
      ${setBuffHtml}
      <button class="secondary-btn" onclick="closePopup()">บันทึกและปิด</button>
    </div>`;
  window.openPopup('runeEquip', html, 'large', 'สวมใส่รูน');
}

// Render set buff รวม (ถ้าเซ็ตครบ)
function renderSetBonus(runeIdArr) {
  let sets = {}, slots = {};
  runeIdArr.forEach(id => {
    let r = runeData.find(a => a.id === id);
    if (r) {
      sets[r.set] = (sets[r.set] || 0) + 1;
      slots[r.slot] = 1;
    }
  });
  let buffHtml = '';
  Object.keys(sets).forEach(set => {
    const cfg = runeSetBonuses[set];
    if (cfg && sets[set] >= cfg.slot_required) {
      buffHtml += `<div style="background:#22442b;margin:13px 0;padding:7px 9px;border-radius:7px;">
          <span style="font-size:1.16em;">${cfg.desc}</span> <b style="color:#66e0ca;">(ครบเซ็ต!)</b>
        </div>`;
    }
  });
  return buffHtml ? `<div style="margin-top:14px;">${buffHtml}</div>` : '';
}

// เลือกรูน
window.showSelectRune = function(slot) {
  let avai = userRunes.filter(r =>
    !Object.values(equippedRunes).flat().includes(r.rune_id) && runeData.find(x => x.id === r.rune_id)?.slot === slot);
  let html = avai.length
      ? avai.map(r => {
          let d = runeData.find(x => x.id === r.rune_id);
          return `<div style="display:flex;align-items:center;gap:9px;">
            <span style="font-size:1.3em;">${d.icon ?? '🔸'}</span>
            <b>${d.name}</b> <span style="font-size:0.93em;color:#d2ffee;">${mainStatText(d.main_stat)}</span>
            <button class="primary-btn" onclick="equipRuneSlot('${r.rune_id}',${slot})">ใส่</button>
          </div>`;
        }).join('<hr style="margin:2px 0;">')
      : `<div style="color:#fda;">ยังไม่มีรูนสำหรับช่องนี้</div>`;
  window.openPopup('selectRune', html, 'small', `เลือกรูน ช่อง ${slot}`);
};

// ข้อความหลักของ stat
function mainStatText(stat) {
  if (!stat) return "";
  const lib = { spd: 'SPD', atk_pct: 'ATK%', def: 'DEF', def_pct: 'DEF%', crit_pct: 'CRIT%', effectiveness: 'EFF' };
  return (lib[stat.type] || stat.type) + " +" + stat.val;
}

// ใส่รูนลง slot
window.equipRuneSlot = function(rune_id, slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = rune_id;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  closePopup('selectRune');
  openRuneEquipPopup(currentCharEquip);
};

// ถอนรูน
window.unequipRune = function(slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = null;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  openRuneEquipPopup(currentCharEquip);
};

// อัปเกรดรูน (mock)
window.upgradeRune = function(rune_id) {
  alert("= Demo = คุณอัปเลเวลรูน " + rune_id + " แล้ว (mock)");
};

window.runeEngine = {
  openEquipPopup: openRuneEquipPopup,
  getEquipped: function(char_id) { loadUserRunes(); return equippedRunes[char_id] || [null,null,null,null]; },
  getUserRunes: function() { loadUserRunes(); return userRunes; },
  addRune: function(rune_id) { userRunes.push({ rune_id }); saveUserRunes(); },
  removeRune: function(rune_id) { userRunes = userRunes.filter(r => r.rune_id !== rune_id); saveUserRunes(); }
};

// Hook DOM ในคลังตัวละคร (คลิกปุ่ม "ใส่รูน" ได้)
document.addEventListener('DOMContentLoaded', async () => {
  await loadRuneData(); loadUserRunes();
  if (document.getElementById('characterArea')) {
    document.getElementById('characterArea').addEventListener('click', e => {
      const btn = e.target.closest('[data-equiprune]');
      if (btn) openRuneEquipPopup(btn.getAttribute('data-equiprune'));
    });
  }
});

อัปเดตไฟล์ js/gacha.js
// js/gacha.js - ระบบสุ่มกาชา Epic Seven Clone Frontend

let gachaList = [];
let gachaUserLog = [];
let gachaPity = {}; // { gachaId: pityCount }

async function loadGachaData() {
    if (gachaList.length) return;
    const res = await fetch('data/gacha.json').then(r => r.json());
    gachaList = res.gachas;
}

function loadGachaUserLog() {
    gachaUserLog = JSON.parse(localStorage.getItem('gacha_user_log') || '[]');
    gachaPity = JSON.parse(localStorage.getItem('gacha_pity') || '{}');
}

function saveGachaLog() {
    localStorage.setItem('gacha_user_log', JSON.stringify(gachaUserLog));
    localStorage.setItem('gacha_pity', JSON.stringify(gachaPity));
}

async function openGachaPopup() {
    await loadGachaData(); loadGachaUserLog();
    let avai = gachaList.filter(g => g.enabled);
    if (!avai.length) {
        window.openPopup('gacha', `<div>ไม่พบกาชาที่เปิดใช้งาน</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'กาชา');
        return;
    }
    let html = avai.map(g => `
        <div style="background:#1b232e;padding:24px 1.5em;border-radius:18px;margin-bottom:24px;text-align:center;box-shadow:0 2px 18px #278ddf18;">
            <img src="img/gacha/${g.banner_img || 'noimg.png'}" style="width:100%;min-width:210px;max-width:330px;border-radius:9px;margin-bottom:7px;box-shadow:0 1px 40px #35cfff23;">
            <div style="font-size:1.14em;color:#7ffbfb;font-weight:600;margin-bottom:4px;">${g.name}</div>
            <div style="color:#aef;margin-bottom:1em;">${g.desc || ''}</div>
            <div style="font-size:.95em;margin-bottom:1em;"><b>ค่าใช้จ่าย: </b>
                <span style="color:goldenrod;font-weight:bold;">${g.cost.amount}</span> 
                <img src="img/item/${g.cost.item}.png" style="width:19px;vertical-align:middle" />
            </div>
            <div>
                <button class="primary-btn" onclick="gachaSummon('${g.id}',1)">สุ่ม 1 ครั้ง</button>
                <button class="primary-btn" onclick="gachaSummon('${g.id}',10)">สุ่ม 10 ครั้ง</button>
            </div>
            <div style="margin-top:18px;font-size:.9em;">
                <a href="#" onclick="openGachaLogPopup('${g.id}');return false;" style="color:#85deff;text-decoration:underline;">ดูประวัติการสุ่ม</a>
                ${g.pity?.enabled ? `<span style="margin-left:2em;color:#ffa;">Pity: ${gachaPity[g.id]||0}/${g.pity.max}</span>` : ''}
            </div>
        </div>
    `).join('');
    window.openPopup('gacha', html, 'large', 'กาชา');
}

// ฟังก์ชันสุ่ม gacha
window.gachaSummon = async function(gachaId, times = 1) {
    await loadGachaData(); loadGachaUserLog();
    let g = gachaList.find(x => x.id === gachaId); if (!g) return;

    // ตรวจสอบทรัพยากร
    let inv = window.inventoryEngine?.list() || [];
    let currency = inv?.find(i => i.id === g.cost.item);
    if (!currency || currency.qty < g.cost.amount * times) {
        alert(`คุณมี ${g.cost.item} ไม่เพียงพอ`);
        return;
    }

    // แปลง pool ให้สุ่มตามอัตรา
    let poolFlat = [];
    g.pool.forEach(entry => {
        for (let i = 0; i < entry.rate; i++) poolFlat.push(entry.char_id);
    });

    let got = [], pityFlag = false;
    for (let t = 0; t < times; t++) {
        let pity = (g.pity?.enabled ? gachaPity[g.id] || 0 : 0);
        let pick;
        // pity trigger
        if (g.pity?.enabled && g.pity.max && pity+1 >= g.pity.max) {
            pick = g.pool.find(c => c.rarity === g.pity.guarantee_rarity)?.char_id || poolFlat[0];
            gachaPity[g.id] = 0;
            pityFlag = true;
        } else {
            pick = poolFlat[Math.floor(Math.random() * poolFlat.length)];
            let card = g.pool.find(c => c.char_id === pick);
            if (g.pity?.enabled) {
                if(card && card.rarity === g.pity.guarantee_rarity) gachaPity[g.id] = 0;
                else gachaPity[g.id] = (gachaPity[g.id] || 0) + 1;
            }
        }
        got.push(pick);
        window.collectCharacter?.(pick);
        window.addGachaLog?.({
            gacha_id: g.id,
            char_id: pick,
            rarity: g.pool.find(c => c.char_id === pick)?.rarity || 3
        });
    }
    window.inventoryEngine.remove(g.cost.item, g.cost.amount * times);
    saveGachaLog();
    openGachaResult(g, got, pityFlag);
};

// เพิ่มตัวละครใหม่เข้า collection (หากยังไม่มี)
window.collectCharacter = function(charId) {
    let chars = JSON.parse(localStorage.getItem('char_collection') || '[]');
    if(!chars.includes(charId)) chars.push(charId);
    localStorage.setItem('char_collection', JSON.stringify(chars));
}

// แสดงผลสุ่มกาชา
function openGachaResult(gacha, resultArr, pityFlag) {
    let html = `<div style="text-align:center;">
        <div style="font-size:1.7em;margin-bottom:6px;">🎴 Gacha Result</div>
        <div style="color:#fcc;${pityFlag ? 'font-weight:bold;' : ''}">${pityFlag ? 'Pity Triggered! การันตีได้รับระดับสูงสุด!' : ''}</div>
        <div style="display:flex;justify-content:center;gap:13px;flex-wrap:wrap;margin-top:1em;">` +
        resultArr.map(cid => {
            let imgSrc = `img/char/${cid}.png`;
            return `<div style="background:#223352;border:2px solid #35aaffb7;border-radius:13px;padding:8px 12px;display:flex;flex-direction:column;align-items:center;min-width:93px;">
                <img src="${imgSrc}" style="width:58px;margin-bottom:8px;border-radius:10px;box-shadow:0 0 17px #27508080;" />
                <b style="color:#aef;">${cid}</b>
            </div>`;
        }).join('') +
        `</div>
        <div style="margin-top:18px;">
            <button class="primary-btn" onclick="closePopup();openGachaPopup();">กลับหน้ากาชา</button>
        </div>
    </div>`;
    window.openPopup('gachaResult', html, 'large', 'สุ่มกาชาสำเร็จ');
}

// ดูประวัติกาชา
window.openGachaLogPopup = function(gachaId) {
    loadGachaUserLog();
    let logs = gachaUserLog.filter(x => x.gacha_id === gachaId).slice(-30).reverse();
    let html = logs.length ? `<div style="max-height:300px;overflow-y:auto;"><table style="width:100%;">
        <tr style="color:#aae;"><th>#</th><th>เวลา</th><th>ผลสุ่ม</th><th>Rarity</th></tr>
        ${logs.map((l,i) => `<tr>
            <td>${i+1}</td>
            <td>${(new Date(l.time)).toLocaleString()}</td>
            <td>${l.char}</td>
            <td><span style="color:${l.rarity>=5?'gold':'#fff'};">★${l.rarity}</span></td>
        </tr>`).join('')}
        </table></div>` : `<div style="text-align:center">ยังไม่ได้สุ่มกาชา</div>`;
    window.openPopup('gachaLog'+gachaId, html, 'large', "ประวัติการสุ่มกาชา");
}

// auto bind ปุ่ม
document.addEventListener('DOMContentLoaded', () => {
    let btn = document.getElementById('btnGacha');
    if(btn) btn.onclick = openGachaPopup;
});

// สำหรับระบบ/แอดมิน
window.gachaEngine = {
    open: openGachaPopup,
    log: openGachaLogPopup,
    summon: window.gachaSummon
};

อัปเดตไฟล์ js/gachaLog.js
// js/gachaLog.js - Epic Seven Card System: Gacha Log ระบบล็อกประวัติการสุ่มกาชา

// Log: { user_id, time, gacha_id, char_id, rarity }
let gachaLogList = [];
let gachaLogLoaded = false;

// โหลด log กาชา (จาก localStorage หรือ data/gacha_log.json สำหรับ admin)
async function loadGachaLog() {
    if (gachaLogLoaded) return;
    try {
        gachaLogList = JSON.parse(localStorage.getItem('gacha_log') || '[]');
    } catch { gachaLogList = []; }

    // ถ้าเป็น admin สามารถโหลดทุก log จากไฟล์ (read-only)
    if (window.isAdmin && window.isAdmin()) {
        try {
            let allLog = await fetch('data/gacha_log.json').then(r => r.json());
            gachaLogList = allLog.logs || [];
        } catch { /* skip if unavailable */ }
    }
    gachaLogLoaded = true;
}

// เซฟ log ลง localStorage ผู้ใช้ (เก็บ 200 รายการล่าสุด)
function saveGachaLog() {
    localStorage.setItem('gacha_log', JSON.stringify(gachaLogList));
}

// เพิ่ม log ใหม่ (ทุกครั้งสุ่ม)
window.addGachaLog = function({ user_id, gacha_id, char_id, rarity }) {
    const entry = {
        user_id: user_id || (localStorage.getItem('user_id') || 'guest'),
        gacha_id,
        char_id,
        rarity,
        time: Date.now()
    };
    gachaLogList.push(entry);
    gachaLogList = gachaLogList.slice(-200);
    saveGachaLog();
};

// ดู log ย้อนหลังเฉพาะของ user ปัจจุบัน
window.queryMyGachaLog = async function(limit = 50) {
    await loadGachaLog();
    const user_id = localStorage.getItem('user_id') || 'guest';
    return gachaLogList.filter(l => l.user_id === user_id).slice(-limit).reverse();
};

// (Admin) ดู log ทุกคน
window.queryAllGachaLog = async function(limit = 1000) {
    await loadGachaLog();
    if (!window.isAdmin || !window.isAdmin()) {
        alert("ต้องเป็นแอดมินจึงจะดู log ทั้งหมดได้");
        return [];
    }
    return gachaLogList.slice(-limit).reverse();
};

// Render Popup แสดง log กาชา user
window.openMyGachaLogPopup = async function() {
    const log = await window.queryMyGachaLog(60);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">ประวัติการสุ่มกาชาล่าสุด</div>
        <div style="max-height:340px;overflow-y:auto;">
        <table style="background:#1a2637;width:99%;border-radius:13px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="5" style="color:#faa;text-align:center;">ยังไม่มีกาชา</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('gachaLog', html, 'large', "ประวัติสุ่มกาชา");
};

// (Admin) Render Log ทั้งหมด popup
window.openAdminAllGachaLogPopup = async function() {
    const log = await window.queryAllGachaLog(500);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">[ADMIN] ประวัติการสุ่มกาชาทุกผู้ใช้</div>
        <div style="max-height:370px;overflow-y:auto;">
        <table style="background:#19263a;width:99%;border-radius:8px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>User</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.user_id}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="6" style="color:#faa;">ไม่มี log</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('allGachaLog', html, 'large', "Gacha Log (ADMIN)");
};

// Auto menu: เพิ่มใน admin panel หรือเมนู profile
document.addEventListener('DOMContentLoaded', ()=>{
    if (document.getElementById('btnGachaLog')) {
        document.getElementById('btnGachaLog').onclick = window.openMyGachaLogPopup;
    }
});

// Export ให้ระบบอื่นเชื่อม
window.gachaLogEngine = {
    add: window.addGachaLog,
    mylog: window.queryMyGachaLog,
    all: window.queryAllGachaLog,
    open: window.openMyGachaLogPopup
};

อัปเดตไฟล์ js/chat.js
// js/chat.js
/*
  Epic Seven Card Auto Battle - Chat System
  - GM / Global / System / Player Chat
  - เก็บ chat.json + banned_words.json
  - Responsive, security filter, limited send rate
  - ใช้กับ popup UI
*/
let chatList = [];
let bannedWords = [];
let chatLastTime = 0;
const CHAT_LOG_MAX = 50;

// โหลด chat log (localStorage)
async function loadChat() {
  if (!chatList.length) {
    try {
      let arr = JSON.parse(localStorage.getItem('chat_log') || "[]");
      chatList = arr;
    } catch { chatList = []; }
  }
}
function saveChat() {
  let arr = chatList.slice(-CHAT_LOG_MAX);
  localStorage.setItem('chat_log', JSON.stringify(arr));
}

// โหลด banned words
async function loadBannedWords() {
  if (!bannedWords.length) {
    try {
      let arr = await fetch('data/banned_words.json').then(r=>r.json());
      bannedWords = arr;
    } catch { bannedWords = []; }
  }
}

// Render chat pop-up UI
async function openChatPopup() {
  await loadChat(); await loadBannedWords();
  renderChatListUI();
  let username = localStorage.getItem('user_name') || '';
  let html = `
    <div style="max-height:300px;overflow-y:auto;" id="chatAreaList"></div>
    <div style="margin-top:1.0em;display:flex;gap:7px;">
      <input id="chatInputBox" maxlength="90" placeholder="${username ? "พิมพ์ที่นี่..." : "กรุณาเข้าสู่ระบบ"}" style="flex:1;" ${username ? '' : 'disabled'}/>
      <button class="primary-btn" onclick="${username ? 'sendChatMsg()' : ''}" ${username ? '' : 'disabled'}>ส่ง</button>
    </div>
    <div style="font-size:.86em;color:#cae;margin-top:.3em;">จำกัด 1 ข้อความ/3 วิ · สูงสุด 90 ตัวอักษร</div>
    <button class="secondary-btn" style="margin-top:9px;" onclick="closePopup()">ปิด</button>
  `;
  window.openPopup('chat', html, 'tall', 'แชท Global');
  setTimeout(() => { let el=document.getElementById('chatInputBox'); if(el) el.focus(); }, 410);
  setInterval(renderChatListUI, 4000);
}

// Render ข้อความในแชท
function renderChatListUI() {
  let el = document.getElementById('chatAreaList'); if (!el) return;
  let arr = chatList.slice(-CHAT_LOG_MAX);
  el.innerHTML = arr.map(c =>
    `<div style="display:flex;align-items:center;gap:7px;margin-bottom:2px;">
      <span style="color:#77f;font-weight:600;font-size:.98em;">[${formatChatTime(c.time)}] ${escapeHTML(c.user)}:</span>
      <span style="font-size:.97em;">${escapeHTML(c.text)}</span>
      ${c.system ? ` <span style="color:#ef7;font-size:.89em;">[System]</span>` : ""}
    </div>`
  ).join('');
  el.scrollTop = el.scrollHeight;
}
function formatChatTime(ts) {
  let d = new Date(ts);
  return d.getHours().toString().padStart(2,"0")+":"+d.getMinutes().toString().padStart(2,"0");
}

// ส่งข้อความ
window.sendChatMsg = function() {
  let box = document.getElementById('chatInputBox'); if (!box) return;
  let txt = (box.value || "").trim();
  if (!txt) return;
  if (txt.length>90) return alert('ข้อความยาวเกิน 90 ตัว');
  let now = Date.now();
  // anti-spam
  if (now - chatLastTime < 3000) { alert("ต้องรอ 3 วินาที/ข้อความ"); return; }
  chatLastTime = now;
  let username = localStorage.getItem('user_name') || 'Guest';
  let test = txt.toLowerCase();
  if (bannedWords.some(w => test.includes(w))) { alert("ข้อความไม่เหมาะสม!"); return; }
  if (txt.match(/[<>]/)) { alert("ไม่อนุญาต HTML"); return; }
  chatList.push({ user: username, text: txt, time: now, system: false });
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  box.value = "";
  renderChatListUI();
  // Optional: Push noti dot (setMenuNoti)
  setMenuNoti && setMenuNoti('btnChat', true);
};
// เพิ่มระบบข้อความ System
window.addSystemChat = function(msg) {
  let now = Date.now();
  chatList.push({ user: "System", text: msg, time: now, system: true });
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  renderChatListUI();
  setMenuNoti && setMenuNoti('btnChat', true);
};
// Escape HTML
function escapeHTML(str) {
  return (str||"").replace(/[<>&"']/g, c =>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;',"'":'&#39;'}[c]));
}
// Auto mount ปุ่มแชทในเมนู
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnChat');
  if (btn) btn.onclick = openChatPopup;
});
// Export chatEngine
window.chatEngine = {
  open: openChatPopup,
  addSystem: window.addSystemChat,
  reloadWords: async()=>{bannedWords=[];await loadBannedWords();}
};

อัปเดตไฟล์ js/announcement.js
// js/announcement.js
let announcementList = [];
/** โหลดรายการ announcement */
async function loadAnnouncements() {
  if (announcementList.length) return;
  let raw = await fetch('data/announcement.json').then(r => r.json());
  announcementList = raw.announcements || [];
}
/** Render popup รวมประกาศในหมวดต่างๆ (รองรับ noti dot) */
async function openAnnouncementPopup() {
  await loadAnnouncements();
  let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
  // ปักหมุด/กลุ่ม
  let pin = announcementList.filter(a => a.pin && isAnnouncementAvailable(a));
  let normal = announcementList.filter(a => !a.pin && isAnnouncementAvailable(a));
  function groupBy(arr, key) { return arr.reduce((r, x) => ((r[x[key]]=r[x[key]]||[]).push(x),r),{});}
  let normalGrp = groupBy(normal, 'type');
  let tabTypes = ['all', ...Object.keys(normalGrp)];
  let activeType = 'all';
  let htmlTabs = tabTypes.map(type => 
    `<button class="primary-btn" style="margin-right:8px;font-weight:${type===activeType?'bold':'400'};" onclick="changeAnnouncementTab('${type}')">${type==='all'?'ทั้งหมด':typeTitle(type)}</button>`
  ).join('');
  let htmlPin = pin.length ? `<div style="margin-bottom:16px;">${pin.map(renderAnnounceCard).join('')}</div>` : '';
  let htmlList = normal.map(renderAnnounceCard).join('');
  let html = `
    <div>
      <div style="margin-bottom:13px;">${htmlTabs}</div>
      ${htmlPin}
      <div id="announceMainList">${htmlList}</div>
    </div>
    <div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>
  `;
  window.openPopup('announcement', html, 'large', 'ประกาศ');
  setMenuNoti('btnAnnouncement', hasUnreadAnnouncement());
}
function renderAnnounceCard(a, idx = 0) {
  let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
  let unread = !readIds.includes(a.id);
  let badge = a.type === 'patch' ? '🛠️ ' : a.type === 'event' ? '🎉 ' : a.type === 'reward' ? '🎁 ' :
              a.type === 'shop' ? '🛒 ' : a.type === 'system' ? '⚠️ ' : '';
  let pin = a.pin ? '<span style="color:#fdec60;font-size:1.1em;">📌</span>' : '';
  let statusDot = unread ? '<span style="display:inline-block;width:9px;height:9px;border-radius:7px;background:#ff6565;margin-left:6px;margin-bottom:1px;"></span>' : '';
  return `
    <div class="announce-card" style="background:#222d3d;border-radius:9px;margin-bottom:11px;padding:7px 13px 7px 13px;box-shadow:0 1px 16px #1470ad21;border:2px solid #174e8b42;cursor:pointer;transition:.14s;" onclick="viewAnnouncement('${a.id}')">
      <div style="font-size:1.02em;margin-bottom:1px;font-weight:bold;">
        ${pin} ${badge} <span>${a.title || '-'}</span> ${statusDot}
      </div>
      <div style="color:#9ad;font-size:.95em;">${a.show_time?formatTime(a.show_time):""} ${typeTitle(a.type)}</div>
      <div style="font-size:.93em;">
          ${a.short ? escapeHTML(a.short || '') : truncate(stripTags(a.content || ''), 71)}
      </div>
    </div>
  `;
}
/** ดูประกาศเต็ม */
window.viewAnnouncement = function (id) {
  let ann = announcementList.find(a => a.id === id);
  if (!ann) return;
  // Mark as read
  let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || '[]');
  if (!readIds.includes(ann.id)) {
    readIds.push(ann.id);
    localStorage.setItem('read_announcement_ids', JSON.stringify(readIds));
  }
  // action พิเศษ (force_popup, shop link, ... อื่นๆ)
  if (ann.force_popup) setTimeout(() => {}, 1);
  // Render detail
  let badge = ann.type === 'patch' ? '🛠️ ' : ann.type === 'event' ? '🎉 ' : ann.type === 'reward' ? '🎁 ' :
              ann.type === 'shop' ? '🛒 ' : ann.type === 'system' ? '⚠️ ' : '';
  let html = `
      <div style="font-size:1.19em;margin-bottom:.6em;">
          ${badge}<b>${escapeHTML(ann.title || '')}</b>
          ${ann.pin?'<span style="font-size:1.1em;color:#fdc900;">📌</span>':''}
      </div>
      <div style="color:#bce1ff;font-size:.97em;margin-bottom:4px;">
          หมวด: ${typeTitle(ann.type)} &nbsp; ${ann.show_time?formatTime(ann.show_time):""}
      </div>
      <div style="margin:9px 0 18px 0;white-space:pre-line;">${richText(ann.content||'')}</div>
      ${ann.link_url ? `<div><a href="${ann.link_url}" target="_blank" style="color:#3fa8ff;text-decoration:underline;">รายละเอียดเพิ่มเติม</a></div>` : ''}
      <div style="text-align:right;margin-top:1.1em;">
        <button class="secondary-btn" onclick="closePopup();openAnnouncementPopup();">กลับ</button>
      </div>
  `;
  window.openPopup('announceDetail', html, 'large', ann.title ? `${badge}${ann.title}` : "รายละเอียดประกาศ");
  setMenuNoti('btnAnnouncement', hasUnreadAnnouncement());
};
// UI helpers
function typeTitle(type) {
  return {
    'patch': 'Patch Note','event': 'กิจกรรม',
    'reward': 'ของรางวัล','shop': 'ร้านค้า/โปรโมชั่น',
    'system': 'แจ้งระบบ','general': 'ทั่วไป','inbox': 'ข้อความเฉพาะ'
  }[type] || type;
}
function stripTags(html) { return html.replace(/(<([^>]+)>)/gi, ""); }
function truncate(str, len) { return str.length<=len?str:str.substring(0, len-2)+"..."; }
function formatTime(ts) { if(!ts) return ""; let d=new Date(ts); return `${d.getDate()}/${d.getMonth()+1}/${d.getFullYear()}`; }
function escapeHTML(str) { return str.replace(/[<>"&]/g, c=>({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c])); }
function richText(str) { return escapeHTML(str).replace(/\n/g, '<br>').replace(/\*(.*?)\*/g, '<b>$1</b>'); }
/** ควรแสดง? (ตามเวลา, flag) */
function isAnnouncementAvailable(a) {
  const now = Date.now();
  if ((a.start_time && now < a.start_time) || (a.end_time && now > a.end_time)) return false;
  return a.enabled !== false;
}
/** มีประกาศใหม่ unread? */
function hasUnreadAnnouncement() {
  let readIds = JSON.parse(localStorage.getItem('read_announcement_ids') || "[]");
  return announcementList.some(a => isAnnouncementAvailable(a) && !readIds.includes(a.id));
}
/** Tab switch */
window.changeAnnouncementTab = function (type) {
  let list = announcementList.filter(a => isAnnouncementAvailable(a)
      && (type === 'all' || a.type === type));
  let htmlPin = list.filter(a=>a.pin).map(renderAnnounceCard).join('');
  let htmlList = list.filter(a=>!a.pin).map(renderAnnounceCard).join('');
  document.getElementById('announceMainList').innerHTML = htmlPin + htmlList;
};
// Auto bind main menu
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnAnnouncement');
  if (btn) btn.onclick = openAnnouncementPopup;
  if (hasUnreadAnnouncement()) setMenuNoti('btnAnnouncement', true);
});
// export
window.announcementEngine = {
  open: openAnnouncementPopup,
  getAll: () => announcementList,
  reload: async () => { announcementList = []; await loadAnnouncements(); }
};

อัปเดตไฟล์ js/redeem.js
// js/redeem.js
let redeemCodeList = [];
let userUsedRedeem = []; // [{code_id:..., redeemed_time:...}]
async function loadRedeemCodeList() {
  if (redeemCodeList.length) return;
  try {
    redeemCodeList = (await fetch('data/redeem.json').then(r=>r.json()))?.codes || [];
  } catch { redeemCodeList = []; }
  loadUserRedeemUsed();
}
function loadUserRedeemUsed() {
  userUsedRedeem = JSON.parse(localStorage.getItem('user_used_redeem') || '[]');
}
function saveUserRedeemUsed() {
  localStorage.setItem('user_used_redeem', JSON.stringify(userUsedRedeem));
}
// ป๊อปอัป "กรอกโค้ดรับรางวัล"
window.openRedeemPopup = function () {
  const html = `
    <div style="text-align:center;">
      <div style="font-size:1.16em;font-weight:600;margin-bottom:.88em;">🎁 กรอกโค้ดรับของรางวัล</div>
      <input id="redeemInputBox" placeholder="ใส่โค้ด (A-Z, 0-9)" style="width: 90%;" maxlength="32"/>
      <div style="margin:1.3em 0;"><button class="primary-btn" onclick="checkRedeemCode()">ยืนยันรับรางวัล</button></div>
      <div id="redeemResultHint" style="color:#ffc29a;font-size:.94em;margin-top:1em;"></div>
      <div style="color:#aee;margin-top:1.7em;font-size:.89em;">
        *โค้ด 1 คนใช้ได้ 1 ครั้ง, มีวันหมดอายุ, เฉพาะโค้ดที่ยังเปิดใช้งาน
      </div>
      <button class="secondary-btn" style="margin-top:2.2em;" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('redeem', html, 'small', 'กรอกโค้ด');
  setTimeout(() => document.getElementById('redeemInputBox')?.focus(), 100);
};
// validate and ให้รางวัล
window.checkRedeemCode = async function () {
  await loadRedeemCodeList();
  const box = document.getElementById('redeemInputBox');
  if (!box) return;
  let code = box.value.trim().toUpperCase();
  let hintEl = document.getElementById('redeemResultHint');
  hintEl.innerText = "";
  if (!code.match(/^[A-Z0-9\-\_]+$/)) return hintEl.innerText = "กรุณากรอกโค้ดที่ถูกต้อง (A-Z, 0-9)";
  let redeem = redeemCodeList.find(c => c.id === code && c.enabled !== false);
  const now = Date.now();
  if (!redeem)
    return hintEl.innerText = "❌ ไม่พบโค้ดนี้ หรือโค้ดถูกปิด/หมดอายุแล้ว";
  if (redeem.start_time && now < redeem.start_time)
    return hintEl.innerText = "❌ โค้ดยังไม่เปิดให้ใช้";
  if (redeem.end_time && now > redeem.end_time)
    return hintEl.innerText = "❌ โค้ดนี้หมดอายุแล้ว";
  if (redeem.max_usage && redeem.used_count >= redeem.max_usage)
        return hintEl.innerText = "❌ โค้ดนี้ถูกใช้เต็มจำนวนแล้ว";
  // per user
  loadUserRedeemUsed();
  if (userUsedRedeem.some(u => u.code_id === code)) {
    return hintEl.innerText = "❌ คุณใช้โค้ดนี้ไปแล้ว 1 ครั้ง";
  }
  // ตรวจไอดีผู้เล่น (ควรล็อกอินก่อน, แต่ถ้าไม่มีก็จำลอง)
  let curUserId = localStorage.getItem('user_id') || 'guest';
  // ให้รางวัล (เพิ่มเข้า inventory/character)
  const rewardHtml = [];
  if (redeem.reward && Array.isArray(redeem.reward)) {
    for (let r of redeem.reward) {
      if (r.type === 'item') {
        window.addToInventory?.(r.id, r.qty || 1);
        rewardHtml.push(`<div>🎁 ได้รับ <b>${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</b></div>`);
      } else if (r.type === 'character') {
        window.collectCharacter?.(r.id);
        rewardHtml.push(`<div>🎴 ได้รับตัวละคร <b style="color:#84bcff;">${r.id}</b></div>`);
      }
    }
  }
  // เซฟ userUsedRedeem
  userUsedRedeem.push({ code_id: code, time: now, user: curUserId });
  saveUserRedeemUsed();
  // (ฝั่ง admin/หลังบ้านจะต้องเพิ่ม used_count เองในไฟล์ json)
  // แสดง popup ผลลัพธ์
  window.openPopup('redeemSuccess', `
    <div style="text-align:center;">
      <div style="font-size:1.15em;font-weight:700;color:#56f7ca;margin-bottom:9px;">รับรางวัลสำเร็จ!</div>
      ${rewardHtml.join('')}
      <button class="primary-btn" style="margin-top:1.2em;" onclick="closePopup();">โอเค</button>
    </div>
  `, 'small', 'ได้รับของรางวัล');
};

// Auto bind ปุ่มเมนู (ID: btnRedeem)
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnRedeem');
  if (btn) btn.onclick = window.openRedeemPopup;
});

// Expose export
window.redeemEngine = {
  open: window.openRedeemPopup,
  check: window.checkRedeemCode,
  reload: async () => { redeemCodeList = []; await loadRedeemCodeList(); }
};

อัปเดตไฟล์ js/admin.js
// js/admin.js (ฉบับเต็มสำหรับ admin panel)

document.addEventListener('DOMContentLoaded', () => {
  // Guard: ต้องเป็นแอดมินเท่านั้น
  const isAdmin = localStorage.getItem("user_is_admin") === "1";
  const adminName = localStorage.getItem("user_name");
  if (!isAdmin) {
    alert("ต้องเป็นผู้ดูแลระบบเท่านั้น");
    window.location.href = "index.html";
    return;
  }
  document.getElementById('adminName').innerText = `👤 ${adminName}`;
  document.getElementById("btnLogout").onclick = function () {
    localStorage.removeItem("user_id");
    localStorage.removeItem("user_name");
    localStorage.removeItem("user_is_admin");
    window.location.href = "index.html";
  };

  // Menu event mapping
  {
    let mapping = {
      btnUserMgr:   renderUserMgr,
      btnCharMgr:   renderCharMgr,
      btnItemMgr:   renderItemMgr,
      btnRuneMgr:   renderRuneMgr,
      btnQuestMgr:  renderQuestMgr,
      btnGachaMgr:  renderGachaMgr,
      btnStageMgr:  renderStageMgr,
      btnShopMgr:   renderShopMgr,
      btnAnnounceMgr: renderAnnounceMgr,
      btnRedeemMgr: renderRedeemMgr,
      btnChatMod:   renderChatMgr
    };
    Object.entries(mapping).forEach(([btn, fn])=>{
      let el = document.getElementById(btn);
      if (el) el.onclick = fn;
    });
  }
  // Default
  renderUserMgr();
});

function setAdminMain(html) {
  document.getElementById("adminMainArea").innerHTML = html;
}

/* ==== 1) USER MANAGEMENT ==== */
async function renderUserMgr() {
  let res = await fetch('data/user.json').then(r=>r.json());
  let html = `<h2>จัดการผู้ใช้</h2>
    <table style="width:100%;background:#223247;border-radius:12px;">
      <tr style="color:#bfa;font-size:1.13em;"><th>ID</th><th>ชื่อ</th><th>Role</th><th>สถานะ</th><th>ควบคุม</th></tr>
      ${res.map(u=>
        `<tr>
          <td>${u.id}</td>
          <td>${u.name}</td>
          <td>${u.role}</td>
          <td><span style="color:${u.enabled?'#7fe':'#fad'};">${u.enabled?'✔️ ใช้งาน':'❌ ถูกปิด'}</span></td>
          <td>
            <button onclick="editUserPopup('${u.id}')" class="primary-btn" style="font-size:.95em;">แก้ไข</button>
            <button onclick="banUser('${u.id}')" class="secondary-btn" style="font-size:.93em;">แบนผู้ใช้</button>
          </td>
        </tr>`).join('')}
    </table>
    <div style="margin:16px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addUserPopup()">+ เพิ่มผู้ใช้</button>
    </div>`;
  setAdminMain(html);
}
window.renderUserMgr = renderUserMgr;
window.editUserPopup = function (uid) { alert("ฟอร์มแก้ไขผู้ใช้อยู่ระหว่างพัฒนา"); }
window.addUserPopup = function () { alert("ฟอร์มเพิ่มผู้ใช้ใหม่อยู่ระหว่างพัฒนา"); }
window.banUser = function (uid) { alert(`ระบบแบนผู้ใช้ "${uid}" อยู่ระหว่างพัฒนา (ในเวอร์ชัน local ต้องแก้ใน data/user.json โดยตรงหรือเชื่อมต่อ backend)`); };

/* ==== 2) CHAR MANAGEMENT ==== */
async function renderCharMgr() {
  // รายการทั้งหมดที่ปรากฏจริงควร query file .json หรือ list id ในระบบอัตโนมัติ
  let charIds = ['astra','slime_basic'];
  let all = await Promise.all(charIds.map(id=>fetch(`data/char/${id}.json`).then(r=>r.json())));
  let html = `<h2>จัดการตัวละคร (meta-json)</h2>
    <table style="width:100%;background:#2a3247;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>★</th><th>ธาตุ</th><th>class</th><th>สกิล</th><th>แก้ไข</th></tr>
      ${all.map(c=>
        `<tr>
         <td><img src="img/char/${c.img}" style="width:36px;border-radius:9px;" /></td>
         <td>${c.id}</td>
         <td>${c.name}</td>
         <td>${c.star}</td>
         <td>${c.element}</td>
         <td>${c.class}</td>
         <td>${(c.skills||[]).length}</td>
         <td><button onclick="editCharPopup('${c.id}')" class="primary-btn" style="font-size:.93em;">แก้ไข</button></td>
        </tr>`).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addCharPopup()">+ เพิ่มตัวละคร</button>
    </div>
    <div style="color:#aaa;padding:13px 0;">*การอัปเดตจะ Reflect เมื่อลงไฟล์ .json จริง (auto reload)</div>`;
  setAdminMain(html);
}
window.renderCharMgr = renderCharMgr;
window.editCharPopup = function (cid) { window.openPopup('editChar',`<div>ยังไม่รองรับ (โปรดแก้ json โดยตรง)</div>`,'small','แก้ไขตัวละคร'); }
window.addCharPopup = function () { window.openPopup('addChar',`<div>ยังไม่รองรับ (โปรดเขียน .json ใหม่ใน data/char/)</div>`,'small','เพิ่มตัวละคร'); }

/* ==== 3) ITEM MANAGEMENT ==== */
async function renderItemMgr() {
  let items = await fetch('data/item.json').then(r=>r.json());
  let html = `<h2>จัดการไอเท็ม</h2>
    <table style="width:100%;background:#273257;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>type</th><th>desc</th><th>ราคา</th></tr>
      ${items.map(it=>
        `<tr>
           <td><img src="img/item/${it.img||'noimg.png'}" style="width:32px" /></td>
           <td>${it.id}</td><td>${it.name}</td>
           <td>${it.type||'-'}</td><td>${it.description||'-'}</td>
           <td>${it.price}</td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="alert('เพิ่มไอเท็ม: โปรดเพิ่มที่ data/item.json')">+ เพิ่มไอเท็ม</button>
    </div>`;
  setAdminMain(html);
}
window.renderItemMgr = renderItemMgr;

/* ==== 4) RUNE ==== */
async function renderRuneMgr() {
  let runes = await fetch('data/rune.json').then(r=>r.json());
  let html = `<h2>จัดการรูน (rune.json)</h2>
    <table style="width:100%;background:#223549;border-radius:12px;">
      <tr><th>ICON</th><th>id</th><th>name</th><th>slot</th><th>main stat</th><th>set</th><th>sub</th></tr>
      ${runes.filter(r=>r.id).map(r=>
        `<tr>
         <td>${r.icon||'🔸'}</td>
         <td>${r.id}</td>
         <td>${r.name}</td>
         <td>${r.slot}</td>
         <td>${r.main_stat ? `${r.main_stat.type}+${r.main_stat.val}` : '-'}</td>
         <td>${r.set}</td>
         <td>${(r.sub_stats||[]).map(s=>`${s.type}+${s.val}`).join(', ')}</td>
        </tr>`).join('')}
    </table>
    <div style="text-align:right;margin-top:13px;">
      <button class="primary-btn" onclick="alert('เพิ่มรูน: โปรดเพิ่มใน data/rune.json')">+ เพิ่มรูน</button>
    </div>`;
  setAdminMain(html);
}
window.renderRuneMgr = renderRuneMgr;

/* ==== 5) QUEST ==== */
async function renderQuestMgr() {
  setAdminMain(`<h2>จัดการเควสต์ (โปรดแก้ไขที่ data/quest/*.json)</h2>
    <div>เควสต์/ภารกิจสามารถเพิ่มหรือแก้ไขได้ทันทีที่ไฟล์แล้ว reload เกม</div>
    <div style="margin:16px 0;"><button class="primary-btn" onclick="alert('รอเพิ่มหน้าเควสต์')">ตัวอย่าง</button></div>`);
}

/* ==== 6) GACHA ==== */
async function renderGachaMgr() {
  let gacha = await fetch('data/gacha.json').then(r=>r.json());
  let html = `<h2>จัดการกาชา (gacha.json)</h2>
      <table style="width:100%;background:#243168;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>เปิดใช้งาน</th><th>type</th><th>cost</th><th>pool</th><th>ควบคุม</th></tr>
      ${gacha.gachas.map(g=>
        `<tr>
         <td>${g.id}</td>
         <td>${g.name}</td>
         <td>${g.enabled ? "✔" : "❌"}</td>
         <td>${g.type}</td>
         <td>${g.cost.amount} ${g.cost.item}</td>
         <td>${g.pool.map(p=>`${p.char_id}(★${p.rarity})`).join(', ')}</td>
         <td><button onclick="alert('edit gacha: โปรดแก้ไขที่ data/gacha.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:11px;text-align:right;">
        <button onclick="alert('เพิ่มกาชา: โปรดแก้ไข data/gacha.json')" class="primary-btn">+ เพิ่มกาชา</button>
      </div>`;
  setAdminMain(html);
}
window.renderGachaMgr = renderGachaMgr;

/* ==== 7) STAGE/DUNGEON ==== */
async function renderStageMgr() {
  setAdminMain(`<h2>จัดการ Stage/Dungeon</h2>
  <div>แผนที่, Zone, Stage ทั้งหมด config ใน data/stage/*.json</div>`);
}

/* ==== 8) SHOP ==== */
async function renderShopMgr() {
  let shop = await fetch('data/shop.json').then(r=>r.json());
  let html = `<h2>จัดการร้านค้า</h2>
      <table style="width:100%;background:#223249;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>type</th><th>สถานะ</th><th>สินค้า</th></tr>
      ${shop.shops.map(s=>
        `<tr>
         <td>${s.id}</td>
         <td>${s.name}</td>
         <td>${s.type}</td>
         <td>${s.enabled ? "✔" : "❌"}</td>
         <td>${(s.items||[]).length} รายการ</td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:10px;text-align:right;">
        <button onclick="alert('update shop: โปรดแก้ไข data/shop.json')" class="primary-btn">+ เพิ่มร้านค้า/สินค้า</button>
      </div>`;
  setAdminMain(html);
}
window.renderShopMgr = renderShopMgr;

/* ==== 9) ANNOUNCEMENT ==== */
async function renderAnnounceMgr() {
  let ann = await fetch('data/announcement.json').then(r=>r.json());
  let html = `<h2>จัดการประกาศ</h2>
    <table style="width:100%;background:#142449;border-radius:10px;">
    <tr><th>id</th><th>title</th><th>pin</th><th>type</th><th>เวลา</th><th>แก้ไข</th></tr>
    ${ann.announcements.map(a=>
      `<tr>
        <td>${a.id}</td><td>${a.title}</td>
        <td>${a.pin?'✔':'❌'}</td>
        <td>${a.type}</td>
        <td>${a.show_time ? new Date(a.show_time).toLocaleString() : '-'}</td>
        <td><button onclick="alert('Announce: โปรดแก้ไขที่ data/announcement.json')" class="primary-btn" style="font-size:.96em;">แก้ไข</button></td>
      </tr>`
    ).join('')}
    </table>
    <div style="margin-top:10px;text-align:right">
     <button class="primary-btn" onclick="alert('เพิ่ม/ลบประกาศ: โปรดแก้ที่ announcement.json')">+ เพิ่มประกาศ</button>
    </div>
    <div style="color:#ead;padding:13px;">*ประกาศใหม่/ลบ ต้อง reload ไฟล์ announcement.json แล้วรีเฟรชเกม</div>`;
  setAdminMain(html);
}
window.renderAnnounceMgr = renderAnnounceMgr;

/* ==== 10) REDEEM CODE ==== */
async function renderRedeemMgr() {
  let rc = await fetch('data/redeem.json').then(r=>r.json());
  let html = `<h2>จัดการโค้ด (redeem)</h2>
    <table style="width:100%;background:#212d41;border-radius:12px;">
      <tr><th>id</th><th>desc</th><th>active</th><th>จำนวนที่ใช้</th><th>แก้ไข</th></tr>
      ${rc.codes.map(c=>
        `<tr>
         <td>${c.id}</td>
         <td>${c.desc}</td>
         <td>${c.enabled?'✔':'❌'}</td>
         <td>${c.used_count||0}/${c.max_usage||'-'}</td>
         <td><button onclick="alert('แก้ไขโค้ด: โปรดแก้ไขใน data/redeem.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin-top:11px;text-align:right;">
      <button onclick="alert('เพิ่มโค้ด: โปรดแก้ไข data/redeem.json โดยตรง')" class="primary-btn">+ เพิ่มโค้ด</button>
    </div>`;
  setAdminMain(html);
}
window.renderRedeemMgr = renderRedeemMgr;

/* ==== 11) CHAT MOD/PANEL ==== */
async function renderChatMgr() {
  // Load chat log, banned words
  let chat = [];
  try { chat = await fetch('data/chat.json').then(r=>r.json()); } catch { chat = []; }
  let banned = [];
  try { banned = await fetch('data/banned_words.json').then(r=>r.json()); } catch {banned = [];}
  let html = `<h2>ควบคุมแชท/ข้อความ</h2>
    <h3>บันทึกข้อความล่าสุด (${chat.length})</h3>
    <div style="max-height:210px;overflow-y:auto;">
      <table style="width:100%;background:#23236c;border-radius:11px;">
        <tr><th style="width:120px;">เวลา</th><th style="width:180px;">ผู้ใช้</th><th>ข้อความ</th><th>ควบคุม</th></tr>
        ${chat.slice(-50).reverse().map(c=>
          `<tr>
            <td>${c.time ? (new Date(c.time)).toLocaleTimeString() : '-'}</td>
            <td>${c.user}</td>
            <td>${escapeHTML(c.text)}</td>
            <td>
              <button class="secondary-btn" style="padding:.2em 1.2em;" onclick="alert('ลบข้อความนี้: แก้ chat.json')">ลบ</button>
            </td>
          </tr>`
        ).join('')}
      </table>
    </div>
    <h3>คำต้องห้าม (${banned.length})</h3>
    <div>
      <ul>
      ${banned.map(word=>`<li>${escapeHTML(word)} <button class="secondary-btn" onclick="alert('ลบคำต้องห้าม: โปรดแก้ banned_words.json โดยตรง')">ลบ</button></li>`).join('')}
      </ul>
      <button class="primary-btn" onclick="alert('เพิ่มคำต้องห้าม: โปรดเพิ่มใน banned_words.json')">+ เพิ่มคำต้องห้าม</button>
    </div>
    <div style="color:#98ffe7;margin:11px 0 0 0;">* ต้องอัปเดตไฟล์ JSON และรีเฟรชจึงจะมีผล</div>`;
  setAdminMain(html);
}
window.renderChatMgr = renderChatMgr;

// Utility for safe display in table
function escapeHTML(str) {
  return (str || "").replace(/[<>&"]/g, c=>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c]));
}


เช็คให้ทีว่า ต่อสู้เสร็จแล้ว มีป๊อปอัพได้รับรางวัล ปุ่น กลับสู่หน้าหลัก อยู่ไฟล์ไหน ที่ทำหน้าที่นี้