สรุปโครงสร้าง โปรเจคเกม ต้นแบบของเกมนี้จะอ้างอิงข้อมูลทุกส่วนของเกม summonner war และ อีปิกเซเว่น 
สร้างบน html โดยเป็นฉบับการ์ดตัวละครต่อสู้(รูปภาพจะนำมาหาใส่ทีหลังโค้ดทุกระบบสมบูณแล้ว)
จะต้องสร้างรองการเล่นได้ทั้งมือถือและบนคอมพิวเตอร์
คุณจะต้องเป็นคนเขียนโค้ดเองทั้งหมดทุกระบบขอเป็นฉบับเต็มและสามารถเชื่อมต่อกับไฟล์อื่นได้ในอนาคต
หากในการส่งข้อความแต่ละส่วนของคุณไม่สามารถส่งหมดได้ในข้อความเดี่ยวกันให้ทำการแยกไฟล์เป็นพาร์ทเช่น 2.1, 2.2, 2.3 เป็นต้น แล้วเชื่อมต่อเนื้อหากัน
รูปแบบไฟล์ทั้งหมดของเกมนี้
/ (root)
├── index.html                              (หน้า Home/Main)
├── app.js                                 (Main logic/Router)
├── styles/
│   └── main.css
├── assets/                                (รูป ตัวละคร, ไอคอน อื่น ๆ)
│   └── images/
├── data/
│   ├── characters.json                     (ข้อมูลตัวละคร)
│   ├── equipment.json
│   ├── stages.json
│   └── gacha.json
├── components/                            (UI Components)
│   ├── TeamBuilder.js
│   ├── Gacha.js
│   ├── Upgrade.js
│   ├── Equipment.js
│   └── ... (อื่น ๆ)
├── battle/
│   └── engine.js                          (battle logic)
├── arena/
│   └── arena.js                           (mock PvP logic)
├── shop/
│   └── shop.js
├── quests/
│   └── quests.js
├── friend/
│   └── friend.js
├── event/
│   └── event.js
├── admin/
│   ├── login.html
│   ├── dashboard.html
│   └── admin.js
└── README.md
การส่งโค้ดฉบับเต็ม จะต้องส่งทีละหัวข้อตามข้อมูลด้านล่างนี้ เรียงจาก 1 ไปถึง 11
บรรทัดสุดท้ายที่ต่อจากหัวข้อที่ 11 จะเป็นการรายงานว่าเริ่มสร้างไปถึงไหนแล้วโดยคุณเป็นคนเขียนสรุปมาเพื่อใส่ในรายงานนี้ให้เข้าใจและสามารถส่งเนื้อหาไปแชทใหม่ได้
1. Team Building- ผู้เล่นสามารถเลือกทีม 4 ตัวละคร  ตัวละคร/ศัตรูมี stat, อาชีพ, ธาตุ, skill, เลเวล, upgradable
2. Gacha / Recruit- ระบบสุ่มตัวละครจากกาชา ไม่ซ้ำเดิม ตัวละครใหม่ค่อยๆ เพิ่มใน pool
3. Upgrade System- ใช้ point (หรือวัตถุดิบ) เพื่ออัป HP/Atk/Stat, มี UI รองรับ, upgrade level scaling
4. Equipment- ตัวละครมีช่องอุปกรณ์, สามารถ equip/un-equip ได้ อุปกรณ์แต่ละชิ้นเสริม stat/element
5. Stage/Adventure- ผจญภัยประกอบด้วย world, แต่ละ world มี sub-stage มีรางวัล/มอนสเตอร์/บอส
6. Battle Engine- Auto Battle สลับเทิร์น Team vs. Enemy  สกิล, Buff/Debuff, Heal, Burn, Stun  ชัยชนะ/แพ้/เสมอ
7. Arena (PVP)- ระบบอารีน่า Mock PVP, เลือก rival สำเร็จ มีการนับสถิติ, ของรางวัล
8. Quests/Missions- เควสหลัก, side, daily, มีระบบตรวจสอบสำเร็จ/รับรางวัล
9. Shop- ร้านค้าสำหรับซื้อของด้วย gold มีการจำกัดจำนวนสินค้า/วัน
10. Friend/Event/UI- รายชื่อเพื่อน, event login reward, ประกาศ, notification, settings
11. ระบบหลังบ้านที่จะเอาไว้แก้ไขตัวเกมและค่าต่างๆขอทุกหัวข้อทำเป็นแยกไปอีกหน้าโดยจะต้องมีรหัสแอดมินถึงจะเข้าถึงได้

รายงาน อัปเดตความคืบหน้าเรียงลำดับไปจนถึงล่าสุด
สร้างไฟล์ characters.json, TeamBuilder.js, main.css, index.html โดยเนื้อหาโค้ดมีดังนี้
characters.json, gacha.json, Gacha.js, Upgrade.js, equipment.json, Equipment.js, stages.json, Adventure.js, engine.js, BattleUI.js, arena.js, quests.json, Quests.js, shop.json, Shop.js, FriendEventUI.js, 
[
  {
    "id": "char001",
    "name": "Aria",
    "job": "Mage",
    "element": "Water",
    "level": 1,
    "rarity": 4,
    "stats": {
      "hp": 3200,
      "atk": 420,
      "def": 220,
      "spd": 103
    },
    "skills": ["Ice Spear", "Freeze", "Mana Bless"]
  },
  {
    "id": "char002",
    "name": "Leon",
    "job": "Warrior",
    "element": "Fire",
    "level": 1,
    "rarity": 5,
    "stats": {
      "hp": 3800,
      "atk": 500,
      "def": 280,
      "spd": 99
    },
    "skills": ["Sword Slash", "Burning Blade", "Courage"]
  },
  {
    "id": "char003",
    "name": "Lina",
    "job": "Healer",
    "element": "Light",
    "level": 1,
    "rarity": 4,
    "stats": {
      "hp": 3500,
      "atk": 260,
      "def": 240,
      "spd": 110
    },
    "skills": ["Healing Light", "Purify", "Hope"]
  },
  {
    "id": "char004",
    "name": "Grok",
    "job": "Tank",
    "element": "Earth",
    "level": 1,
    "rarity": 3,
    "stats": {
      "hp": 4400,
      "atk": 210,
      "def": 390,
      "spd": 82
    },
    "skills": ["Shield Slam", "Fortify", "Earthquake"]
  },
  {
    "id": "char005",
    "name": "Neri",
    "job": "Assassin",
    "element": "Dark",
    "level": 1,
    "rarity": 5,
    "stats": {
      "hp": 2700,
      "atk": 560,
      "def": 170,
      "spd": 115
    },
    "skills": ["Shadow Hit", "Silent Step", "Fatal Blow"]
  },
  {
    "id": "char006",
    "name": "Vera",
    "job": "Support",
    "element": "Wind",
    "level": 1,
    "rarity": 3,
    "stats": {
      "hp": 3100,
      "atk": 230,
      "def": 220,
      "spd": 105
    },
    "skills": ["Speed Up", "Wind Shield", "Team Spirit"]
  },
  {
    "id": "char007",
    "name": "Orin",
    "job": "Mage",
    "element": "Fire",
    "level": 1,
    "rarity": 4,
    "stats": {
      "hp": 3000,
      "atk": 440,
      "def": 210,
      "spd": 104
    },
    "skills": ["Fire Bolt", "Explosion", "Flame Aura"]
  },
  {
    "id": "char008",
    "name": "Mythra",
    "job": "Healer",
    "element": "Water",
    "level": 1,
    "rarity": 5,
    "stats": {
      "hp": 3900,
      "atk": 270,
      "def": 260,
      "spd": 113
    },
    "skills": ["Healing Wave", "Bless", "Water Guard"]
  }
]

// End characters.json

ไฟล์ TeamBuilder.js
// แสดงรายชื่อตัวละคร เลือก/ถอดเข้าออกทีม (สูงสุด 4 ตัว)

let selectedTeam = [];
let allCharacters = [];
let teamAllCharacters = [];

async function fetchCharacters() {
  const res = await fetch('./data/characters.json');
  allCharacters = await res.json();
  renderCharacterList();
  renderTeam();
}

// สร้าง UI รายการตัวละคร
function renderCharacterList() {
    const listDiv = document.getElementById('character-list');
    listDiv.innerHTML = '';
    allCharacters.forEach(char => {
        const isSelected = selectedTeam.find(c => c.id === char.id);
        const card = document.createElement('div');
        card.className = `character-card ${isSelected ? 'selected' : ''}`;
        card.innerHTML = `
      <h4>${char.name} (${char.job} / ${char.element})</h4>
      <p>Lv.${char.level} ★${char.rarity}</p>
      <ul>
        <li>HP: ${char.stats.hp}</li>
        <li>ATK: ${char.stats.atk}</li>
        <li>DEF: ${char.stats.def}</li>
        <li>SPD: ${char.stats.spd}</li>
      </ul>
      <button
  onclick="toggleTeam('${char.id}')"
  ${!isSelected && selectedTeam.length >= 4 ? "disabled" : ""}
>
  ${isSelected ? 'ถอดออกจากทีม' : (selectedTeam.length < 4 ? 'เลือกเข้าทีม' : 'ทีมครบ')}
</button>
    `;
        listDiv.appendChild(card);
    });
}

// สลับเลือก/ถอดสมาชิกในทีม
function toggleTeam(id) {
  const idx = selectedTeam.findIndex(c => c.id === id);
  if (idx !== -1) {
    selectedTeam.splice(idx, 1);
  } else if (selectedTeam.length < 4) {
    const found = allCharacters.find(c => c.id === id);
    if (found) selectedTeam.push(found);
  }
  renderCharacterList();
  renderTeam();
}

// แสดงทีมที่เลือกอยู่
function renderTeam() {
  const teamDiv = document.getElementById('team-selected');
  teamDiv.innerHTML = '<h3>ทีมของคุณ</h3>';
  if (selectedTeam.length === 0) {
    teamDiv.innerHTML += '<p>ยังไม่ได้เลือกตัวละครในทีม</p>';
    return;
  }
  selectedTeam.forEach((char, i) => {
    teamDiv.innerHTML += `
      <div class="team-member">
        <strong>#${i+1} ${char.name}</strong> (${char.job}/${char.element}) Lv.${char.level}<br>
        <span>HP:${char.stats.hp} ATK:${char.stats.atk} DEF:${char.stats.def} SPD:${char.stats.spd}</span>
      </div>
    `;
  });
}

// โหลดตอน Page ready
window.onload = fetchCharacters;
window.toggleTeam = toggleTeam;
window.selectedTeam = selectedTeam;
window.allCharacters = allCharacters;

// End TeamBuilder.js

main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
</body>
</html>

gacha.json
{
  "gacha_pool": [
    {
      "character_id": "char001",
      "weight": 100
    },
    {
      "character_id": "char002",
      "weight": 50
    },
    {
      "character_id": "char003",
      "weight": 100
    },
    {
      "character_id": "char004",
      "weight": 120
    },
    {
      "character_id": "char005",
      "weight": 30
    },
    {
      "character_id": "char006",
      "weight": 120
    },
    {
      "character_id": "char007",
      "weight": 90
    },
    {
      "character_id": "char008",
      "weight": 30
    }
  ],
  "gacha_cost": 1000
}

Gacha.js
// Gacha.js - ระบบสุ่มกาชาตัวละคร

let userCharacters = []; // รหัสตัวละครที่ผู้เล่นมี
let gachaPool = [];
let gachaAllCharacters = [];
let gachaCost = 0;
let userGold = 5000; // ทดสอบ เริ่มต้น

async function initGacha() {
  let [gachaRes, charRes] = await Promise.all([
    fetch('./data/gacha.json'),
    fetch('./data/characters.json')
  ]);
  let gachaData = await gachaRes.json();
  allCharacters = await charRes.json();
  gachaPool = gachaData.gacha_pool;
  gachaCost = gachaData.gacha_cost;
  renderGachaUI();
}

function renderGachaUI() {
  const gachaDiv = document.getElementById('gacha-root');
  gachaDiv.innerHTML = `
    <div class='gacha-box'>
      <h2>Gacha / Recruit</h2>
      <div>Gold ของคุณ: <span id="user-gold">${userGold}</span></div>
      <button onclick="rollGacha()" ${userGold < gachaCost ? 'disabled' : ''}>สุ่มตัวละคร (${gachaCost} Gold)</button>
      <div id="gacha-result"></div>
      <h3>ตัวละครที่คุณมี</h3>
      <div id="user-characters"></div>
    </div>
  `;
  renderUserCharacters();
}

function rollGacha() {
  if (userGold < gachaCost) {
    alert("Gold ไม่พอ");
    return;
  }
  // สร้าง pool ที่ยังไม่ได้ จาก userCharacters
  let available = gachaPool.filter(
    g => !userCharacters.includes(g.character_id)
  );
  if (available.length === 0) {
    document.getElementById('gacha-result').innerHTML = "<p>คุณมีตัวละครครบทุกตัวแล้ว!</p>";
    return;
  }
  let sum = available.reduce((acc, curr) => acc + curr.weight, 0);
  let rand = Math.random() * sum;
  let acc = 0;
  let selectedId = null;
  for (let entry of available) {
    acc += entry.weight;
    if (rand <= acc) {
      selectedId = entry.character_id;
      break;
    }
  }
  userGold -= gachaCost;
  userCharacters.push(selectedId);
  let charInfo = allCharacters.find(c => c.id === selectedId);
  document.getElementById('user-gold').textContent = userGold;
  document.getElementById('gacha-result').innerHTML = `
    <div class="gacha-result-card">
      <strong>สุ่มได้:</strong> ${charInfo.name} <br/>
      (${charInfo.job} / ${charInfo.element}) ★${charInfo.rarity}
    </div>`;
  renderUserCharacters();
  if (userCharacters.length === gachaPool.length)
    document.getElementById('gacha-result').innerHTML += "<p>คุณมีตัวละครครบทุกตัวแล้ว!</p>";
}

function renderUserCharacters() {
  const div = document.getElementById('user-characters');
  if (userCharacters.length === 0) {
    div.innerHTML = '<em>ยังไม่มีตัวละคร</em>';
    return;
  }
  div.innerHTML = "";
  userCharacters.forEach(id => {
    let char = allCharacters.find(c => c.id === id);
    div.innerHTML += `
      <div class="character-card">
        <h4>${char.name} (${char.job} / ${char.element})</h4>
        <p>★${char.rarity} | Lv.${char.level}</p>
      </div>
    `;
  });
}

// สำหรับโหลด script
window.initGacha = initGacha;
window.rollGacha = rollGacha;

// End Gacha.js

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>

  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>

</body>

</html>

ไฟล์ Upgrade.js
let upgradePoints = 15; // สมมติเริ่มต้นมี point สำหรับอัปเกรด

let upgradeCharacters = []; // ตัวที่ผู้เล่นมี (นำจาก gacha หรือ mock array)
let charactersData = [];

// === ฟังก์ชันหลัก: sync stat ไป allCharacters & selectedTeam ทุกครั้งที่ upgrade ===
function setCharacterStatGlobal(charId, newStats, newLv) {
  // sync ไป allCharacters (ใช้แสดง "ตัวละครทั้งหมด/เลือกทีม/TeamBuilder")
  if (window.allCharacters && Array.isArray(window.allCharacters)) {
    for (let x of window.allCharacters) {
      if (x.id === charId) {
        Object.assign(x.stats, newStats);
        if (newLv !== undefined) x.level = newLv;
      }
    }
  }
  // sync ไป selectedTeam (ทีมผู้เล่นปัจจุบัน)
  if (window.selectedTeam && Array.isArray(window.selectedTeam)) {
    for (let x of window.selectedTeam) {
      if (x.id === charId) {
        Object.assign(x.stats, newStats);
        if (newLv !== undefined) x.level = newLv;
      }
    }
  }
}

// โหลดและเตรียมข้อมูลตัวละคร
async function initUpgrade() {
  const res = await fetch('./data/characters.json');
  charactersData = await res.json();
  // สมมติว่าผู้เล่นมี 4 ตัวแรก (หรือสามารถเปลี่ยนเป็น userCharacters จริงได้)
  upgradeCharacters = charactersData.slice(0, 4);
  renderUpgradeUI();
}

function renderUpgradeUI() {
  const upgradeDiv = document.getElementById('upgrade-root');
  upgradeDiv.innerHTML = `
    <div class="upgrade-box">
      <h2>Upgrade Character</h2>
      <div>Points ที่เหลือ: <span id="upgrade-points">${upgradePoints}</span></div>
      <div class="upgrade-char-list">
        ${upgradeCharacters.map((char, i) => `
          <div class="upgrade-char-card">
            <h4>${char.name} (${char.job} / ${char.element})</h4>
            <ul>
              <li>HP: <span id="stat-hp-${i}">${char.stats.hp}</span> 
                <button onclick="upgradeStat(${i}, 'hp')" ${upgradePoints <= 0 ? 'disabled' : ''}>+10</button>
              </li>
              <li>ATK: <span id="stat-atk-${i}">${char.stats.atk}</span>
                <button onclick="upgradeStat(${i}, 'atk')" ${upgradePoints <= 0 ? 'disabled' : ''}>+2</button>
              </li>
              <li>DEF: <span id="stat-def-${i}">${char.stats.def}</span>
                <button onclick="upgradeStat(${i}, 'def')" ${upgradePoints <= 0 ? 'disabled' : ''}>+2</button>
              </li>
              <li>SPD: <span id="stat-spd-${i}">${char.stats.spd}</span>
                <button onclick="upgradeStat(${i}, 'spd')" ${upgradePoints <= 0 ? 'disabled' : ''}>+1</button>
              </li>
            </ul>
            <p>Level: <span id="char-lv-${i}">${char.level}</span>
              <button onclick="upgradeLevel(${i})" ${upgradePoints <= 0 ? 'disabled' : ''}>+1</button>
            </p>
          </div>
        `).join('')}
      </div>
    </div>
  `;
}

function upgradeStat(idx, stat) {
  if (upgradePoints <= 0) return;
  upgradePoints -= 1;
  let char = upgradeCharacters[idx];
  // Scale อัป stat/level: ท้าทายขึ้นทุกครั้ง
  let scale = 1 + 0.05 * (char.level - 1); // สูงขึ้นนิดหน่อยเวลสูง
  switch (stat) {
    case 'hp': char.stats.hp += Math.round(10 * scale); break;
    case 'atk': char.stats.atk += Math.round(2 * scale); break;
    case 'def': char.stats.def += Math.round(2 * scale); break;
    case 'spd': char.stats.spd += 1; break;
  }
  setCharacterStatGlobal(char.id, char.stats, char.level); // sync stat ทั้งหมด
  // refresh UI team/characterList
  if (window.renderCharacterList) window.renderCharacterList();
  if (window.renderTeam) window.renderTeam();
  renderUpgradeUI();
}

function upgradeLevel(idx) {
  if (upgradePoints <= 0) return;
  upgradePoints -= 2; // ใช้ point เพิ่ม
  let char = upgradeCharacters[idx];
  char.level += 1;
  // Option: เติม stat นิด ๆ auto เมื่อเลเวลอัพ
  char.stats.hp += 15;
  char.stats.atk += 3;
  char.stats.def += 3;
  char.stats.spd += 1;
  setCharacterStatGlobal(char.id, char.stats, char.level); // sync stat ทั้งหมด
  if (window.renderCharacterList) window.renderCharacterList();
  if (window.renderTeam) window.renderTeam();
  renderUpgradeUI();
}

// export ให้หน้า html ใช้งาน
window.initUpgrade = initUpgrade;
window.upgradeStat = upgradeStat;
window.upgradeLevel = upgradeLevel;

// End Upgrade.js

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>

<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>

  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>

</body>

</html>

ไฟล์ equipment.json
[
  {
    "id": "equip001",
    "name": "Ancient Sword",
    "type": "Weapon",
    "element": "Fire",
    "bonus": {
      "atk": 30
    },
    "description": "ดาบโบราณเพิ่มโจมตีและธาตุไฟ"
  },
  {
    "id": "equip002",
    "name": "Guardian Shield",
    "type": "Shield",
    "element": "Earth",
    "bonus": {
      "def": 35
    },
    "description": "โล่เพิ่มป้องกันและธาตุดิน"
  },
  {
    "id": "equip003",
    "name": "Mystic Robe",
    "type": "Armor",
    "element": "Water",
    "bonus": {
      "hp": 120
    },
    "description": "เสื้อคลุมเวทย์เพิ่มพลังชีวิตและต้านทานธาตุน้ำ"
  }
]

// Equipment.js - ระบบอุปกรณ์ตัวละคร

let userEquipments = []; // รหัสอุปกรณ์ที่ผู้เล่นมี (อนาคต)
let equipmentList = [];
let equipCharacters = []; // ตัวอย่างตัวละคร 4 ตัว

async function initEquipment() {
  // โหลดข้อมูลอุปกรณ์ + ตัวละคร (เหมือนกับใน Upgrade.js)
  const [equipRes, charRes] = await Promise.all([
    fetch('./data/equipment.json'),
    fetch('./data/characters.json')
  ]);
  equipmentList = await equipRes.json();
  equipCharacters = (await charRes.json()).slice(0, 4);
  // กำหนด equipment แต่ละตัวเป็น null
  equipCharacters.forEach(char => { char.equipment = null; });
  renderEquipmentUI();
}

// Render หน้าจออุปกรณ์
function renderEquipmentUI() {
  const root = document.getElementById('equip-root');
  root.innerHTML = `
    <div class="equip-box">
      <h2>Equip Character</h2>
      <div class="equip-char-list">
        ${equipCharacters.map((char, idx) => `
          <div class="equip-char-card">
            <h4>${char.name} (${char.job})</h4>
            <ul>
              <li>HP: ${calcStatWithEquip(char, "hp")}, ATK: ${calcStatWithEquip(char, "atk")}, DEF: ${calcStatWithEquip(char, "def")}, SPD: ${calcStatWithEquip(char, "spd")}</li>
            </ul>
            <div>
              <label>ใส่อุปกรณ์:</label>
              <select onchange="equipToChar(${idx}, this.value)">
                <option value="">-- ไม่เลือก --</option>
                ${equipmentList.map(eq => `
                  <option value="${eq.id}" ${(char.equipment && char.equipment.id === eq.id) ? "selected" : ""}>${eq.name} (${eq.type})</option>
                `).join("")}
              </select>
              ${char.equipment ? `<button onclick="unEquip(${idx})">ถอดอุปกรณ์</button>` : ""}
            </div>
            ${char.equipment ? `<em>+${statString(char.equipment.bonus)} | ธาตุ:${char.equipment.element}</em>` : ""}
          </div>
        `).join("")}
      </div>
    </div>
  `;
}

// รวมค่าสถานะเดิม+bonus (ถ้ามี)
function calcStatWithEquip(char, k) {
  let base = char.stats[k] || 0;
  if (char.equipment && char.equipment.bonus && typeof char.equipment.bonus[k] === 'number') {
    return base + char.equipment.bonus[k];
  }
  return base;
}

// ใส่อุปกรณ์ให้ตัวละคร
function equipToChar(idx, eqid) {
  if (!eqid) {
    equipCharacters[idx].equipment = null;
  } else {
    let eq = equipmentList.find(e => e.id === eqid);
    equipCharacters[idx].equipment = eq || null;
  }
  renderEquipmentUI();
}

// ถอดอุปกรณ์
function unEquip(idx) {
  equipCharacters[idx].equipment = null;
  renderEquipmentUI();
}

// สร้างข้อความสำหรับ stat bonus
function statString(bonus) {
  if (!bonus) return "";
  return Object.entries(bonus).map(([k, v]) => `${k.toUpperCase()}:+${v}`).join(", ");
}

// export ให้หน้า html เรียกใช้
window.initEquipment = initEquipment;
window.equipToChar = equipToChar;
window.unEquip = unEquip;

// End Equipment.js

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

อัปเดต index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
</body>
</html>

ไฟล์ stages.json
[
  {
    "world": 1,
    "name": "Beginner Plains",
    "stages": [
      {
        "id": "1-1",
        "name": "Greenhill",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 1 },
          { "id": "char006", "name": "Vera", "type": "Normal", "level": 1 }
        ],
        "reward": {
          "gold": 300,
          "item": "Minor Potion"
        },
        "boss": null
      },
      {
        "id": "1-2",
        "name": "River Bend",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 2 }
        ],
        "reward": {
          "gold": 420,
          "item": "Gacha Ticket"
        },
        "boss": {
          "id": "char001",
          "name": "Aria",
          "level": 2,
          "extra_skill": "Freeze"
        }
      }
    ]
  },
  {
    "world": 2,
    "name": "Forest of Trial",
    "stages": [
      {
        "id": "2-1",
        "name": "Misty Woods",
        "enemies": [
          { "id": "char007", "name": "Orin", "type": "Normal", "level": 3 }
        ],
        "reward": {
          "gold": 505,
          "item": "Mystic Robe"
        },
        "boss": {
          "id": "char008",
          "name": "Mythra",
          "level": 3,
          "extra_skill": "Bless"
        }
      }
    ]
  }
]

ไฟล์ Adventure.js
// Adventure.js - Stage/Adventure UI (สมบูรณ์ เชื่อม battle engine จริง ไม่ mock)

let adventureData = [];
let selectedWorld = 0;
let stageResult = null;
let currentPlayStage = null;

async function initAdventure() {
  const res = await fetch('./data/stages.json');
  adventureData = await res.json();
  renderAdventureWorlds();
}

// UI เลือก world
function renderAdventureWorlds() {
  const root = document.getElementById('adventure-root');
  let worldBtns = adventureData.map((world, idx) =>
    `<button onclick="selectWorld(${idx})" ${idx === selectedWorld ? 'class="active"' : ''}>
      🌎 World ${world.world}: ${world.name}
    </button>`
  ).join(' ');

  root.innerHTML = `
    <div class='adventure-box'>
      <h2>🌄 Adventure</h2>
      <div class='adventure-world-btns'>${worldBtns}</div>
      <div id="stage-list"></div>
      <div id="stage-battleresult"></div>
    </div>
  `;
  renderStageList();
}

// สำหรับคลิก world
function selectWorld(idx) {
  selectedWorld = idx;
  renderAdventureWorlds();
}

// UI list stage ทุกด่าน
function renderStageList() {
  const div = document.getElementById('stage-list');
  const world = adventureData[selectedWorld];
  div.innerHTML = world.stages.map(stg => `
    <div class="stage-card">
      <span style="font-size:22px;">🛤️</span>
      <strong>Stage ${stg.id}: ${stg.name}</strong>
      <div>ศัตรู: ${stg.enemies.map(e =>
        `<span title="Lv.${e.level}${e.star ? ' ★' + e.star : ''}">
            ${e.name} (${e.level})${e.star ? ' ★' + e.star : ''}
        </span>`
      ).join(', ')}</div>
      ${stg.boss ?
        `<div class="stage-boss">👹 BOSS: ${stg.boss.name} (Lv.${stg.boss.level} ★${stg.boss.star}) <b>${stg.boss.extra_skill}</b> <span title="Boss note">${stg.boss.note || ""}</span></div>`
        : ""
      }
      <div>🎁 รางวัล: <b>${stg.reward.gold}</b> <span>🪙</span> 
      ${stg.reward.item ? (`| <span>${getItemIcon(stg.reward.item)}</span> ${stg.reward.item}`) : ''}</div>
      <button onclick="enterStage('${stg.id}')" style="margin-top:5px;">เริ่มต่อสู้</button>
    </div>
  `).join('');
}

function getItemIcon(item) {
  switch (item) {
    case "Minor Potion": return "🧪";
    case "Epic Potion": return "💎";
    case "Gacha Ticket": return "🎟";
    case "Rare Equip Box": return "🎁";
    case "Mana Fragment": return "🌕";
    case "Ancient Herb": return "🌿";
    case "Curse Relic": return "☠️";
    case "Celestial Ticket": return "🔱";
    default: return "🎁";
  }
}

// เริ่มเข้าสู้ ใช้งาน battle engine จริง
async function enterStage(stageId) {
  const world = adventureData[selectedWorld];
  const stg = world.stages.find(s => s.id === stageId);
  currentPlayStage = stg;

  // ฟETCHข้อมูลตัวละคร (ต้อง fetch และสร้าง getCharStatsById ก่อน map enemies)
  const allchars = await fetch('./data/characters.json').then(r => r.json());

  function getCharStatsById(id, lv, star) {
    let char = allchars.find(c => c.id === id);
    if (!char) return { hp: 100, atk: 40, def: 10, spd: 10 };
    let s = JSON.parse(JSON.stringify(char.stats));
    let up = (lv - 1) * 16 + ((star ? (star - char.rarity) : 0) * 22);
    return {
      hp: s.hp + up * 10,
      atk: s.atk + up * 2,
      def: s.def + up * 2,
      spd: s.spd + Math.max(0, Math.floor(up / 15))
    }
  }

  // ใช้งานทีมจริง
  let userChars = window.selectedTeam?.length ? window.selectedTeam : [];
  if (userChars.length < 1) {
    alert("กรุณาเลือกทีมของคุณ (อย่างน้อย 1 ตัวละคร) ที่ด้านบนก่อน!");
    return;
  }

  // ข้อมูลศัตรู (คลูนจาก character.json + stat scaling)
  let enemies = [
    ...stg.enemies.map(e => ({
      ...e,
      stats: getCharStatsById(e.id, e.level, e.star)
    }))
  ];
  if (stg.boss) {
    enemies.push({
      ...stg.boss,
      stats: getCharStatsById(stg.boss.id, stg.boss.level, stg.boss.star)
    });
  }

  // ไป battle ui (เชื่อม battle engine จริง)
  window.initBattleUI(userChars, enemies);

  // แสดงผลรางวัล หากจบ
  setTimeout(() => renderBattleRewardUI(), 900);
}

function renderBattleRewardUI() {
  const battleRoot = document.getElementById('battle-root');
  if (!window.currentBattle || !window.currentBattle.getState().finished) return;
  const result = window.currentBattle.getState().result;
  const stg = currentPlayStage;
  const rwd = stg.reward;
  let box = document.getElementById('stage-battleresult');
  if (!box) box = document.createElement('div');
  box.id = 'stage-battleresult';
  box.innerHTML = `
    <div class="stage-result-box" style="font-size:1.15em;line-height:2">
      <b>สรุปผล Stage: ${stg.id}</b>
      <div>🧾 ผลการต่อสู้: <b>${result}</b></div>
      ${result === 'win' ? `<div>🎉 ได้รับ: <b>${rwd.gold} 🪙</b> ${rwd.item ? '| ' + getItemIcon(rwd.item) + ' ' + rwd.item : ""}</div>` : ""}
      <button onclick="closeStageResult()" style="margin-top:7px;">ปิด</button>
    </div>
  `;
  let parent = document.getElementById('adventure-root');
  if (box && parent) parent.appendChild(box);
}

function closeStageResult() {
  let box = document.getElementById('stage-battleresult');
  if (box) box.remove();
  currentPlayStage = null;
}

// สำหรับ global
window.initAdventure = initAdventure;
window.selectWorld = selectWorld;
window.enterStage = enterStage;
window.closeStageResult = closeStageResult;
window.renderBattleRewardUI = renderBattleRewardUI;

// END Adventure.js

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
  
  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  </body>
</html>

ไฟล์ engine.js
// engine.js - Battle Engine (Auto Battle แบบ Turn-based รองรับการเชื่อมต่อกับ character/team/stat/skill)

class BattleEngine {
    constructor(team, enemies) {
        // team และ enemies: array [{...stat...}]
        this.team = team.map((c, i) => ({ ...JSON.parse(JSON.stringify(c)), side: 'player', currentHP: c.stats.hp, index: i }));
        this.enemies = enemies.map((c, i) => ({ ...JSON.parse(JSON.stringify(c)), side: 'enemy', currentHP: c.stats.hp, index: i }));
        this.turnOrder = [];
        this.history = [];
        this.finished = false;
        this.result = null; // 'win', 'lose', 'draw'
        this._buildTurnOrder();
    }

    _buildTurnOrder() {
        // รวมเลย ทั้งหมดเรียง spd จากมากไปน้อย (สุ่มเล็กน้อยป้องกัน SPD เท่ากัน)
        this.turnOrder = [...this.team, ...this.enemies]
            .filter(e => e.currentHP > 0)
            .sort((a, b) => b.stats.spd + Math.random() - (a.stats.spd + Math.random()));
        this.turnIndex = 0;
    }

    _oppositeSide(actor) {
        return actor.side === 'player' ? this.enemies : this.team;
    }

    nextTurn() {
        if (this.finished) return;
        // เลือกคนที่จะเดิน
        if (this.turnOrder.length === 0) this._buildTurnOrder();
        if (!this.turnOrder.length) return;
        const actor = this.turnOrder[this.turnIndex % this.turnOrder.length];
        if (actor.currentHP <= 0) {
            this._buildTurnOrder();
            this.turnIndex++;
            return;
        }
        // Auto: เลือกเป้าหมาย HP ต่่ำสุดของฝั่งตรงข้ามที่มีชีวิต
        const targets = this._oppositeSide(actor).filter(t => t.currentHP > 0);
        // พิเศษ: Heal ถ้ามีสกิล heal แล้ว HP ต่ำกว่า 50% ให้ heal ก่อน
        let didHeal = false;
        if (actor.skills && actor.skills.some(s => s.toLowerCase().includes('heal'))) {
            if (actor.currentHP < actor.stats.hp / 2) {
                // Heal = basic +20%maxHP
                const healAmt = Math.round(actor.stats.hp * 0.2 + 100);
                actor.currentHP = Math.min(actor.currentHP + healAmt, actor.stats.hp);
                this.history.push({ type: 'heal', actor: actor.name, value: healAmt });
                didHeal = true;
            }
        }
        if (!didHeal) {
            // โจมตี (สกิลเลือก atk ปกติ)
            if (targets.length) {
                // อาจสุ่ม skill ถ้ามี (สมมติใช้ skill 50% หรือถ้าไม่มีใช้ ATK ปกติ)
                const useSkill = actor.skills && Math.random() < 0.5;
                let skillUsed = "โจมตีธรรมดา";
                let effect = '';
                let baseDMG = actor.stats.atk + Math.round(Math.random() * 10);
                if (useSkill) {
                    // สมมติ: skill 1 = buff, skill 2 = debuff, skill 3 = AoE
                    if (actor.skills[0]?.toLowerCase().includes('burn')) {
                        baseDMG += 30;
                        effect = 'burn';
                        skillUsed = actor.skills[0];
                    } else if (actor.skills[0]?.toLowerCase().includes('stun')) {
                        skillUsed = actor.skills[0];
                        effect = 'stun';
                    } else if (actor.skills && actor.skills.length > 2 && Math.random() < 0.45) {
                        // AoE: โจมตีทุกคน
                        const damage = Math.round(baseDMG * 0.75);
                        for (const tar of targets) {
                            tar.currentHP = Math.max(tar.currentHP - damage, 0);
                        }
                        this.history.push({
                            type: 'aoe',
                            actor: actor.name,
                            value: damage,
                            targets: targets.map(t => t.name),
                            skill: actor.skills[2]
                        });
                        this._checkBattleEnd();
                        this._buildTurnOrder();
                        this.turnIndex++;
                        return;
                    }
                }
                // Single target
                let target = targets[Math.floor(Math.random() * targets.length)];
                // Damage/Heal scale, add buff/debuff if needed
                // ธาตุแพ้ทาง: Fire > Wind > Earth > Water > Fire, Light <--> Dark
                let adv = 0;
                if (this._isAdvantage(actor.element, target.element)) baseDMG = Math.round(baseDMG * 1.3);
                if (this._isDisadvantage(actor.element, target.element)) baseDMG = Math.round(baseDMG * 0.77);
                // โจมตี - กัน (def)
                let realDMG = Math.max(baseDMG - Math.round(target.stats.def * (effect === 'burn' ? 0.25 : 0.36)), 10);
                target.currentHP = Math.max(target.currentHP - realDMG, 0);
                this.history.push({
                    type: 'attack',
                    actor: actor.name,
                    target: target.name,
                    value: realDMG,
                    skill: skillUsed,
                    effect
                });
            }
        }
        this._checkBattleEnd();
        this._buildTurnOrder();
        this.turnIndex++;
    }

    _isAdvantage(a, b) {
        const map = { 'Fire': 'Wind', 'Wind': 'Earth', 'Earth': 'Water', 'Water': 'Fire', 'Light': 'Dark', 'Dark': 'Light' };
        return map[a] === b;
    }
    _isDisadvantage(a, b) {
        const map = { 'Fire': 'Water', 'Water': 'Earth', 'Earth': 'Wind', 'Wind': 'Fire', 'Light': 'Light', 'Dark': 'Dark' };
        return map[a] === b || (a === b && (a === 'Light' || a === 'Dark'));
    }

    _checkBattleEnd() {
        if (this.team.every(c => c.currentHP <= 0) && this.enemies.every(c => c.currentHP <= 0)) {
            this.finished = true; this.result = 'draw';
        } else if (this.team.every(c => c.currentHP <= 0)) {
            this.finished = true; this.result = 'lose';
        } else if (this.enemies.every(c => c.currentHP <= 0)) {
            this.finished = true; this.result = 'win';
        }
    }

    runAutoFull() {
        // วิ่ง auto แตะจนจบ
        let loopCount = 0;
        while (!this.finished && loopCount < 150) {
            this.nextTurn();
            loopCount++;
        }
    }

    getLog() { return this.history; }
    getResult() { return this.result; }
    getState() {
        return {
            team: this.team.map(c => ({ name: c.name, hp: c.currentHP, maxhp: c.stats.hp })),
            enemy: this.enemies.map(c => ({ name: c.name, hp: c.currentHP, maxhp: c.stats.hp })),
            finished: this.finished, result: this.result
        };
    }
}

// สำหรับ browser global
window.BattleEngine = BattleEngine;

// end engine.js

ไฟล์ BattleUI.js
// BattleUI.js - UI และ Logic การต่อสู้

let currentBattle = null;

async function initBattleUI(team = null, enemies = null) {
    const root = document.getElementById('battle-root');
    // ถ้ายังไม่มีทีม ให้ mock ข้อมูล
    if (!team || !enemies) {
        // โหลดจาก character.json เอา 4 ตัวแรก vs 2 ตัว
        const res = await fetch('./data/characters.json');
        const all = await res.json();
        team = all.slice(0, 4);
        enemies = [
            { ...all[3], stats: { ...all[3].stats }, name: "Grok (Boss)", level: 5 },
            { ...all[6], stats: { ...all[6].stats }, level: 4 }
        ];
        enemies.forEach(e => e.stats.hp += 700); // Boss hp โปร่งเล็กน้อย
    }
    currentBattle = new window.BattleEngine(team, enemies);

    renderBattleUI();
}

function renderBattleUI() {
    if (!currentBattle) return;
    const root = document.getElementById('battle-root');
    const state = currentBattle.getState();
    root.innerHTML = `
  <div class="battle-box">
    <h2>⚔️ Auto Battle</h2>
    <div class="battle-teams">
      <div class="battle-team">
        <h3>ทีมของฉัน</h3>
        ${state.team.map((c, i) => `
          <div class="battle-char${c.hp <= 0 ? ' fainted' : ''}">
            <span class="battle-icon">&#128100;</span>
            ${c.name} <span class="battle-hp">${c.hp} / ${c.maxhp} HP</span>
          </div>
        `).join('')}
      </div>
      <div class="battle-team">
        <h3>ฝ่ายศัตรู</h3>
        ${state.enemy.map((c, i) => `
          <div class="battle-char${c.hp <= 0 ? ' fainted' : ''}">
            <span class="battle-icon">&#128128;</span>
            ${c.name} <span class="battle-hp">${c.hp} / ${c.maxhp} HP</span>
          </div>
        `).join('')}
      </div>
    </div>
    <div class="battle-control">
      <button onclick="battleNextTurn()" ${state.finished ? "disabled" : ""}>เทิร์นถัดไป</button>
      <button onclick="battleAuto()" ${state.finished ? "disabled" : ""}>ดำเนินถึงจบ</button>
      <button onclick="battleReset()">รีเซ็ต</button>
    </div>
    <div class="battle-log">
      <h4>บันทึกการต่อสู้</h4>
      <div id="battle-log-text"></div>
    </div>
    ${state.finished ? `<div class="battle-result">
      <h3>ผลการต่อสู้: ${state.result === 'win' ? "&#x1F389; ชัยชนะ" : state.result === 'lose' ? "&#10060; แพ้" : "&#9873; เสมอ"}</h3>
    </div>` : ''}
  </div>`;
    renderBattleLog();
}

function battleNextTurn() {
    currentBattle.nextTurn();
    renderBattleUI();
}
function battleAuto() {
    currentBattle.runAutoFull();
    renderBattleUI();
}
function battleReset() {
    initBattleUI(); // เริ่มใหม่
}
function renderBattleLog() {
    const logDiv = document.getElementById('battle-log-text');
    if (!logDiv) return;
    const logs = currentBattle.getLog();
    logDiv.innerHTML = logs.map(l => {
        if (l.type === 'attack') return `<div>🗡️ <b>${l.actor}</b> โจมตี <b>${l.target}</b> ด้วย "${l.skill}" ${l.effect ? `ผลพิเศษ:${l.effect}` : ""} <b>- ${l.value} HP</b></div>`;
        if (l.type === 'heal') return `<div>💚 <b>${l.actor}</b> ฟื้น HP <b>+${l.value}</b></div>`;
        if (l.type === 'aoe') return `<div>💥 <b>${l.actor}</b> ใช้ "${l.skill}" โจมตีหมู่ ทุกศัตรู -${l.value} HP</div>`;
        return `<div>${JSON.stringify(l)}</div>`;
    }).join('');
}

// export สำหรับ html
window.initBattleUI = initBattleUI;
window.battleNextTurn = battleNextTurn;
window.battleAuto = battleAuto;
window.battleReset = battleReset;
window.renderBattleUI = renderBattleUI;

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

.battle-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #7bc2ff; padding:1rem; margin-bottom:2rem;}
.battle-teams { display:flex; gap:2rem;}
.battle-team { flex:1;}
.battle-char { padding:6px 0; margin-bottom:2px;}
.battle-char.fainted { color:#b3b3b3; text-decoration: line-through; }
.battle-icon { font-size: 16px; margin-right:4px;}
.battle-hp { color:#08ad2b; font-weight:bold; float:right;}
.battle-control { margin: 1rem 0;}
.battle-control button { background:#1e5fff; color:#fff; border-radius:7px; border:0; margin-right:8px; padding:0.4em 1.2em;}
.battle-result { background:#82fac3; border-radius: 7px; margin:1em 0; padding:1em 1em;}
.battle-log { max-height:190px; overflow-y:auto; background:#eef3ff; margin:7px 0; padding:8px; border-radius:7px;}

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>

  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  </body>
  
  </html>

ต้องการให้ย้อนกลับไปแก้ไขหัวข้อที่ 5 Stage/Adventure ทั้งหมด ไม่ต้องการระบบทดสอบอยากได้ระบบสมบูรณ์ใช้งานจริงได้ทันที หากต้องใช้ไอคอนของระบบโดยไม่ต้องหารูปไอคอนต่างๆมาใส่
ปัจจุบันมาถึงหัวข้อที่ 6 แล้ว เชื่อมต่อหัวข้อที่ 5 แบบจริงๆจังเต็มรูปแบบทุกไฟล์ที่เกี่ยวข้อง 
ด่านต่อสู้ world 1 ใส่มาเต็มๆ 5 world แต่ละ world มี 12 stages เพิ่มระดับความยากไปเรื่อยๆโดยเปรียบเทียบกับพลังฝั่งผู้เล่นที่เลเวลแค่ 1 และใช้ตัว 3 ดาวทั้งหมด จะไม่สามารถผ่าน บอสworld 1 ได้

หลังจากนี้เป็นการอัพเดตต่อเนื่องหลังจากย้อนกลับไปแก้หัวข้อที่ 5 แล้ว

ไฟล์ stages.json
[
  {
    "world": 1,
    "name": "Beginner Plains",
    "stages": [
      {
        "id": "1-1",
        "name": "Greenhill",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 1, "star": 3 },
          { "id": "char006", "name": "Vera", "type": "Normal", "level": 1, "star": 3 }
        ],
        "reward": { "gold": 250, "item": "Minor Potion" },
        "boss": null
      },
      {
        "id": "1-2",
        "name": "Pebble Bridge",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 2, "star": 3 },
          { "id": "char003", "name": "Lina", "type": "Normal", "level": 1, "star": 3 }
        ],
        "reward": { "gold": 400, "item": "Minor Potion" },
        "boss": null
      },
      {
        "id": "1-3",
        "name": "Forest Entrance",
        "enemies": [
          { "id": "char006", "name": "Vera", "type": "Normal", "level": 2, "star": 3 },
          { "id": "char003", "name": "Lina", "type": "Normal", "level": 2, "star": 3 }
        ],
        "reward": { "gold": 550, "item": "Gacha Ticket" },
        "boss": null
      },

      {
        "id": "1-11",
        "name": "Shadow Grove",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 6, "star": 3 },
          { "id": "char002", "name": "Leon", "type": "Normal", "level": 6, "star": 4 }
        ],
        "reward": { "gold": 1500, "item": "Minor Potion" },
        "boss": null
      },
      {
        "id": "1-12",
        "name": "Plains King",
        "enemies": [
          { "id": "char004", "name": "Grok", "type": "Normal", "level": 7, "star": 3 }
        ],
        "reward": { "gold": 3500, "item": "Rare Equip Box" },
        "boss": {
          "id": "char005",
          "name": "Neri",
          "level": 10,
          "star": 5,
          "extra_skill": "Fatal Blow",
          "note": "⚠️ Boss ดาเมจสูงมาก ต้านไม่ไหวสำหรับทีม 3 ดาว LV1"
        }
      }
    ]
  },
  {
    "world": 2,
    "name": "Forest of Trial",
    "stages": [
      {
        "id": "2-1",
        "name": "Misty Woods",
        "enemies": [
          { "id": "char007", "name": "Orin", "type": "Normal", "level": 8, "star": 4 }
        ],
        "reward": { "gold": 700, "item": "Mana Fragment" },
        "boss": null
      },

      {
        "id": "2-12",
        "name": "Druid's Glade",
        "enemies": [
          { "id": "char007", "name": "Orin", "type": "Normal", "level": 14, "star": 4 },
          { "id": "char001", "name": "Aria", "type": "Normal", "level": 14, "star": 4 }
        ],
        "reward": { "gold": 4200, "item": "Epic Potion" },
        "boss": {
          "id": "char008",
          "name": "Mythra",
          "level": 16,
          "star": 5,
          "extra_skill": "Bless"
        }
      }
    ]
  },
  {
    "world": 3,
    "name": "Sky Ruins",
    "stages": [
      {
        "id": "3-1",
        "name": "Old Road",
        "enemies": [
          { "id": "char001", "name": "Aria", "type": "Normal", "level": 15, "star": 4 },
          { "id": "char002", "name": "Leon", "type": "Normal", "level": 14, "star": 5 }
        ],
        "reward": { "gold": 1200, "item": "Gacha Ticket" },
        "boss": null
      },

      {
        "id": "3-12",
        "name": "Sky Queen",
        "enemies": [
          { "id": "char003", "name": "Lina", "type": "Normal", "level": 22, "star": 4 }
        ],
        "reward": { "gold": 8200, "item": "Ancient Herb" },
        "boss": {
          "id": "char002",
          "name": "Leon",
          "level": 25,
          "star": 5,
          "extra_skill": "Burning Blade"
        }
      }
    ]
  },
  {
    "world": 4,
    "name": "Shadow Depths",
    "stages": [
      {
        "id": "4-1",
        "name": "Dim Cavern",
        "enemies": [
          { "id": "char005", "name": "Neri", "type": "Normal", "level": 24, "star": 5 }
        ],
        "reward": { "gold": 1800, "item": "Minor Potion" },
        "boss": null
      },

      {
        "id": "4-12",
        "name": "Shadow Curse",
        "enemies": [
          { "id": "char006", "name": "Vera", "type": "Normal", "level": 31, "star": 4 }
        ],
        "reward": { "gold": 9000, "item": "Curse Relic" },
        "boss": {
          "id": "char007",
          "name": "Orin",
          "level": 34,
          "star": 5,
          "extra_skill": "Explosion"
        }
      }
    ]
  },
  {
    "world": 5,
    "name": "Celestial Peak",
    "stages": [
      {
        "id": "5-1",
        "name": "Wind Summit",
        "enemies": [
          { "id": "char008", "name": "Mythra", "type": "Normal", "level": 34, "star": 5 }
        ],
        "reward": { "gold": 2200, "item": "Epic Potion" },
        "boss": null
      },

      {
        "id": "5-12",
        "name": "Heavenly Trial",
        "enemies": [
          { "id": "char008", "name": "Mythra", "type": "Normal", "level": 41, "star": 5 },
          { "id": "char005", "name": "Neri", "type": "Normal", "level": 41, "star": 5 }
        ],
        "reward": { "gold": 17500, "item": "Celestial Ticket" },
        "boss": {
          "id": "char001",
          "name": "Aria",
          "level": 45,
          "star": 5,
          "extra_skill": "Freeze"
        }
      }
    ]
  }
]

ไฟล์ Adventure.js
// Adventure.js - Stage/Adventure UI (สมบูรณ์ เชื่อม battle engine จริง ไม่ mock)
let adventureData = [];
let selectedWorld = 0;
let stageResult = null;
let currentPlayStage = null;

async function initAdventure() {
  const res = await fetch('./data/stages.json');
  adventureData = await res.json();
  renderAdventureWorlds();
}

// UI เลือก world
function renderAdventureWorlds() {
  const root = document.getElementById('adventure-root');
  let worldBtns = adventureData.map((world, idx) =>
    `<button onclick="selectWorld(${idx})" ${idx === selectedWorld ? 'class="active"' : ''}>
      🌎 World ${world.world}: ${world.name}
    </button>`
  ).join(' ');
  root.innerHTML = `
    <div class='adventure-box'>
      <h2>🌄 Adventure</h2>
      <div class='adventure-world-btns'>${worldBtns}</div>
      <div id="stage-list"></div>
      <div id="stage-battleresult"></div>
    </div>
  `;
  renderStageList();
}

// สำหรับคลิก world
function selectWorld(idx) {
  selectedWorld = idx;
  renderAdventureWorlds();
}

// UI list stage ทุกด่าน
function renderStageList() {
  const div = document.getElementById('stage-list');
  const world = adventureData[selectedWorld];
  div.innerHTML = world.stages.map(stg => `
    <div class="stage-card">
      <span style="font-size:22px;">🛤️</span>
      <strong>Stage ${stg.id}: ${stg.name}</strong>
      <div>ศัตรู: ${stg.enemies.map(e => `<span title="Lv.${e.level} ★${e.star}">${e.name} (${e.level})</span>`).join(', ')}</div>
      ${stg.boss ?
        `<div class="stage-boss">👹 BOSS: ${stg.boss.name} (Lv.${stg.boss.level} ★${stg.boss.star}) <b>${stg.boss.extra_skill}</b> <span title="Boss note">${stg.boss.note || ""}</span></div>`
        : ""
      }
      <div>🎁 รางวัล: <b>${stg.reward.gold}</b> <span>🪙</span> ${stg.reward.item ? (`| <span>${getItemIcon(stg.reward.item)}</span> ${stg.reward.item}`) : ''}</div>
      <button onclick="enterStage('${stg.id}')" style="margin-top:5px;">เริ่มต่อสู้</button>
    </div>
  `).join('');
}

function getItemIcon(item) {
  switch (item) {
    case "Minor Potion": return "🧪";
    case "Epic Potion": return "💎";
    case "Gacha Ticket": return "🎟";
    case "Rare Equip Box": return "🎁";
    case "Mana Fragment": return "🌕";
    case "Ancient Herb": return "🌿";
    case "Curse Relic": return "☠️";
    case "Celestial Ticket": return "🔱";
    default: return "🎁";
  }
}

// เริ่มเข้าสู้ ใช้งาน battle engine จริง
async function enterStage(stageId) {
  const world = adventureData[selectedWorld];
  const stg = world.stages.find(s => s.id === stageId);
  currentPlayStage = stg;

  // ใช้งานทีมจริง (ดึง method/array ที่เลือกไว้ในเกม, สมมติใช้ 4 ตัวแรก)
  let userChars = window.selectedTeam?.length ? window.selectedTeam : [];
  if (userChars.length < 1) {
    alert("กรุณาเลือกทีมของคุณ (อย่างน้อย 1 ตัวละคร) ที่ด้านบนก่อน!");
    return;
  }
  // ข้อมูล enemy เตรียมใหม่ (clone)
  let enemies = [
    ...stg.enemies.map(e => ({ ...e, stats: (getCharStatsById(e.id, e.level, e.star)) }))
  ];
  if (stg.boss) {
    enemies.push({
      ...stg.boss,
      stats: (getCharStatsById(stg.boss.id, stg.boss.level, stg.boss.star))
    })
  }
  // import character ข้อมูลจริง
  const allchars = await fetch('./data/characters.json').then(r => r.json());
  function getCharStatsById(id, lv, star) {
    let char = allchars.find(c => c.id === id);
    if (!char) return { hp: 100, atk: 40, def: 10, spd: 10 };
    // สนับสนุน star+level scaling
    let s = JSON.parse(JSON.stringify(char.stats));
    let up = (lv - 1) * 16 + ((star - char.rarity) * 22); // ปรับเพิ่ม stat จาก base
    return {
      hp: s.hp + up * 10,
      atk: s.atk + up * 2,
      def: s.def + up * 2,
      spd: s.spd + Math.max(0, Math.floor(up / 15))
    }
  }

  // ไป battle ui (เชื่อมต่อหัวข้อ 6)
  window.initBattleUI(userChars, enemies);

  // หลังจบ ปรับ stageResult จาก window.BattleEngine.getResult() กรณีอยากโชว์รางวัล
  setTimeout(() => renderBattleRewardUI(), 900);
}

function renderBattleRewardUI() {
  // show รางวัลหลังสู้จบ
  const battleRoot = document.getElementById('battle-root');
  if (!window.currentBattle || !window.currentBattle.getState().finished) return;
  const result = window.currentBattle.getState().result;
  const stg = currentPlayStage;
  const rwd = stg.reward;

  let box = document.getElementById('stage-battleresult');
  if (!box) box = document.createElement('div');

  box.id = 'stage-battleresult';
  box.innerHTML = `
    <div class="stage-result-box" style="font-size:1.15em;line-height:2">
      <b>สรุปผล Stage: ${stg.id}</b>
      <div>🧾 ผลการต่อสู้: <b>${result}</b></div>
      ${result === 'win' ? `<div>🎉 ได้รับ: <b>${rwd.gold} 🪙</b> ${rwd.item ? '| ' + getItemIcon(rwd.item) + ' ' + rwd.item : ""}</div>` : ""}
      <button onclick="closeStageResult()" style="margin-top:7px;">ปิด</button>
    </div>
  `;

  let parent = document.getElementById('adventure-root');
  if (box && parent) parent.appendChild(box);
}

function closeStageResult() {
  let box = document.getElementById('stage-battleresult');
  if (box) box.remove();
  currentPlayStage = null;
}

// สำหรับ global
window.initAdventure = initAdventure;
window.selectWorld = selectWorld;
window.enterStage = enterStage;
window.closeStageResult = closeStageResult;
window.renderBattleRewardUI = renderBattleRewardUI;

// END Adventure.js

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>

  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>

  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  </body>
  
  </html>

ไฟล์ arena.js
// arena.js - ระบบ Arena PvP Mock

let arenaRivals = [];
let myArenaTeam = [];
let arenaBattleLog = [];
let arenaGold = 0;
let arenaStat = {
  wins: 0,
  loses: 0,
  plays: 0
};

async function initArena() {
  // โหลดข้อมูลตัวละครจากไฟล์
  const res = await fetch('./data/characters.json');
  const chars = await res.json();

  // แปลงทีมผู้เล่น (หรือ mock ชุดที่ผู้เล่นเลือก)
  myArenaTeam = window.selectedTeam?.length
    ? window.selectedTeam
    : chars.slice(0, 4);

  // Mock ฝ่าย Rivals (สุ่ม 3 ชุดระดับยาก/ง่าย)
  arenaRivals = [
    {
      name: "🔥Endless Leo",
      team: [chars[1], chars[5], chars[3], chars[2]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 200),
          atk: c.stats.atk + Math.floor(Math.random() * 60),
          def: c.stats.def + Math.floor(Math.random() * 30)
        }
      })),
      pow: 2250 + Math.floor(Math.random() * 600)
    },
    {
      name: "🌊Mythic Waters",
      team: [chars[0], chars[7], chars[2], chars[4]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 320),
          atk: c.stats.atk + Math.floor(Math.random() * 80),
          def: c.stats.def + Math.floor(Math.random() * 44)
        }
      })),
      pow: 2700 + Math.floor(Math.random() * 900)
    },
    {
      name: "🏅Light Squad",
      team: [chars[2], chars[6], chars[5], chars[3]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 250),
          atk: c.stats.atk + Math.floor(Math.random() * 70),
          def: c.stats.def + Math.floor(Math.random() * 50)
        }
      })),
      pow: 1900 + Math.floor(Math.random() * 800)
    }
  ];
  renderArenaUI();
}

// Summary team power
function calcTeamPower(team) {
  return team.reduce(
    (sum, c) =>
      sum +
      c.stats.hp / 9 +
      c.stats.atk * 3.5 +
      c.stats.def * 2.2 +
      c.stats.spd * 8,
    0
  );
}

function renderArenaUI() {
  const root = document.getElementById('arena-root');
  if (!root) return;
  root.innerHTML = `
    <div class="arena-box">
      <h2>🏟️ Arena (PVP) Mock</h2>
      <div>
        <b>ทีมของคุณ (PWR: ${Math.round(calcTeamPower(myArenaTeam))})</b>
        <ul>
          ${myArenaTeam.map(c => `<li>${c.name} (${c.job}/${c.element}) <span style="color:#286fc4">Lv.${c.level} ★${c.rarity}</span></li>`).join("")}
        </ul>
      </div>
      <hr>
      <h3>เลือกคู่ต่อสู้</h3>
      <div class="arena-rival-list">
        ${arenaRivals
          .map(
            (r, i) => `
          <div class="arena-rival-card">
            <b>${r.name}</b> (PWR: ${r.pow})
            <ul style="margin:6px 0">
              ${r.team
                .map(
                  c =>
                    `<li>${c.name} <span style="color:#43b650;font-size:0.9em">Lv.${c.level} ★${c.rarity}</span></li>`
                )
                .join("")}
            </ul>
            <button onclick="startArenaBattle(${i})">ต่อสู้</button>
          </div>
        `
          )
          .join("")}
      </div>
      <hr>
      <div>
        <span>🏆 ชนะ: <b>${arenaStat.wins}</b> | ❌ แพ้: <b>${arenaStat.loses}</b> | เล่น: ${arenaStat.plays} | 🪙 Gold: <b>${arenaGold}</b></span>
      </div>
      <div id="arena-battle-log"></div>
    </div>
  `;
  renderArenaBattleLog();
}

function startArenaBattle(idx) {
  const enemyTeam = arenaRivals[idx].team;
  // battle engine ของจริง
  window.currentBattle = new window.BattleEngine(myArenaTeam, enemyTeam);
  window.currentBattle.runAutoFull();
  const state = window.currentBattle.getState();
  const logs = window.currentBattle.getLog();
  let resultText = "";
  if (state.result === 'win') {
    arenaStat.wins++;
    arenaGold += 700 + Math.floor(Math.random() * 350);
    resultText = '🏆 คุณชนะ!';
  } else if (state.result === 'lose') {
    arenaStat.loses++;
    resultText = '❌ คุณแพ้!';
  } else {
    resultText = '🤝 เสมอ!';
  }
  arenaStat.plays++;

  arenaBattleLog.unshift({
    rival: arenaRivals[idx].name,
    date: new Date(),
    result: state.result,
    logs: logs,
    reward: state.result === "win" ? (arenaGold) : 0
  });

  showArenaBattleDetail(resultText, logs, state.result, rivalName = arenaRivals[idx].name);
  renderArenaUI();
}

function showArenaBattleDetail(resultText, logs, result, rivalName = '') {
  const box = document.getElementById("arena-battle-log");
  if (!box) return;
  box.innerHTML = `
    <div class="arena-battle-result" style="font-size:1.09em">
      <b>VS ${rivalName}</b> <br/>
      ${resultText}
      <div style="margin:5px 0">บันทึก:</div>
      <div style="max-height:110px;overflow:auto;background:#f6f9ff;padding:7px;border-radius:7px">
        ${logs.map(l => {
          if (l.type === 'attack')
            return `<div>🗡️ <b>${l.actor}</b> โจมตี <b>${l.target}</b> (${l.skill}) <span style="color:red">- ${l.value} HP</span></div>`;
          if (l.type === 'heal')
            return `<div>💚 <b>${l.actor}</b> ฟื้น HP <span style="color:green">+${l.value}</span></div>`;
          if (l.type === 'aoe')
            return `<div>💥 <b>${l.actor}</b> ใช้ "${l.skill}" โจมตีหมู่ ทุกคน -${l.value} HP</div>`;
          return `<div>${JSON.stringify(l)}</div>`;
        }).join("")}
      </div>
      <button onclick="closeArenaBattleDetail()" style="margin-top:8px">ปิด</button>
    </div>
  `;
}

function closeArenaBattleDetail() {
  const box = document.getElementById("arena-battle-log");
  if (box) box.innerHTML = "";
}

function renderArenaBattleLog() {
  // แสดงประวัติย้อนหลัง
  const box = document.getElementById("arena-battle-log");
  if (!box) return;
  if (arenaBattleLog.length > 0) {
    let rec = arenaBattleLog[0];
    showArenaBattleDetail(
      rec.result === "win" ? '🏆 คุณชนะ!' : rec.result === "lose" ? '❌ คุณแพ้!' : '🤝 เสมอ!',
      rec.logs,
      rec.result,
      rec.rival
    );
  } else {
    box.innerHTML = '<div style="color:#aaa;font-style:italic">ยังไม่มีประวัติการต่อสู้</div>';
  }
}

// export สำหรับ html
window.initArena = initArena;
window.startArenaBattle = startArenaBattle;
window.closeArenaBattleDetail = closeArenaBattleDetail;

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

.battle-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #7bc2ff; padding:1rem; margin-bottom:2rem;}
.battle-teams { display:flex; gap:2rem;}
.battle-team { flex:1;}
.battle-char { padding:6px 0; margin-bottom:2px;}
.battle-char.fainted { color:#b3b3b3; text-decoration: line-through; }
.battle-icon { font-size: 16px; margin-right:4px;}
.battle-hp { color:#08ad2b; font-weight:bold; float:right;}
.battle-control { margin: 1rem 0;}
.battle-control button { background:#1e5fff; color:#fff; border-radius:7px; border:0; margin-right:8px; padding:0.4em 1.2em;}
.battle-result { background:#82fac3; border-radius: 7px; margin:1em 0; padding:1em 1em;}
.battle-log { max-height:190px; overflow-y:auto; background:#eef3ff; margin:7px 0; padding:8px; border-radius:7px;}

.arena-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #fbc17b; padding:1rem; margin-bottom:2rem;}
.arena-rival-list { display: flex; flex-wrap:wrap; gap:1.5rem; margin: 10px 0;}
.arena-rival-card { min-width:230px; border:1px solid #ffc46a; border-radius:12px; background:#fffbe7; margin:4px 0; padding:1rem;}
.arena-rival-card button { background: #d48406; color:#fff; border:0; border-radius:6px; margin-top:7px; padding: 0.40em 1.2em;}
.arena-battle-result { background: #e6d3f6; border-radius:10px; margin-top:11px; padding:13px;}

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
  
  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  
  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  <div class="container">
    <div id="arena-root"></div>
  </div>
  <script src="./arena/arena.js"></script>
  <script>initArena();</script>
  </body>
  
  </html>

ไฟล์ quests.json
{
  "main": [
    {
      "id": "main-1",
      "name": "ออกเดินทางครั้งแรก",
      "desc": "ผ่านด่าน 1-1",
      "icon": "🗺️",
      "require": { "stage_clear": "1-1" },
      "reward": { "gold": 300, "item": "Minor Potion" }
    },
    {
      "id": "main-2",
      "name": "นักรบผู้กล้า",
      "desc": "ผ่านด่าน 1-3",
      "icon": "⚔️",
      "require": { "stage_clear": "1-3" },
      "reward": { "gold": 600, "item": "Gacha Ticket" }
    },
    {
      "id": "main-3",
      "name": "ผู้ชนะบอสเวิลด์",
      "desc": "ผ่านด่าน 1-12",
      "icon": "👑",
      "require": { "stage_clear": "1-12" },
      "reward": { "gold": 3500, "item": "Rare Equip Box" }
    }
  ],
  "daily": [
    {
      "id": "daily-1",
      "name": "ล็อกอินวันนี้",
      "desc": "เข้าสู่เกมสำเร็จ",
      "icon": "🔒",
      "require": { "login": true },
      "reward": { "gold": 100, "item": null }
    },
    {
      "id": "daily-2",
      "name": "เปิดกาชา",
      "desc": "สุ่มกาชา 1 ครั้ง",
      "icon": "🎲",
      "require": { "gacha": 1 },
      "reward": { "gold": 300, "item": null }
    },
    {
      "id": "daily-3",
      "name": "ต่อสู้ Adventure",
      "desc": "เล่นโหมด Adventure 1 ครั้ง",
      "icon": "🧭",
      "require": { "adventure_play": 1 },
      "reward": { "gold": 200, "item": null }
    }
  ],
  "side": [
    {
      "id": "side-1",
      "name": "ร่วมทีม 4 ตัว",
      "desc": "จัดทีมครบ 4 ตัวละคร",
      "icon": "👥",
      "require": { "full_team": 4 },
      "reward": { "gold": 100, "item": "Gacha Ticket" }
    },
    {
      "id": "side-2",
      "name": "อัปเกรดตัวละคร",
      "desc": "อัปเกรด stat/เลเวล 1 ครั้ง",
      "icon": "⏫",
      "require": { "upgrade": 1 },
      "reward": { "gold": 200, "item": null }
    }
  ]
}

ไฟล์ Quests.js
// Quests.js - ระบบเควส/มิชชั่น

// QUEST STORAGE
let questProgress = {
  // ตัวอย่าง: main-1: {claimed: false, done: false}
};
let questData = {};
let questCallbacks = {};

function saveQuests() {
  localStorage.setItem("questProgress", JSON.stringify(questProgress));
}
function loadQuests() {
  questProgress = JSON.parse(localStorage.getItem("questProgress") || '{}');
}

// เชื่อม event จากฟังก์ชั่นเกมอื่นๆ
function triggerQuest(event, payload = 1) {
  for (const [qid, cb] of Object.entries(questCallbacks)) cb(event, payload);
}

// อ่านไฟล์ quests.json
async function initQuests() {
  loadQuests();
  const res = await fetch('./data/quests.json');
  questData = await res.json();
  renderQuestsUI();

  // Register event handlers
  registerQuestHandlers();
}
// สร้างฟังก์ชั่นตรวจสอบเควส
function registerQuestHandlers() {
  if (!questData) return;

  // Clean all
  questCallbacks = {};

  // Event-driven update
  Object.values(questData).flat().forEach(q => {
    // Handler ต่อเควสแต่ละอัน
    questCallbacks[q.id] = (event, payload = 1) => {
      // ดึงค่าปัจจุบัน
      let p = questProgress[q.id] || { progress: 0, done: false, claimed: false };
      switch (event) {
        case "login":
          if((q.require.login)) { p.done = true; }
          break;
        case "gacha":
          if(q.require.gacha) { p.progress = Math.min(q.require.gacha, (p.progress || 0) + payload); if(p.progress >= q.require.gacha) p.done = true;}
          break;
        case "adventure_play":
          if(q.require.adventure_play) { p.progress = Math.min(q.require.adventure_play, (p.progress || 0) + payload); if(p.progress >= q.require.adventure_play) p.done = true; }
          break;
        case "full_team":
          if(q.require.full_team) { if(payload >= q.require.full_team) p.done = true; }
          break;
        case "upgrade":
          if(q.require.upgrade) { p.progress = Math.min(q.require.upgrade, (p.progress || 0) + payload); if(p.progress >= q.require.upgrade) p.done = true;}
          break;
        case "stage_clear":
          if(q.require.stage_clear && payload === q.require.stage_clear) { p.done = true; }
          break;
      }
      questProgress[q.id] = p;
      saveQuests();
      renderQuestsUI();
    };
  });
}

// อัปเดต UI
function renderQuestsUI() {
  if (!questData || Object.keys(questData).length === 0) return;
  const root = document.getElementById('quests-root');
  if (!root) return;
  function questBlock(type, quests) {
    return `
      <div class="quests-block">
        <h3>${type === "main" ? "🗺️ เควสหลัก" : type === "daily" ? "🔥 เควสประจำวัน" : "💡 Side Quest"}</h3>
        ${quests.map(q => {
          const prog = questProgress[q.id] || { progress: 0, done: false, claimed: false };
          return `
            <div class="quest-card ${prog.done ? "done" : ""}">
              <span class="quest-icon">${q.icon}</span>
              <strong>${q.name}</strong><br/>
              <span class="quest-desc">${q.desc}</span><br/>
              <span class="quest-reward">🎁 รางวัล: <b>${q.reward.gold}</b> 🪙${q.reward.item ? (' | ' + getItemIcon(q.reward.item) + ' ' + q.reward.item) : ''}</span><br/>
              ${q.require.gacha ? `<span>ความคืบหน้า: ${prog.progress || 0}/${q.require.gacha}</span>` : ''}
              ${q.require.upgrade ? `<span>ความคืบหน้า: ${prog.progress || 0}/${q.require.upgrade}</span>` : ''}
              ${q.require.adventure_play ? `<span>ความคืบหน้า: ${prog.progress || 0}/${q.require.adventure_play}</span>` : ''}
              ${prog.done && !prog.claimed
                ? `<button onclick="claimQuest('${q.id}')">รับรางวัล</button>`
                : prog.claimed
                ? `<span class="quest-claimed">✓ ได้รับรางวัลแล้ว</span>`
                : `<span class="quest-status">${prog.done ? '✔️ สำเร็จ' : '⏳ ยังไม่สำเร็จ'}</span>`
              }
            </div>
          `
        }).join("")}
      </div>
    `;
  }
  root.innerHTML = `
    <div class="quests-container">
      ${questBlock("main", questData.main)}
      ${questBlock("daily", questData.daily)}
      ${questBlock("side", questData.side)}
    </div>
  `;
}

// อัปเดตรับรางวัล
function claimQuest(id) {
  let q = Object.values(questData).flat().find(q => q.id === id);
  if (!q) return;
  let p = questProgress[q.id] || {};
  if (!p.done || p.claimed) return;

  // รับรางวัล
  alert(`🎉 ได้รับ: ${q.reward.gold} Gold ${q.reward.item ? '| ' + q.reward.item : ''}`);
  // เชื่อมระบบเงิน, item (mock)
  window.userGold = (window.userGold || 0) + q.reward.gold;
  // สามารถเชื่อมระบบ item จริง ในอนาคต
  p.claimed = true;
  questProgress[q.id] = p;

  saveQuests();
  renderQuestsUI();
}

// === เชื่อม Event ฝั่งเกมจริงจัง ไปที่ triggerQuest แบบอัตโนมัติ ===

// Login
document.addEventListener("DOMContentLoaded", () => {
  triggerQuest("login", 1);
});

// เชื่อมกับกาชา
window.originalRollGacha = window.rollGacha;
window.rollGacha = function() {
  window.originalRollGacha();
  triggerQuest("gacha", 1);
};

// เชื่อมกับ Adventure
window.originalEnterStage = window.enterStage;
window.enterStage = function(stageId) {
  triggerQuest("adventure_play", 1);
  window.originalEnterStage(stageId);
};

// จัดทีมครบ 4 ตัว
window.originalToggleTeam = window.toggleTeam;
window.toggleTeam = function(id) {
  window.originalToggleTeam(id);
  if (window.selectedTeam && window.selectedTeam.length === 4) {
    triggerQuest("full_team", window.selectedTeam.length);
  }
};

// เชื่อมกับ Upgrade
window.originalUpgradeStat = window.upgradeStat;
window.upgradeStat = function(idx, stat) {
  window.originalUpgradeStat(idx, stat);
  triggerQuest("upgrade", 1);
};
window.originalUpgradeLevel = window.upgradeLevel;
window.upgradeLevel = function(idx) {
  window.originalUpgradeLevel(idx);
  triggerQuest("upgrade", 1);
};

// ด่านจบ
window.originalRenderBattleRewardUI = window.renderBattleRewardUI;
window.renderBattleRewardUI = function (...args) {
  // ตรวจชม stage ที่จบ
  if (window.currentBattle && window.currentBattle.getState().finished && window.currentPlayStage) {
    triggerQuest("stage_clear", window.currentPlayStage.id);
  }
  window.originalRenderBattleRewardUI(...args);
};

// Helper
function getItemIcon(item) {
  switch (item) {
    case "Minor Potion": return "🧪";
    case "Epic Potion": return "💎";
    case "Gacha Ticket": return "🎟";
    case "Rare Equip Box": return "🎁";
    case "Mana Fragment": return "🌕";
    case "Ancient Herb": return "🌿";
    case "Curse Relic": return "☠️";
    case "Celestial Ticket": return "🔱";
    default: return "🎁";
  }
}

window.initQuests = initQuests;
window.claimQuest = claimQuest;

อัปเดต index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
  
  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  <div class="container">
    <div id="quests-root"></div>
  </div>
  <script src="./components/Quests.js"></script>
  <script>initQuests();</script>
  
  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  <div class="container">
    <div id="arena-root"></div>
  </div>
  <script src="./arena/arena.js"></script>
  <script>initArena();</script>
  </body>
  
  </html>

อัปเดต main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

.battle-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #7bc2ff; padding:1rem; margin-bottom:2rem;}
.battle-teams { display:flex; gap:2rem;}
.battle-team { flex:1;}
.battle-char { padding:6px 0; margin-bottom:2px;}
.battle-char.fainted { color:#b3b3b3; text-decoration: line-through; }
.battle-icon { font-size: 16px; margin-right:4px;}
.battle-hp { color:#08ad2b; font-weight:bold; float:right;}
.battle-control { margin: 1rem 0;}
.battle-control button { background:#1e5fff; color:#fff; border-radius:7px; border:0; margin-right:8px; padding:0.4em 1.2em;}
.battle-result { background:#82fac3; border-radius: 7px; margin:1em 0; padding:1em 1em;}
.battle-log { max-height:190px; overflow-y:auto; background:#eef3ff; margin:7px 0; padding:8px; border-radius:7px;}

.arena-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #fbc17b; padding:1rem; margin-bottom:2rem;}
.arena-rival-list { display: flex; flex-wrap:wrap; gap:1.5rem; margin: 10px 0;}
.arena-rival-card { min-width:230px; border:1px solid #ffc46a; border-radius:12px; background:#fffbe7; margin:4px 0; padding:1rem;}
.arena-rival-card button { background: #d48406; color:#fff; border:0; border-radius:6px; margin-top:7px; padding: 0.40em 1.2em;}
.arena-battle-result { background: #e6d3f6; border-radius:10px; margin-top:11px; padding:13px;}

.quests-container { display: flex; gap: 1.5rem; flex-wrap: wrap;}
.quests-block { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #7bc2ff; min-width: 300px; padding: 15px 18px; margin-bottom:13px; flex:1; }
.quest-card { border-left: 7px solid #75b3f7; background:#f7fbff; margin-bottom: 13px; padding: 10px 17px; border-radius:11px;}
.quest-card.done { border-left-color: #0ecc57; }
.quest-card .quest-claimed { color: #1a980f; font-weight: bold;}
.quest-card .quest-status { color: #7b7bce; font-weight: bold; }
.quest-card .quest-icon { font-size: 1.7em; margin-right: 6px;}
.quest-desc { color: #535377; }
.quest-reward { color: #2484c6; }
.quest-card button { background: #06c555; color:#fff; border:0; border-radius:7px; margin-top:7px; padding:7px 19px; font-weight:bold;}

ไฟล์ shop.json
[
  {
    "id": "item_gacha_ticket",
    "name": "Gacha Ticket",
    "icon": "🎟",
    "desc": "ใช้สำหรับสุ่มกาชา",
    "price": 1200,
    "limit_per_day": 3
  },
  {
    "id": "item_minor_potion",
    "name": "Minor Potion",
    "icon": "🧪",
    "desc": "ฟื้น HP ในด่าน, ไอเทมหายาก",
    "price": 350,
    "limit_per_day": 5
  },
  {
    "id": "item_rare_equip_box",
    "name": "Rare Equip Box",
    "icon": "🎁",
    "desc": "กล่องสุ่มอุปกรณ์แรร์ 1 ชิ้น",
    "price": 2500,
    "limit_per_day": 1
  },
  {
    "id": "item_gold_5000",
    "name": "Gold Bundle (5000)",
    "icon": "🪙",
    "desc": "รับ Gold 5,000",
    "price": 40,
    "limit_per_day": 10
  }
]

ไฟล์ Shop.js
// Shop.js - ระบบ Shop สมบูรณ์ (เชื่อม userGold, localStorage, Inventory)

let shopItems = [];
let shopStock = {};
let shopToday = null;

function getShopDayStr() {
  // ใช้วันที่ปัจจุบันเป็น key
  const d = new Date();
  return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;
}

// โหลด store/stock (reset daily)
function loadShopStock() {
  const day = getShopDayStr();
  if (shopToday !== day) {
    localStorage.removeItem('shopStock');
    shopToday = day;
  }
  shopStock = JSON.parse(localStorage.getItem('shopStock') || '{}');
  if (!shopStock.day || shopStock.day !== day) {
    shopStock = { day, stock: {} };
    localStorage.setItem('shopStock', JSON.stringify(shopStock));
  }
}

function saveShopStock() {
  localStorage.setItem('shopStock', JSON.stringify(shopStock));
}

async function initShop() {
  loadShopStock();
  const res = await fetch('./data/shop.json');
  shopItems = await res.json();
  renderShopUI();
}

function renderShopUI() {
  const root = document.getElementById('shop-root');
  if (!root) return;

  const gold = (window.userGold !== undefined ? window.userGold : 0);
  let content = `
    <div class="shop-box">
      <h2>🛒 ร้านค้า</h2>
      <div class="shop-gold">Gold ของคุณ: <span id="shop-user-gold">${gold}</span> 🪙</div>
      <div class="shop-items-list">
        ${shopItems.map(item => {
          const left = item.limit_per_day - (shopStock.stock[item.id] || 0);
          return `
            <div class="shop-item-card">
              <span class="shop-item-icon">${item.icon}</span>
              <b>${item.name}</b>
              <div class="shop-item-desc">${item.desc}</div>
              <div>ราคา: <b>${item.price} 🪙</b></div>
              <div>ซื้อได้วันนี้: <b>${left}/${item.limit_per_day}</b></div>
              <button onclick="buyShopItem('${item.id}')" ${left <= 0 || gold < item.price ? 'disabled' : ''}>
                ซื้อ
              </button>
            </div>
          `;
        }).join('')}
      </div>
    </div>
  `;
  root.innerHTML = content;
}

window.buyShopItem = function(id) {
  const item = shopItems.find(i => i.id === id);
  if (!item) return;

  let left = item.limit_per_day - (shopStock.stock[item.id] || 0);
  let gold = (window.userGold !== undefined ? window.userGold : 0);

  if (left <= 0) {
    alert("หมดจำนวนซื้อวันนี้");
    return;
  }
  if (gold < item.price) {
    alert("Gold ไม่พอ");
    return;
  }
  // หัก Gold
  window.userGold -= item.price;
  // เพิ่มจำนวนที่ซื้อวันนี้
  shopStock.stock[item.id] = (shopStock.stock[item.id] || 0) + 1;
  saveShopStock();

  // เพิ่มของเข้ากระเป๋า หรือดำเนิน event
  // สำหรับตัวอย่างนี้ ใช้ localStorage และ window.inventory
  window.inventory = window.inventory || {};
  if (item.id.startsWith('item_gold')) {
    // Gold bundle
    let give = 0;
    if (item.id === "item_gold_5000") give = 5000;
    window.userGold += give;
    alert(`🎉 คุณได้รับ +${give} Gold!`);
  } else {
    window.inventory[item.id] = (window.inventory[item.id] || 0) + 1;
    alert(`🎉 คุณได้ ${item.name}`);
  }

  // update Gold ในทุกจุด
  document.getElementById('shop-user-gold').textContent = window.userGold;

  // update UI (shop / gacha / ฯลฯ)
  renderShopUI();
  if (window.renderGachaUI) window.renderGachaUI();
  if (window.renderQuestsUI) window.renderQuestsUI();
};

window.initShop = initShop;

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

.battle-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #7bc2ff; padding:1rem; margin-bottom:2rem;}
.battle-teams { display:flex; gap:2rem;}
.battle-team { flex:1;}
.battle-char { padding:6px 0; margin-bottom:2px;}
.battle-char.fainted { color:#b3b3b3; text-decoration: line-through; }
.battle-icon { font-size: 16px; margin-right:4px;}
.battle-hp { color:#08ad2b; font-weight:bold; float:right;}
.battle-control { margin: 1rem 0;}
.battle-control button { background:#1e5fff; color:#fff; border-radius:7px; border:0; margin-right:8px; padding:0.4em 1.2em;}
.battle-result { background:#82fac3; border-radius: 7px; margin:1em 0; padding:1em 1em;}
.battle-log { max-height:190px; overflow-y:auto; background:#eef3ff; margin:7px 0; padding:8px; border-radius:7px;}

.arena-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #fbc17b; padding:1rem; margin-bottom:2rem;}
.arena-rival-list { display: flex; flex-wrap:wrap; gap:1.5rem; margin: 10px 0;}
.arena-rival-card { min-width:230px; border:1px solid #ffc46a; border-radius:12px; background:#fffbe7; margin:4px 0; padding:1rem;}
.arena-rival-card button { background: #d48406; color:#fff; border:0; border-radius:6px; margin-top:7px; padding: 0.40em 1.2em;}
.arena-battle-result { background: #e6d3f6; border-radius:10px; margin-top:11px; padding:13px;}

.quests-container { display: flex; gap: 1.5rem; flex-wrap: wrap;}
.quests-block { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #7bc2ff; min-width: 300px; padding: 15px 18px; margin-bottom:13px; flex:1; }
.quest-card { border-left: 7px solid #75b3f7; background:#f7fbff; margin-bottom: 13px; padding: 10px 17px; border-radius:11px;}
.quest-card.done { border-left-color: #0ecc57; }
.quest-card .quest-claimed { color: #1a980f; font-weight: bold;}
.quest-card .quest-status { color: #7b7bce; font-weight: bold; }
.quest-card .quest-icon { font-size: 1.7em; margin-right: 6px;}
.quest-desc { color: #535377; }
.quest-reward { color: #2484c6; }
.quest-card button { background: #06c555; color:#fff; border:0; border-radius:7px; margin-top:7px; padding:7px 19px; font-weight:bold;}

.shop-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #ffefb2; padding:1rem; margin-bottom:2rem;}
.shop-gold { font-weight: bold; color:#627100; margin-bottom:0.8em }
.shop-items-list { display:flex; flex-wrap:wrap; gap:1.6rem; }
.shop-item-card { min-width:185px; border:1px solid #ffe8a1; border-radius:12px; background:#fffbec; margin:4px 0; padding:1rem; }
.shop-item-icon { font-size:1.8em;margin-right:0.5em; }
.shop-item-desc { color:#6a6554; font-size: 0.96em; }
.shop-item-card button { background: #ffb300; color:#fff; border:0; border-radius:6px; margin-top:8px; padding: 0.35em 1.1em;}
.shop-item-card button:disabled { background: #ead48f; color:#fff;}

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
  
  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  <div class="container">
    <div id="quests-root"></div>
  </div>
  <script src="./components/Quests.js"></script>
  <script>initQuests();</script>
  
  <div class="container">
    <div id="shop-root"></div>
  </div>
  <script src="./shop/shop.js"></script>
  <script>initShop();</script>
  
  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  <div class="container">
    <div id="arena-root"></div>
  </div>
  <script src="./arena/arena.js"></script>
  <script>initArena();</script>
  </body>
  
  </html>

ไฟล์ FriendEventUI.js
// components/FriendEventUI.js

// ----- 1. FRIEND SYSTEM
let myFriends = [];
function loadFriends() {
  myFriends = JSON.parse(localStorage.getItem('myFriends') || '[]');
}
function saveFriends() {
  localStorage.setItem('myFriends', JSON.stringify(myFriends));
}
function addFriend(name) {
  if (!name || myFriends.find(f => f.name === name)) {
    alert("กำลังเพิ่มเพื่อนหรือเพื่อนซ้ำแล้ว"); return;
  }
  let newfriend = { name: name, online: Math.random() > 0.33, lastGift: null, id: Math.random().toString(36).substr(2, 8) };
  myFriends.push(newfriend);
  saveFriends();
  renderFriendEventUI();
}
function sendGift(idx) {
  let now = Date.now();
  let friend = myFriends[idx];
  if (friend.lastGift && now - friend.lastGift < 86400000) {
    alert("ส่งของขวัญไปแล้ววันนี้!"); return;
  }
  friend.lastGift = now;
  saveFriends();
  alert(`🎁 ส่งของขวัญให้ ${friend.name} แล้ว!`);
  renderFriendEventUI();
}
function removeFriend(idx) {
  if (confirm("ต้องการลบเพื่อนนี้หรือไม่?")) {
    myFriends.splice(idx, 1);
    saveFriends();
    renderFriendEventUI();
  }
}

// ----- 2. EVENT / LOGIN BONUS
let loginEvent = {
  dayStreak: 0,
  lastLogin: null,
  rewards: [
    { day: 1, reward: { gold: 200, item: "Minor Potion", icon: "🧪" } },
    { day: 2, reward: { gold: 500, item: "Gacha Ticket", icon: "🎟" } },
    { day: 3, reward: { gold: 800, item: "Rare Equip Box", icon: "🎁" } },
    { day: 4, reward: { gold: 1200, item: "Epic Potion", icon: "💎" } },
    { day: 5, reward: { gold: 2000, item: "Celestial Ticket", icon: "🔱" } },
  ]
};
function loadLoginEvent() {
  let obj = JSON.parse(localStorage.getItem('loginEvent') || '{}');
  loginEvent.dayStreak = obj.dayStreak || 0;
  loginEvent.lastLogin = obj.lastLogin || null;
}
function saveLoginEvent() {
  localStorage.setItem('loginEvent', JSON.stringify({
    dayStreak: loginEvent.dayStreak,
    lastLogin: loginEvent.lastLogin
  }));
}
function claimLoginReward(day) {
  if (loginEvent.dayStreak + 1 !== day) { alert("รับรางวัลลำดับผิดวัน"); return; }
  let rwd = loginEvent.rewards[day - 1].reward;
  window.userGold = (window.userGold || 0) + rwd.gold;
  // เพิ่มไอเทมหากต้องการ (mock ใน window.inventory)
  window.inventory = window.inventory || {};
  let key = rwd.item ? `login_${rwd.item.replace(' ', '_')}` : '';
  if (key) window.inventory[key] = (window.inventory[key] || 0) + 1;
  loginEvent.dayStreak = day;
  loginEvent.lastLogin = (new Date()).toDateString();
  saveLoginEvent();
  alert(`รับรางวัลล็อกอินวันที่ ${day}: +${rwd.gold} Gold +${rwd.item || ''}`);
  renderFriendEventUI();
}

// ----- 3. GLOBAL ANNOUNCE / NOTIFY
let notifyList = [
  { type: "announce", icon: "📢", msg: "อัปเดตใหม่! เพิ่มด่านและระบบร้านค้า", time: "วันนี้" },
  { type: "reward", icon: "🎁", msg: "กิจกรรมแจกของขวัญสำหรับผู้เล่นใหม่!", time: "สัปดาห์นี้" }
];
let lastNotifyIndex = -1;
function showNotification(msgObj) {
  let root = document.getElementById('notify-popup');
  if (!root) {
    root = document.createElement('div');
    root.id = 'notify-popup';
    root.className = "notify-popup";
    document.body.appendChild(root);
  }
  root.innerHTML = `<span class="popup-icon">${msgObj.icon}</span><span>${msgObj.msg}</span>
    <button onclick="this.parentNode.style.display='none'">ปิด</button>`;
  root.style.display = 'block';
}
function showNextNotification() {
  lastNotifyIndex++; if (lastNotifyIndex >= notifyList.length) lastNotifyIndex = 0;
  showNotification(notifyList[lastNotifyIndex]);
}

// ----- 4. UI RENDER
function renderFriendEventUI() {
  loadFriends();
  loadLoginEvent();
  let root = document.getElementById('friend-event-root');
  if (!root) return;
  // FRIEND LIST UI
  let friendsHTML = `
    <div class="friend-box">
      <h2>🤝 รายชื่อเพื่อน</h2>
      <div class="friend-add-bar">
        <input id="add-friend-input" placeholder="ใส่ชื่อเพื่อน..." type="text" style="padding:5px;border-radius:7px;border:1px solid #cecece">
        <button onclick="addFriend(document.getElementById('add-friend-input').value)">+ เพิ่มเพื่อน</button>
      </div>
      <div class="friend-list">
        ${myFriends.map((f,i)=>`
          <div class="friend-card">
            <span class="friend-icon">${f.name.charAt(0).toUpperCase()}</span>
            <b>${f.name}</b> ${f.online ? `<span class="online">🟢 Online</span>` : `<span class="offline">⚫ Offline</span>`}
            <button onclick="sendGift(${i})" ${f.lastGift&&Date.now()-f.lastGift<86400000?'disabled':''}>🎁 ส่งของขวัญ</button>
            <button onclick="removeFriend(${i})" style="background:#eee;color:#b21d1d">ลบ</button>
          </div>`).join('') || '<em style="color:#b6b6cf">ยังไม่มีเพื่อน</em>'}
      </div>
    </div>`;
  // LOGIN EVENT BONUS UI
  let loginDay = (loginEvent.lastLogin !== (new Date()).toDateString()) ? (loginEvent.dayStreak + 1) : loginEvent.dayStreak;
  let eventHTML = `
    <div class="event-box">
      <h2>🎉 Event: Login Reward</h2>
      <div class="login-reward-bar">
        ${loginEvent.rewards.map((r,i)=>`
          <div class="login-reward-item${loginEvent.dayStreak>i?' claimed':loginEvent.dayStreak===i?' active':''}">
            <span class="login-reward-icon">${r.reward.icon}</span>
            <div>Day ${r.day}</div>
            <div style="font-size:0.97em">${r.reward.item}</div>
            <div><b>+${r.reward.gold}</b> 🪙</div>
            ${loginEvent.dayStreak===i&&loginEvent.lastLogin !== (new Date()).toDateString()
              ? `<button onclick="claimLoginReward(${r.day})">รับรางวัล</button>`
              : loginEvent.dayStreak>i?'<span class="claimed">✔️ รับแล้ว</span>':''
            }
          </div>
        `).join('')}
      </div>
    </div>`;
  // ANNOUNCE/NOTIFY BUTTON
  let notifyHTML = `<div class="notify-bar"><button onclick="showNextNotification()">📢 ข่าว/ประกาศ</button></div>`;
  // รวมทั้งหมด
  root.innerHTML = `<div class="friendevent-container">${friendsHTML}${eventHTML}${notifyHTML}</div>`;
}

// expose global
window.renderFriendEventUI = renderFriendEventUI;
window.addFriend = addFriend;
window.sendGift = sendGift;
window.removeFriend = removeFriend;
window.claimLoginReward = claimLoginReward;
window.showNextNotification = showNextNotification;

// Initial render (call in index.html)

// end FriendEventUI.js

อัปเดตไฟล์ index.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Team Building - Card Game</title>
  <link rel="stylesheet" href="./styles/main.css">
</head>
<body>
  <div class="container">
    <h1>ระบบจัดทีม (Team Building)</h1>
    <div id="team-selected" class="team-bar"></div>
    <hr>
    <h2>ตัวละครทั้งหมด</h2>
    <div id="character-list" class="character-list"></div>
  </div>
  <script type="text/javascript" src="./components/TeamBuilder.js"></script>
  <div class="container">
    <div id="gacha-root"></div>
  </div>
  <script src="./components/Gacha.js"></script>
  <script>initGacha();</script>
  <div class="container">
    <div id="upgrade-root"></div>
  </div>
  <script src="./components/Upgrade.js"></script>
  <script>initUpgrade();</script>
  <div class="container">
    <div id="equip-root"></div>
  </div>
  <script src="./components/Equipment.js"></script>
  <script>initEquipment();</script>
  
  <div class="container">
    <div id="adventure-root"></div>
  </div>
  <script src="./components/Adventure.js"></script>
  <script>initAdventure();</script>
  
  <div class="container">
    <div id="quests-root"></div>
  </div>
  <script src="./components/Quests.js"></script>
  <script>initQuests();</script>
  
  <div class="container">
    <div id="shop-root"></div>
  </div>
  <script src="./shop/shop.js"></script>
  <script>initShop();</script>
  
  <div class="container">
    <div id="battle-root"></div>
  </div>
  <script src="./battle/engine.js"></script>
  <script src="./components/BattleUI.js"></script>
  <script>initBattleUI();</script>
  
  <div class="container">
    <div id="arena-root"></div>
  </div>
  <script src="./arena/arena.js"></script>
  <script>initArena();</script>
  
  <div class="container">
    <div id="friend-event-root"></div>
  </div>
  <script src="./components/FriendEventUI.js"></script>
  <script>renderFriendEventUI();</script>

  </body>
  
  </html>

อัปเดตไฟล์ main.css
body { font-family: 'Kanit', sans-serif; margin: 0; background: #f6f6fc; color: #26223d;}
.container { max-width: 1200px; margin: auto; padding: 1rem;}
.character-list, .team-bar { display: flex; flex-wrap: wrap; gap: 1rem;}

.character-card, .team-member {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 8px #cdcde1;
  padding: 1rem;
  flex: 1 1 250px;
  min-width: 220px;
}

.character-card.selected { border: 2px solid #006bfc; }
.character-card button { margin-top: 8px; background: #26223d; color: #fff; border: 0; border-radius: 6px; padding: 0.5em 1em;}
.character-card button:disabled { background: #bbb; color: #fff;}

@media only screen and (max-width: 700px) {
  .container {padding: 0.2rem;}
  .character-card, .team-member {min-width: 98vw;}
}

.gacha-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.gacha-result-card { background: #d9ecff; padding: 1rem; margin: 1rem 0; border-radius:8px;}

.upgrade-box { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #bbb7db; padding: 1rem; margin-bottom: 2rem;}
.upgrade-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem; }
.upgrade-char-card { min-width: 220px; border: 1px solid #92cffb; border-radius: 12px; background: #e5f3fa; margin:4px 0; padding: 1rem;}
.upgrade-char-card button { background: #2499e3; color: #fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}
.upgrade-char-card button:disabled { background: #bbb; }

.equip-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #bbb7db; padding:1rem; margin-bottom:2rem;}
.equip-char-list { display: flex; flex-wrap: wrap; gap: 1.5rem;}
.equip-char-card { min-width:220px; border:1px solid #ffbc62; border-radius:12px; background:#fffbe5; margin:4px 0; padding:1rem;}
.equip-char-card select { margin: 0 7px;}
.equip-char-card button { background: #ff9800; color:#fff; border:0; border-radius:6px; margin-left: 6px; padding: 0.25em 0.7em;}

.adventure-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #96dec1; padding:1rem; margin-bottom:2rem;}
.adventure-world-btns { margin-bottom: 14px; }
.adventure-world-btns button { background: #348e74; color:#fff; border:0; border-radius:7px; margin-right:7px; padding:0.4em 1em; font-weight:bold;}
.adventure-world-btns button.active { background: #10be78; }
.stage-card { background: #f0faf7; border:1px solid #28b989; border-radius:8px; margin-bottom: 1rem; padding:1rem;}
.stage-boss { color: #d65b2f; font-weight: bold;}
.stage-result-box { background: #e2f6d6; border-radius:9px; padding:1.2rem; margin-top:1rem;}

.battle-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #7bc2ff; padding:1rem; margin-bottom:2rem;}
.battle-teams { display:flex; gap:2rem;}
.battle-team { flex:1;}
.battle-char { padding:6px 0; margin-bottom:2px;}
.battle-char.fainted { color:#b3b3b3; text-decoration: line-through; }
.battle-icon { font-size: 16px; margin-right:4px;}
.battle-hp { color:#08ad2b; font-weight:bold; float:right;}
.battle-control { margin: 1rem 0;}
.battle-control button { background:#1e5fff; color:#fff; border-radius:7px; border:0; margin-right:8px; padding:0.4em 1.2em;}
.battle-result { background:#82fac3; border-radius: 7px; margin:1em 0; padding:1em 1em;}
.battle-log { max-height:190px; overflow-y:auto; background:#eef3ff; margin:7px 0; padding:8px; border-radius:7px;}

.arena-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #fbc17b; padding:1rem; margin-bottom:2rem;}
.arena-rival-list { display: flex; flex-wrap:wrap; gap:1.5rem; margin: 10px 0;}
.arena-rival-card { min-width:230px; border:1px solid #ffc46a; border-radius:12px; background:#fffbe7; margin:4px 0; padding:1rem;}
.arena-rival-card button { background: #d48406; color:#fff; border:0; border-radius:6px; margin-top:7px; padding: 0.40em 1.2em;}
.arena-battle-result { background: #e6d3f6; border-radius:10px; margin-top:11px; padding:13px;}

.quests-container { display: flex; gap: 1.5rem; flex-wrap: wrap;}
.quests-block { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #7bc2ff; min-width: 300px; padding: 15px 18px; margin-bottom:13px; flex:1; }
.quest-card { border-left: 7px solid #75b3f7; background:#f7fbff; margin-bottom: 13px; padding: 10px 17px; border-radius:11px;}
.quest-card.done { border-left-color: #0ecc57; }
.quest-card .quest-claimed { color: #1a980f; font-weight: bold;}
.quest-card .quest-status { color: #7b7bce; font-weight: bold; }
.quest-card .quest-icon { font-size: 1.7em; margin-right: 6px;}
.quest-desc { color: #535377; }
.quest-reward { color: #2484c6; }
.quest-card button { background: #06c555; color:#fff; border:0; border-radius:7px; margin-top:7px; padding:7px 19px; font-weight:bold;}

.shop-box { background: #fff; border-radius:12px; box-shadow:0 2px 8px #ffefb2; padding:1rem; margin-bottom:2rem;}
.shop-gold { font-weight: bold; color:#627100; margin-bottom:0.8em }
.shop-items-list { display:flex; flex-wrap:wrap; gap:1.6rem; }
.shop-item-card { min-width:185px; border:1px solid #ffe8a1; border-radius:12px; background:#fffbec; margin:4px 0; padding:1rem; }
.shop-item-icon { font-size:1.8em;margin-right:0.5em; }
.shop-item-desc { color:#6a6554; font-size: 0.96em; }
.shop-item-card button { background: #ffb300; color:#fff; border:0; border-radius:6px; margin-top:8px; padding: 0.35em 1.1em;}
.shop-item-card button:disabled { background: #ead48f; color:#fff;}

.friendevent-container { display: flex; gap:2rem; flex-wrap:wrap;}
.friend-box, .event-box { background:#fff; border-radius:13px; box-shadow:0 2px 8px #c5eaef; min-width:290px; padding:14px 17px; margin-bottom:13px; flex:1;}
.friend-add-bar { margin-bottom:7px; }
.friend-list { margin: 0.5em 0;}
.friend-card { border-left: 6px solid #44c2be; background:#f5faff; margin-bottom: 9px; padding: 9px 12px; border-radius:10px;}
.friend-icon { background:#94f5e6; border-radius:50%; display:inline-block;width:28px;height:28px;text-align:center;line-height:28px;font-weight:bold; margin-right:8px;}
.friend-card button { margin-left:9px; border-radius:6px;border:0;padding:3px 10px;background:#19cbbb;color:#fff; }
.friend-card button:disabled { background:#e6e6e6;color:#aaa; }
.friend-card .online { color:#2cc600;margin-left:8px;}
.friend-card .offline { color:#888;margin-left:8px;}
.event-box { border-left:8px solid #fab51d; }
.login-reward-bar { display:flex; gap:1rem; margin-top:12px;}
.login-reward-item { border:1.2px solid #fae39e; border-radius:10px; background:#fff8e2; text-align:center;padding:9px; width:95px; }
.login-reward-item .login-reward-icon { font-size:2em;}
.login-reward-item.active { border-color:#10b97c; }
.login-reward-item.claimed { border-color:#b8b8bb; opacity:0.77;}
.login-reward-item button { background:#10b97c; color:#fff;border:0;border-radius:6px;padding:2.5px 10px; margin-top:2px;}
.login-reward-item .claimed { color:#166f29;font-size:0.97em;}
.notify-bar {margin:9px 0}
.notify-bar button {background:#286ce4; color:#fff;border-radius:7px; border:0;padding:4.5px 13px;}
.notify-popup { position:fixed; bottom:30px; left:50%; transform:translateX(-50%); z-index:99; background:#fff; color:#1d1d1d; border:2px solid #84b9e7; box-shadow:0 2px 12px #c5d7fb; border-radius:14px; padding:16px 23px; font-size:1.12em; display:none;}
.notify-popup .popup-icon { font-size:1.18em; margin-right:7px;}
.notify-popup button { background:#e85050;color:#fff;border:0;border-radius:7px;margin-left:10px;padding:2px 13px;}


อัปเดตเพิ่มเติมโครงสร้างหัวข้อ 11
├── admin/
│   ├── login.html          <--- หน้าล็อกอินแอดมิน
│   ├── dashboard.html      <--- Dashboard หลังบ้าน (main admin)
│   ├── admin.js            <--- Script หลักแอดมิน (CRUD)
│   └── admin.css           <--- CSS หลังบ้าน

หลังจากนี้เป็นการอัปเดตต่อเนื่องลงมา

ไฟล์ admin.js
// arena.js - ระบบ Arena PvP Mock

let arenaRivals = [];
let myArenaTeam = [];
let arenaBattleLog = [];
let arenaGold = 0;
let arenaStat = {
  wins: 0,
  loses: 0,
  plays: 0
};

async function initArena() {
  // โหลดข้อมูลตัวละครจากไฟล์
  const res = await fetch('./data/characters.json');
  const chars = await res.json();

  // แปลงทีมผู้เล่น (หรือ mock ชุดที่ผู้เล่นเลือก)
  myArenaTeam = window.selectedTeam?.length
    ? window.selectedTeam
    : chars.slice(0, 4);

  // Mock ฝ่าย Rivals (สุ่ม 3 ชุดระดับยาก/ง่าย)
  arenaRivals = [
    {
      name: "🔥Endless Leo",
      team: [chars[1], chars[5], chars[3], chars[2]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 200),
          atk: c.stats.atk + Math.floor(Math.random() * 60),
          def: c.stats.def + Math.floor(Math.random() * 30)
        }
      })),
      pow: 2250 + Math.floor(Math.random() * 600)
    },
    {
      name: "🌊Mythic Waters",
      team: [chars[0], chars[7], chars[2], chars[4]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 320),
          atk: c.stats.atk + Math.floor(Math.random() * 80),
          def: c.stats.def + Math.floor(Math.random() * 44)
        }
      })),
      pow: 2700 + Math.floor(Math.random() * 900)
    },
    {
      name: "🏅Light Squad",
      team: [chars[2], chars[6], chars[5], chars[3]].map(c => ({
        ...c,
        stats: {
          ...c.stats,
          hp: c.stats.hp + Math.floor(Math.random() * 250),
          atk: c.stats.atk + Math.floor(Math.random() * 70),
          def: c.stats.def + Math.floor(Math.random() * 50)
        }
      })),
      pow: 1900 + Math.floor(Math.random() * 800)
    }
  ];
  renderArenaUI();
}

// Summary team power
function calcTeamPower(team) {
  return team.reduce(
    (sum, c) =>
      sum +
      c.stats.hp / 9 +
      c.stats.atk * 3.5 +
      c.stats.def * 2.2 +
      c.stats.spd * 8,
    0
  );
}

function renderArenaUI() {
  const root = document.getElementById('arena-root');
  if (!root) return;
  root.innerHTML = `
    <div class="arena-box">
      <h2>🏟️ Arena (PVP) Mock</h2>
      <div>
        <b>ทีมของคุณ (PWR: ${Math.round(calcTeamPower(myArenaTeam))})</b>
        <ul>
          ${myArenaTeam.map(c => `<li>${c.name} (${c.job}/${c.element}) <span style="color:#286fc4">Lv.${c.level} ★${c.rarity}</span></li>`).join("")}
        </ul>
      </div>
      <hr>
      <h3>เลือกคู่ต่อสู้</h3>
      <div class="arena-rival-list">
        ${arenaRivals
          .map(
            (r, i) => `
          <div class="arena-rival-card">
            <b>${r.name}</b> (PWR: ${r.pow})
            <ul style="margin:6px 0">
              ${r.team
                .map(
                  c =>
                    `<li>${c.name} <span style="color:#43b650;font-size:0.9em">Lv.${c.level} ★${c.rarity}</span></li>`
                )
                .join("")}
            </ul>
            <button onclick="startArenaBattle(${i})">ต่อสู้</button>
          </div>
        `
          )
          .join("")}
      </div>
      <hr>
      <div>
        <span>🏆 ชนะ: <b>${arenaStat.wins}</b> | ❌ แพ้: <b>${arenaStat.loses}</b> | เล่น: ${arenaStat.plays} | 🪙 Gold: <b>${arenaGold}</b></span>
      </div>
      <div id="arena-battle-log"></div>
    </div>
  `;
  renderArenaBattleLog();
}

function startArenaBattle(idx) {
  const enemyTeam = arenaRivals[idx].team;
  // battle engine ของจริง
  window.currentBattle = new window.BattleEngine(myArenaTeam, enemyTeam);
  window.currentBattle.runAutoFull();
  const state = window.currentBattle.getState();
  const logs = window.currentBattle.getLog();
  let resultText = "";
  if (state.result === 'win') {
    arenaStat.wins++;
    arenaGold += 700 + Math.floor(Math.random() * 350);
    resultText = '🏆 คุณชนะ!';
  } else if (state.result === 'lose') {
    arenaStat.loses++;
    resultText = '❌ คุณแพ้!';
  } else {
    resultText = '🤝 เสมอ!';
  }
  arenaStat.plays++;

  arenaBattleLog.unshift({
    rival: arenaRivals[idx].name,
    date: new Date(),
    result: state.result,
    logs: logs,
    reward: state.result === "win" ? (arenaGold) : 0
  });

  showArenaBattleDetail(resultText, logs, state.result, rivalName = arenaRivals[idx].name);
  renderArenaUI();
}

function showArenaBattleDetail(resultText, logs, result, rivalName = '') {
  const box = document.getElementById("arena-battle-log");
  if (!box) return;
  box.innerHTML = `
    <div class="arena-battle-result" style="font-size:1.09em">
      <b>VS ${rivalName}</b> <br/>
      ${resultText}
      <div style="margin:5px 0">บันทึก:</div>
      <div style="max-height:110px;overflow:auto;background:#f6f9ff;padding:7px;border-radius:7px">
        ${logs.map(l => {
          if (l.type === 'attack')
            return `<div>🗡️ <b>${l.actor}</b> โจมตี <b>${l.target}</b> (${l.skill}) <span style="color:red">- ${l.value} HP</span></div>`;
          if (l.type === 'heal')
            return `<div>💚 <b>${l.actor}</b> ฟื้น HP <span style="color:green">+${l.value}</span></div>`;
          if (l.type === 'aoe')
            return `<div>💥 <b>${l.actor}</b> ใช้ "${l.skill}" โจมตีหมู่ ทุกคน -${l.value} HP</div>`;
          return `<div>${JSON.stringify(l)}</div>`;
        }).join("")}
      </div>
      <button onclick="closeArenaBattleDetail()" style="margin-top:8px">ปิด</button>
    </div>
  `;
}

function closeArenaBattleDetail() {
  const box = document.getElementById("arena-battle-log");
  if (box) box.innerHTML = "";
}

function renderArenaBattleLog() {
  // แสดงประวัติย้อนหลัง
  const box = document.getElementById("arena-battle-log");
  if (!box) return;
  if (arenaBattleLog.length > 0) {
    let rec = arenaBattleLog[0];
    showArenaBattleDetail(
      rec.result === "win" ? '🏆 คุณชนะ!' : rec.result === "lose" ? '❌ คุณแพ้!' : '🤝 เสมอ!',
      rec.logs,
      rec.result,
      rec.rival
    );
  } else {
    box.innerHTML = '<div style="color:#aaa;font-style:italic">ยังไม่มีประวัติการต่อสู้</div>';
  }
}

// export สำหรับ html
window.initArena = initArena;
window.startArenaBattle = startArenaBattle;
window.closeArenaBattleDetail = closeArenaBattleDetail;

// end arena.js

ไฟล์ login.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Admin Login - Card Game Backoffice</title>
  <link rel="stylesheet" href="admin.css">
  <style>
    body {
      background: #e9f6fa;
      font-family: 'Kanit', sans-serif;
      margin: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .login-box {
      background: #fff;
      border-radius: 15px;
      box-shadow: 0 2px 16px #b6ccef;
      padding: 2em 2.5em;
      min-width: 340px;
      max-width: 95vw;
      text-align: center;
    }
    .login-icon {
      font-size: 2.8em;
      color: #2176b5;
      margin-bottom: 10px;
      display: block;
    }
    h2 {
      margin: 0 0 7px 0;
      color: #24678b;
      font-weight: 700;
      letter-spacing: 1px;
    }
    .login-input-group {
      margin: 1.4em 0 0.5em 0;
      display: flex;
      flex-direction: column;
      gap: 13px;
    }
    .login-input-group label {
      text-align: left;
      color: #4f6d87;
      font-size: 1.08em;
      margin-bottom: 2px;
    }
    .login-input-group input {
      padding: 8px 14px;
      font-size: 1.11em;
      border: 1.5px solid #b3d2e1;
      border-radius: 7px;
      transition: border 0.16s;
      outline: none;
    }
    .login-input-group input:focus {
      border: 1.8px solid #2383e2;
    }
    .login-btn {
      margin-top: 1.3em;
      background: #2383e2;
      color: #fff;
      border: 0;
      border-radius: 7px;
      font-size: 1.18em;
      font-weight: bold;
      padding: 0.6em 2em;
      box-shadow: 0 4px 8px #a0cbfa60;
      cursor: pointer;
      transition: background 0.2s;
    }
    .login-btn:hover { background: #62b5e8; }
    .error-msg {
      margin-top: 14px;
      color: #d53238;
      font-weight: 500;
      font-size: 1.06em;
      min-height: 1.2em;
    }
    .login-footer {
      margin-top: 1.5em;
      color: #8fa4b7;
      font-size: 0.97em;
      font-style: italic;
    }
    @media only screen and (max-width: 400px) {
      .login-box { min-width: 99vw; padding:1em 0.2em }
      .login-btn { width: 96vw; }
    }
  </style>
</head>
<body>

  <form class="login-box" id="admin-login-form" autocomplete="off">
    <span class="login-icon">🛡️</span>
    <h2>เข้าสู่ระบบแอดมิน</h2>
    <div class="login-input-group">
      <label for="admin-username">ชื่อผู้ใช้</label>
      <input id="admin-username" type="text" autocomplete="username" placeholder="กรุณาใส่ชื่อผู้ใช้" required autofocus>
      <label for="admin-password">รหัสผ่าน</label>
      <input id="admin-password" type="password" autocomplete="current-password" placeholder="รหัสผ่าน" required>
    </div>
    <button class="login-btn" type="submit">เข้าสู่ระบบ</button>
    <div class="error-msg" id="login-error"></div>
    <div class="login-footer">© Card Game Admin • 2024</div>
  </form>

  <script>
    // รายชื่อแอดมิน (สามารถเพิ่ม/เปลี่ยนชื่อได้)
    const admins = [
      { user: "admin", pass: "cardgame123" },
      { user: "dev", pass: "superdev" },
      // เพิ่มบัญชี admin เพิ่มเติมได้
    ];

    // เมื่อกด Enter หรือคลิกปุ่ม
    document.getElementById("admin-login-form").addEventListener("submit", function(e) {
      e.preventDefault();
      const u = document.getElementById("admin-username").value.trim();
      const p = document.getElementById("admin-password").value;
      const errorDiv = document.getElementById("login-error");

      // Clear error
      errorDiv.textContent = "";

      // ตรวจสอบรหัส
      const found = admins.find(adm => adm.user === u && adm.pass === p);

      if (found) {
        // Set sessionStorage (ฝั่ง JS สามารถดึงไปเช็คสิทธิ์ใน dashboard.html ต่อได้)
        sessionStorage.setItem("isAdmin", "true");
        sessionStorage.setItem("adminUser", u);

        // แจ้งเตือนและ Redirect
        errorDiv.style.color = "#10b97c";
        errorDiv.textContent = "✅ เข้าสู่ระบบสำเร็จ! กำลังเข้าสู่หน้าหลังบ้าน...";
        setTimeout(() => {
          window.location.href = "dashboard.html";
        }, 900);
      } else {
        errorDiv.style.color = "#d53238";
        errorDiv.textContent = "❌ ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง กรุณาลองใหม่";
      }
    });
  </script>
</body>
</html>

ไฟล์ dashboard.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Admin Dashboard - Card Game Backoffice</title>
  <link rel="stylesheet" href="admin.css">
  <style>
    body { background: #eeeff8; font-family: 'Kanit', sans-serif; margin:0;}
    .dash-container { max-width:1400px; margin:auto; padding:2em 1em; }
    .dash-header { display: flex; align-items:center; margin-bottom:1.5em; }
    .dash-header .dash-title { font-size: 2.1em; font-weight: bold; color: #24678b; margin-right:1.2em;}
    .dash-user { color: #6e7b96; font-size:1.02em; margin-left:auto; }
    .dash-nav { display:flex; gap:2em; margin-bottom: 1.5em; flex-wrap:wrap; }
    .dash-nav button { background:#2f85fa; color:#fff; border:0; border-radius:8px; padding:11px 22px; font-size:1.12em; cursor:pointer; font-weight:600; box-shadow:0 2px 10px #d1e7fb30; transition: background 0.17s;}
    .dash-nav button.active, .dash-nav button:focus {background: #16ca90;}
    .dash-section { display:none; background:#fff; border-radius:18px; box-shadow:0 2px 16px #c0d8fc49; padding:2em 2.4em 2em 2em; margin-bottom:2em;}
    .dash-section.active { display:block; animation:fadeIn 0.3s;}
    .dash-panel-title {color:#1c5ca3; margin-bottom:1.1em; font-size:1.38em; font-weight:bold; letter-spacing:1px;}
    .logout-btn { background: #e32536; color: #fff; border: 0; border-radius: 7px; padding: 9px 18px; font-size: 1em; font-weight: bold; cursor:pointer; margin-left:20px;}
    .dash-footer { text-align:center; padding:.8em 0; color:#7b8ebd; font-size:0.97em;}
    /* Table */
    table { border-collapse: collapse; width: 100%; margin: 20px 0;}
    th, td {border:1px solid #d0d8e4; padding:8px 13px; text-align:left;}
    th {background:#e6f2fe;}
    tr td:first-child {font-weight:bold;}
    .admin-edit-btn, .admin-del-btn, .admin-save-btn, .admin-cancel-btn {padding:2px 15px; border-radius:5px; border:0; font-size:.97em; margin:0 2px; cursor:pointer;}
    .admin-edit-btn { background: #0682c2; color:#fff;}
    .admin-del-btn { background: #e93523; color:#fff;}
    .admin-save-btn { background: #14a15a; color:#fff;}
    .admin-cancel-btn { background: #ddd; color:#1d1d1d;}
    .admin-add-btn { background: #377fe9;color:#fff;border:0;padding:8px 19px;border-radius:7px;margin:12px 0;cursor:pointer;font-size:1em;}
    .dash-table {overflow-x:auto;}
    .input-text, input[type="number"], select {
      font-family: inherit; padding:3px 9px; border-radius:5px; border:1px solid #abcdf3; font-size:1em;
    }
    @keyframes fadeIn {from{opacity:0;}to{opacity:1;}}
    @media (max-width: 700px){
      .dash-section {padding:1em .3em;}
      .dash-container {padding:1em .2em;}
      .dash-header .dash-title {font-size:1.36em;}
      .dash-nav button {font-size:1em;padding:8px 10px;}
    }
  </style>
</head>
<body>
  <div class="dash-container">
    <div class="dash-header">
      <span class="dash-title">🛡️ ADMIN DASHBOARD</span>
      <span id="admin-username" class="dash-user">Loading...</span>
      <button class="logout-btn" onclick="logoutAdmin()">ออกจากระบบ</button>
    </div>
    <nav class="dash-nav" id="nav-tabs">
      <button onclick="showSection('character-admin')" id="tab-character" class="active">👤 ตัวละคร</button>
      <button onclick="showSection('gacha-admin')" id="tab-gacha">🎲 กาชา</button>
      <button onclick="showSection('equipment-admin')" id="tab-equip">⚔️ อุปกรณ์</button>
      <button onclick="showSection('stages-admin')" id="tab-stage">🗺️ ด่าน/Stage</button>
      <button onclick="showSection('quests-admin')" id="tab-quest">🏆 เควส</button>
      <button onclick="showSection('shop-admin')" id="tab-shop">🛒 ร้านค้า</button>
      <button onclick="showSection('notify-admin')" id="tab-notify">📢 ประกาศ/แจ้งเตือน</button>
    </nav>

    <!-- CHARACTER -->
    <section class="dash-section active" id="character-admin">
      <div class="dash-panel-title">👤 จัดการตัวละคร (characters.json)</div>
      <div class="dash-table" id="table-characters"></div>
      <button class="admin-add-btn" onclick="adminAddRow('characters')">+ เพิ่มตัวละคร</button>
    </section>

    <!-- GACHA -->
    <section class="dash-section" id="gacha-admin">
      <div class="dash-panel-title">🎲 จัดการกาชา (gacha.json)</div>
      <div class="dash-table" id="table-gacha"></div>
      <button class="admin-add-btn" onclick="adminAddRow('gacha')">+ เพิ่ม Pool กาชา</button>
    </section>

    <!-- EQUIPMENT -->
    <section class="dash-section" id="equipment-admin">
      <div class="dash-panel-title">⚔️ จัดการอุปกรณ์ (equipment.json)</div>
      <div class="dash-table" id="table-equipment"></div>
      <button class="admin-add-btn" onclick="adminAddRow('equipment')">+ เพิ่มอุปกรณ์</button>
    </section>

    <!-- STAGES -->
    <section class="dash-section" id="stages-admin">
      <div class="dash-panel-title">🗺️ จัดการด่าน/Stage (stages.json)</div>
      <div class="dash-table" id="table-stages"></div>
      <button class="admin-add-btn" onclick="adminAddRow('stages')">+ เพิ่มด่าน</button>
      <small style="color:#2571bf;"><b>📖 แก้ไข world/dungeon/stage/boss</b> แต่ละชุด, สำหรับความปลอดภัยควรสำรองไฟล์ก่อนแก้ไขข้อมูลขนาดใหญ่</small>
    </section>

    <!-- QUESTS -->
    <section class="dash-section" id="quests-admin">
      <div class="dash-panel-title">🏆 จัดการเควส (quests.json)</div>
      <div class="dash-table" id="table-quests"></div>
      <button class="admin-add-btn" onclick="adminAddRow('quests')">+ เพิ่มเควส</button>
    </section>

    <!-- SHOP -->
    <section class="dash-section" id="shop-admin">
      <div class="dash-panel-title">🛒 จัดการสินค้าในร้านค้า (shop.json)</div>
      <div class="dash-table" id="table-shop"></div>
      <button class="admin-add-btn" onclick="adminAddRow('shop')">+ เพิ่มสินค้าใหม่</button>
    </section>

    <!-- NOTIFY -->
    <section class="dash-section" id="notify-admin">
      <div class="dash-panel-title">📢 ประกาศ/แจ้งเตือน (ใน FriendEventUI.js)</div>
      <div class="dash-table" id="table-notify"></div>
      <button class="admin-add-btn" onclick="adminAddRow('notify')">+ เพิ่มประกาศใหม่</button>
    </section>

    <div class="dash-footer">
      CardGame Admin | Powered by Backoffice Template | &copy; 2024 | <span id="admin-ft-user"></span>
    </div>
  </div>

  <script src="admin.js"></script>
  <script>
    // -- Admin Auth Protect --
    if (!sessionStorage.getItem('isAdmin')) {
      alert('กรุณาเข้าสู่ระบบแอดมินก่อน');
      window.location.href = 'login.html';
    }
    // -- Update user info --
    const adminUser = sessionStorage.getItem('adminUser');
    document.getElementById('admin-username').textContent = '👤 ' + adminUser;
    document.getElementById('admin-ft-user').textContent = 'Admin: ' + adminUser;

    // -- Section switching (tabs) --
    function showSection(id) {
      document.querySelectorAll('.dash-section').forEach(sec => sec.classList.remove('active'));
      document.getElementById(id).classList.add('active');
      // Tab UI
      document.querySelectorAll('.dash-nav button').forEach(btn => btn.classList.remove('active'));
      document.getElementById('tab-'+id.split('-')[0]).classList.add('active');
    }

    // -- Logout --
    function logoutAdmin() {
      sessionStorage.clear();
      window.location.href = 'login.html';
    }
  </script>
  <script>
    // ----- DYNAMIC TABLES: Auto fetch json and render, editable -----
    // Load data for each section (file)
    let adminData = {characters:[], gacha:[], equipment:[], stages:[], quests:[], shop:[], notify:[]};

    // Helper: Load and render all admin tables
    async function loadAdminData() {
      // Load data from json files (local fetch)
      // 1. Characters
      adminData.characters = await fetch('../data/characters.json').then(r=>r.json()).catch(()=>[]);
      // 2. Gacha
      let gachaRaw = await fetch('../data/gacha.json').then(r=>r.json()).catch(()=>({gacha_pool:[],gacha_cost:1000}));
      adminData.gacha = gachaRaw.gacha_pool || [];
      adminData.gachaCost = gachaRaw.gacha_cost || 1000;
      // 3. Equipment
      adminData.equipment = await fetch('../data/equipment.json').then(r=>r.json()).catch(()=>[]);
      // 4. Stages
      adminData.stages = await fetch('../data/stages.json').then(r=>r.json()).catch(()=>[]);
      // 5. Quests
      let questsRaw = await fetch('../data/quests.json').then(r=>r.json()).catch(()=>({main:[],daily:[],side:[]}));
      adminData.quests = [
        ...(questsRaw.main||[]).map(q=>({...q,type:'หลัก'})),
        ...(questsRaw.daily||[]).map(q=>({...q,type:'ประจำวัน'})),
        ...(questsRaw.side||[]).map(q=>({...q,type:'Side'}))
      ];
      // 6. Shop
      adminData.shop = await fetch('../data/shop.json').then(r=>r.json()).catch(()=>[]);
      // 7. Notify (from local storage or default)
      adminData.notify = JSON.parse(localStorage.getItem('adminNotifyList') || '[]');
      if(!adminData.notify.length){
        adminData.notify = [
          {type:"announce",icon:"📢",msg:"อัปเดตใหม่!",time:"วันนี้"},
          {type:"reward",icon:"🎁",msg:"แจกของขวัญผู้เล่นใหม่!",time:"สัปดาห์นี้"}
        ];
      }
      // Render all tables
      renderCharTable();
      renderGachaTable();
      renderEquipTable();
      renderStageTable();
      renderQuestTable();
      renderShopTable();
      renderNotifyTable();
    }
    window.onload = loadAdminData;

    // -- Each Table Renderers and Editors --
    function htmlInput(val,name,type='text',extra=''){ return `<input class='input-text' type='${type}' name='${name}' value='${val||""}' ${extra}/>`; }
    function adminAddRow(section){
      switch(section){
        case 'characters': adminData.characters.push({id:'id'+Date.now(),name:'',job:'',element:'Fire',level:1,rarity:3,stats:{hp:1000,atk:100,def:100,spd:80},skills:[]}); break;
        case 'gacha': adminData.gacha.push({character_id:'',weight:100}); break;
        case 'equipment': adminData.equipment.push({id:'id'+Date.now(),name:'',type:'Weapon',element:'Fire',bonus:{atk:0},description:''}); break;
        case 'stages': if(adminData.stages.length){adminData.stages[0].stages.push(
          {id:'',name:'',enemies:[],reward:{gold:100,item:''},boss:null}
        );}else{adminData.stages.push({world:1,name:'World',stages:[{id:'',name:'',enemies:[],reward:{gold:100,item:''},boss:null}]});} break;
        case 'quests': adminData.quests.push({id:'',name:'',desc:'',icon:'🏆',require:{},reward:{gold:100},type:'หลัก'}); break;
        case 'shop': adminData.shop.push({id:'id'+Date.now(),name:'',icon:'🎉',desc:'',price:10,limit_per_day:1}); break;
        case 'notify': adminData.notify.push({type:'announce',icon:'📢',msg:'',time:'วันนี้'}); break;
      }
      renderTablesBySection(section);
    }
    function renderTablesBySection(section){
      switch(section){
        case 'characters': renderCharTable(); break;
        case 'gacha': renderGachaTable(); break;
        case 'equipment': renderEquipTable(); break;
        case 'stages': renderStageTable(); break;
        case 'quests': renderQuestTable(); break;
        case 'shop': renderShopTable(); break;
        case 'notify': renderNotifyTable(); break;
      }
    }
    // CHARACTER TABLE
    function renderCharTable(){
      let rows = adminData.characters.map((c,i)=>`
        <tr>
         <td>${htmlInput(c.id,'id')}</td>
         <td>${htmlInput(c.name,'name')}</td>
         <td>${htmlInput(c.job,'job')}</td>
         <td><select name='element'>${["Fire","Water","Earth","Wind","Dark","Light"].map(e=>`<option ${c.element==e?'selected':''}>${e}</option>`)}</select></td>
         <td>${htmlInput(c.level,'level','number','min=1')}</td>
         <td>${htmlInput(c.rarity,'rarity','number','min=1 max=6')}</td>
         <td>HP:${htmlInput(c.stats.hp,'stats.hp','number','min=1')}<br>ATK:${htmlInput(c.stats.atk,'stats.atk','number','min=0')}<br>DEF:${htmlInput(c.stats.def,'stats.def','number','min=0')}<br>SPD:${htmlInput(c.stats.spd,'stats.spd','number','min=0')}</td>
         <td>${htmlInput((c.skills||[]).join(", "),'skills')}</td>
         <td>
           <button class='admin-save-btn' onclick='adminSaveChar(${i})'>💾</button>
           <button class='admin-del-btn' onclick='adminDelRow("characters",${i})'>🗑️</button>
         </td>
        </tr>
      `).join('');
      document.getElementById("table-characters").innerHTML = `
        <table>
         <thead><tr>
           <th>ID</th><th>Name</th><th>Job</th><th>Element</th><th>LV</th><th>Rarity</th>
           <th>Stats</th><th>Skills (comma)</th><th>Action</th>
         </tr></thead>
         <tbody>${rows}</tbody>
        </table>`;
    }
    window.adminSaveChar = function(idx){
      // update object from input
      const t = document.getElementById("table-characters").getElementsByTagName('tbody')[0].rows[idx];
      const c = adminData.characters[idx];
      c.id = t.cells[0].querySelector('input[name="id"]').value;
      c.name = t.cells[1].querySelector('input[name="name"]').value;
      c.job = t.cells[2].querySelector('input[name="job"]').value;
      c.element = t.cells[3].querySelector('select[name="element"]').value;
      c.level = parseInt(t.cells[4].querySelector('input[name="level"]').value||1);
      c.rarity = parseInt(t.cells[5].querySelector('input[name="rarity"]').value||3);
      c.stats.hp = parseInt(t.cells[6].querySelector('input[name="stats.hp"]').value||1000);
      c.stats.atk = parseInt(t.cells[6].querySelector('input[name="stats.atk"]').value||100);
      c.stats.def = parseInt(t.cells[6].querySelector('input[name="stats.def"]').value||100);
      c.stats.spd = parseInt(t.cells[6].querySelector('input[name="stats.spd"]').value||80);
      c.skills = (t.cells[7].querySelector('input[name="skills"]').value||'').split(',').map  .trim();
      alert("✅ บันทึกตัวละครเรียบร้อย (บันทึกลงไฟล์ต้นฉบับด้วย)");
      renderCharTable();
      // TODO: เขียนฟังก์ชัน export/save json สำหรับส่งไฟล์กลับ หรืออัปโหลดกลับ server ตามที่หลังบ้านมี
    }
    window.adminDelRow = function(section,i){
      if(confirm("ลบแถวนี้?")) {
        adminData[section].splice(i,1);
        renderTablesBySection(section);
      }
    }

    // GACHA TABLE
    function renderGachaTable(){
      let rows = adminData.gacha.map((g,i)=>`
        <tr>
          <td>${htmlInput(g.character_id,'character_id')}</td>
          <td>${htmlInput(g.weight,'weight','number','min=1')}</td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveGacha(${i})'>💾</button>
            <button class='admin-del-btn' onclick='adminDelRow("gacha",${i})'>🗑️</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-gacha").innerHTML = `
        <table>
          <thead><tr>
            <th>รหัสตัวละคร</th><th>Weight</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>
        <div style="margin-top:0.6em">ค่า Gold ต่อ 1 Roll: <input id="gacha-cost-input" type="number" value="${adminData.gachaCost||1000}" style="width:90px" min="1"/>
        <button onclick="saveGachaCost()">บันทึกค่า</button></div>
      `;
    }
    window.adminSaveGacha = function(idx){
      const t = document.getElementById("table-gacha").getElementsByTagName('tbody')[0].rows[idx];
      const g = adminData.gacha[idx];
      g.character_id = t.cells[0].querySelector('input[name="character_id"]').value.trim();
      g.weight = parseInt(t.cells[1].querySelector('input[name="weight"]').value||1);
      alert('💾 บันทึก Pool กาชาสำเร็จ');
      renderGachaTable();
    }
    window.saveGachaCost = function(){
      adminData.gachaCost = parseInt(document.getElementById('gacha-cost-input').value)||1000;
      alert('💾 บันทึกค่า Roll สำเร็จ');
    }

    // EQUIPMENT TABLE
    function renderEquipTable(){
      let rows = adminData.equipment.map((e,i)=>`
        <tr>
          <td>${htmlInput(e.id,'id')}</td>
          <td>${htmlInput(e.name,'name')}</td>
          <td>${htmlInput(e.type,'type')}</td>
          <td>${htmlInput(e.element,'element')}</td>
          <td>${htmlInput(JSON.stringify(e.bonus||{}),'bonus')}</td>
          <td>${htmlInput(e.description,'description')}</td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveEquip(${i})'>💾</button>
            <button class='admin-del-btn' onclick='adminDelRow("equipment",${i})'>🗑️</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-equipment").innerHTML = `
        <table>
          <thead><tr>
            <th>ID</th><th>Name</th><th>Type</th><th>Element</th><th>โบนัส (JSON)</th><th>คำอธิบาย</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>`;
    }
    window.adminSaveEquip = function(idx){
      const t = document.getElementById("table-equipment").getElementsByTagName('tbody')[0].rows[idx];
      const e = adminData.equipment[idx];
      e.id = t.cells[0].querySelector('input[name="id"]').value;
      e.name = t.cells[1].querySelector('input[name="name"]').value;
      e.type = t.cells[2].querySelector('input[name="type"]').value;
      e.element = t.cells[3].querySelector('input[name="element"]').value;
      try{ e.bonus = JSON.parse(t.cells[4].querySelector('input[name="bonus"]').value);}catch{ e.bonus={}; }
      e.description = t.cells[5].querySelector('input[name="description"]').value;
      alert('💾 บันทึกอุปกรณ์สำเร็จ');
      renderEquipTable();
    }

    // STAGES TABLE (short, edit by JSON)
    function renderStageTable(){
      let rows = adminData.stages.map((w,wi)=>`
        <tr>
          <td>${htmlInput(w.world,'world','number','min=1')}</td>
          <td>${htmlInput(w.name,'name')}</td>
          <td><textarea style="width:100%;height:90px" name="stages">${JSON.stringify(w.stages,null,2)}</textarea></td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveStage(${wi})'>💾</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-stages").innerHTML = `
        <table>
          <thead><tr>
            <th>World</th><th>Name</th><th>Stages (JSON)</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>
        <div style="color:#f80;">* ด่านต่อสู้ให้แก้เป็น array JSON เต็มในช่องนี้</div>`;
    }
    window.adminSaveStage = function(worldIdx){
      const t = document.getElementById("table-stages").getElementsByTagName('tbody')[0].rows[worldIdx];
      let w = adminData.stages[worldIdx];
      w.world = parseInt(t.cells[0].querySelector('input[name="world"]').value)||1;
      w.name = t.cells[1].querySelector('input[name="name"]').value;
      try{ w.stages = JSON.parse(t.cells[2].querySelector('textarea[name="stages"]').value);}catch{w.stages=[];}
      alert('💾 บันทึก World สำเร็จ');
      renderStageTable();
    }

    // QUESTS TABLE
    function renderQuestTable(){
      let rows = adminData.quests.map((q,i)=>`
        <tr>
          <td>${htmlInput(q.id,'id')}</td>
          <td>${htmlInput(q.type||'','type')}</td>
          <td>${htmlInput(q.name,'name')}</td>
          <td>${htmlInput(q.desc,'desc')}</td>
          <td>${htmlInput(q.icon,'icon')}</td>
          <td>${htmlInput(JSON.stringify(q.require||{}),'require')}</td>
          <td>${htmlInput(JSON.stringify(q.reward||{}),'reward')}</td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveQuest(${i})'>💾</button>
            <button class='admin-del-btn' onclick='adminDelRow("quests",${i})'>🗑️</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-quests").innerHTML = `
        <table>
          <thead><tr>
            <th>ID</th><th>Type</th><th>Name</th><th>Desc</th><th>Icon</th><th>เงื่อนไข (JSON)</th><th>รางวัล (JSON)</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>`;
    }
    window.adminSaveQuest = function(idx){
      const t = document.getElementById("table-quests").getElementsByTagName('tbody')[0].rows[idx];
      const q = adminData.quests[idx];
      q.id = t.cells[0].querySelector('input[name="id"]').value;
      q.type = t.cells[1].querySelector('input[name="type"]').value;
      q.name = t.cells[2].querySelector('input[name="name"]').value;
      q.desc = t.cells[3].querySelector('input[name="desc"]').value;
      q.icon = t.cells[4].querySelector('input[name="icon"]').value;
      try{q.require=JSON.parse(t.cells[5].querySelector('input[name="require"]').value);}catch{q.require={};}
      try{q.reward=JSON.parse(t.cells[6].querySelector('input[name="reward"]').value);}catch{q.reward={};}
      alert('💾 บันทึกเควสสำเร็จ');
      renderQuestTable();
    }

    // SHOP TABLE
    function renderShopTable(){
      let rows = adminData.shop.map((s,i)=>`
        <tr>
          <td>${htmlInput(s.id,'id')}</td>
          <td>${htmlInput(s.name,'name')}</td>
          <td>${htmlInput(s.icon,'icon')}</td>
          <td>${htmlInput(s.desc,'desc')}</td>
          <td>${htmlInput(s.price,'price','number','min=0')}</td>
          <td>${htmlInput(s.limit_per_day,'limit_per_day','number','min=1')}</td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveShop(${i})'>💾</button>
            <button class='admin-del-btn' onclick='adminDelRow("shop",${i})'>🗑️</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-shop").innerHTML = `
        <table>
          <thead><tr>
            <th>ID</th><th>Name</th><th>Icon</th><th>Desc</th><th>Price</th><th>Limit/Day</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>`;
    }
    window.adminSaveShop = function(idx){
      const t = document.getElementById("table-shop").getElementsByTagName('tbody')[0].rows[idx];
      const s = adminData.shop[idx];
      s.id = t.cells[0].querySelector('input[name="id"]').value;
      s.name = t.cells[1].querySelector('input[name="name"]').value;
      s.icon = t.cells[2].querySelector('input[name="icon"]').value;
      s.desc = t.cells[3].querySelector('input[name="desc"]').value;
      s.price = parseInt(t.cells[4].querySelector('input[name="price"]').value);
      s.limit_per_day = parseInt(t.cells[5].querySelector('input[name="limit_per_day"]').value);
      alert('💾 บันทึกร้านค้าสำเร็จ');
      renderShopTable();
    }

    // NOTIFY TABLE (local only!)
    function renderNotifyTable(){
      let rows = adminData.notify.map((n,i)=>`
        <tr>
          <td>${htmlInput(n.type,'type')}</td>
          <td>${htmlInput(n.icon,'icon')}</td>
          <td>${htmlInput(n.msg,'msg')}</td>
          <td>${htmlInput(n.time,'time')}</td>
          <td>
            <button class='admin-save-btn' onclick='adminSaveNotify(${i})'>💾</button>
            <button class='admin-del-btn' onclick='adminDelRow("notify",${i});saveNotifyLocal()'>🗑️</button>
          </td>
        </tr>
      `).join('');
      document.getElementById("table-notify").innerHTML = `
        <table>
          <thead><tr>
            <th>Type</th><th>Icon</th><th>ข้อความ</th><th>Time</th><th>Action</th>
          </tr></thead>
          <tbody>${rows}</tbody>
        </table>
        <div style="color:#09a;text-align:right">*การแก้ไขประกาศนี้ใช้ localStorage เท่านั้น (ไม่แก้ไขใน FriendEventUI.js อัตโนมัติ)</div>
      `;
      saveNotifyLocal();
    }
    function saveNotifyLocal(){
      localStorage.setItem('adminNotifyList',JSON.stringify(adminData.notify));
    }
    window.adminSaveNotify = function(idx){
      const t = document.getElementById("table-notify").getElementsByTagName('tbody')[0].rows[idx];
      const n = adminData.notify[idx];
      n.type = t.cells[0].querySelector('input[name="type"]').value;
      n.icon = t.cells[1].querySelector('input[name="icon"]').value;
      n.msg = t.cells[2].querySelector('input[name="msg"]').value;
      n.time = t.cells[3].querySelector('input[name="time"]').value;
      alert('💾 บันทึกประกาศสำเร็จ');
      renderNotifyTable();
    }
    // -- Export for external use --
    window.adminDelRow = adminDelRow;

    // -- Export JSON for download --
    // TODO: ให้กดปุ่ม Export สำหรับไฟล์แต่ละหมวด
    // ตัวอย่าง: function download(filename, data) { ... }
    // สามารถขยายได้ใน version ต่อไป

  </script>
</body>
</html>

ไฟล์ admin.css
/* admin.css */
body {
  background: #e9f6fa;
  font-family: 'Kanit', sans-serif;
  margin: 0;
  min-height: 100vh;
  color: #25395d;
}

/* ---------- LOGIN PAGE ---------- */
.login-box {
  background: #fff;
  border-radius: 15px;
  box-shadow: 0 2px 16px #b6ccef;
  padding: 2em 2.5em;
  min-width: 340px;
  max-width: 95vw;
  text-align: center;
}
.login-icon {
  font-size: 2.8em;
  color: #2176b5;
  margin-bottom: 10px;
  display: block;
}
h2, .dash-panel-title, .dash-title { font-weight: 700; letter-spacing: 1px;}
.login-box h2 { margin: 0 0 7px 0; color: #24678b;}
.login-input-group {
  margin: 1.4em 0 0.5em 0;
  display: flex;
  flex-direction: column;
  gap: 13px;
}
.login-input-group label {
  text-align: left;
  color: #4f6d87;
  font-size: 1.08em;
  margin-bottom: 2px;
}
.login-input-group input {
  padding: 8px 14px;
  font-size: 1.11em;
  border: 1.5px solid #b3d2e1;
  border-radius: 7px;
  transition: border 0.16s;
  outline: none;
}
.login-input-group input:focus { border: 1.8px solid #2383e2; }
.login-btn {
  margin-top: 1.3em;
  background: #2383e2;
  color: #fff;
  border: 0;
  border-radius: 7px;
  font-size: 1.18em;
  font-weight: bold;
  padding: 0.6em 2em;
  box-shadow: 0 4px 8px #a0cbfa60;
  cursor: pointer;
  transition: background 0.2s;
}
.login-btn:hover { background: #62b5e8; }
.error-msg {
  margin-top: 14px;
  color: #d53238;
  font-weight: 500;
  font-size: 1.06em;
  min-height: 1.2em;
}
.login-footer {
  margin-top: 1.5em;
  color: #8fa4b7;
  font-size: 0.97em;
  font-style: italic;
}
@media only screen and (max-width: 420px) {
  .login-box { min-width: 98vw; padding:1em 0.3em }
  .login-btn { width: 95vw; }
}

/* ---------- DASHBOARD ---------- */
.dash-container { max-width:1400px; margin:auto; padding:2em 1em; }
.dash-header {
  display: flex; align-items:center; margin-bottom:1.5em;
  border-bottom: 2px solid #cde5fc2b;
  padding-bottom: 7px;
}
.dash-title {
  font-size: 2.1em; font-weight: bold;
  color: #24678b;
  margin-right:1.2em;
  letter-spacing: 1px;
  display: flex; align-items: center;
}
.dash-title::before { content: "🛡️"; font-size: 1.15em; margin-right: 8px;}
.dash-user { color: #6e7b96; font-size:1.02em; margin-left:auto; }
.logout-btn {
  background: #e32536; color: #fff; border: 0;
  border-radius: 7px;
  padding: 9px 18px; font-size: 1em;
  font-weight: bold; cursor:pointer; margin-left:20px;
  box-shadow:0 1px 7px #fcd6d6a0;
  transition: background 0.13s;
}
.logout-btn:hover { background: #f96a63; }
.dash-nav {
  display:flex; gap:2em; margin-bottom: 1.5em; flex-wrap:wrap;
  border-bottom: 1px solid #c8eaf7;
}
.dash-nav button {
  background:#2f85fa; color:#fff; border:0;
  border-radius:8px; padding:11px 22px;
  font-size:1.12em; cursor:pointer; font-weight:600;
  box-shadow:0 2px 10px #d1e7fb30;
  transition: background 0.17s;
}
.dash-nav button.active, .dash-nav button:focus {
  background: #16ca90;
}
.dash-section {
  display:none;
  background:#fff; border-radius:18px;
  box-shadow:0 2px 16px #c0d8fc49;
  padding:2em 2.4em 2em 2em; margin-bottom:2em;
}
.dash-section.active { display:block; animation:fadeIn 0.3s;}
.dash-panel-title {
  color:#1c5ca3; margin-bottom:1.1em;
  font-size:1.38em; font-weight:bold; letter-spacing:1px;
  display: flex; align-items:center;
}
.dash-panel-title::before {
  content:"";
  font-size:1.15em;
  margin-right:7px;
  display: inline-block;
}
#character-admin .dash-panel-title::before {content:"👤";}
#gacha-admin .dash-panel-title::before {content:"🎲";}
#equipment-admin .dash-panel-title::before {content:"⚔️";}
#stages-admin .dash-panel-title::before {content:"🗺️";}
#quests-admin .dash-panel-title::before {content:"🏆";}
#shop-admin .dash-panel-title::before {content:"🛒";}
#notify-admin .dash-panel-title::before {content:"📢";}

.dash-footer {
  text-align:center; padding:.8em 0;
  color:#7b8ebd; font-size:0.97em;
  border-top: 1px solid #e4f2fa;
}

/* ---- Table Styles ---- */
.dash-table {overflow-x:auto;}
table { border-collapse: collapse; width: 100%; margin: 20px 0;}
th, td {
  border:1px solid #d0d8e4;
  padding:8px 13px; text-align:left;
  font-size: 1.07em;
}
th {
  background:#e6f2fe;
  color: #265c8d;
}
tr td:first-child {font-weight:bold;}
.dash-table input[type="text"],
.dash-table input[type="number"],
.dash-table select,
.dash-table textarea {
  font-family: inherit;
  padding: 3px 9px;
  border-radius: 5px;
  border: 1px solid #abcdf3;
  font-size:1em;
  margin-bottom: 2px;
  background: #fbfdff;
}
.dash-table textarea {
  min-height: 72px;
  max-width: 99%;
  font-family: 'Fira Mono', monospace, 'Kanit', sans-serif;
}

.admin-edit-btn, .admin-del-btn, .admin-save-btn, .admin-cancel-btn {
  padding:2px 15px;
  border-radius:5px; border:0;
  font-size:.97em; margin:0 2px; cursor:pointer;
}
.admin-edit-btn { background: #0682c2; color:#fff;}
.admin-del-btn { background: #e93523; color:#fff;}
.admin-save-btn { background: #14a15a; color:#fff;}
.admin-cancel-btn { background: #ddd; color:#1d1d1d;}
.admin-add-btn {
  background: #377fe9;
  color:#fff;
  border:0;
  padding:8px 19px;
  border-radius:7px;
  margin:12px 0;
  cursor:pointer;
  font-size:1em;
}
.admin-add-btn:hover {background: #49a5f5;}
/* visually support JSON textarea highlight (for stages) */
.dash-table textarea { background: #f3f7ff; }

/* ---------- Responsive ---------- */
@media (max-width: 700px){
  .dash-section {padding:1em .3em;}
  .dash-container {padding:1em .2em;}
  .dash-header .dash-title {font-size:1.36em;}
  .dash-nav button {font-size:1em;padding:8px 10px;}
  .admin-add-btn { padding:6px 10px;}
  table, th, td { font-size: 0.97em; }
}

/* ------ Admin notification and success ------ */
input:disabled, select:disabled {
  background: #f0f0fa;
  color: #888;
}

::-webkit-scrollbar-thumb { background: #d7e3ff; border-radius: 8px; }
::-webkit-scrollbar-track { background: #f0f3fc; }
::-webkit-scrollbar { width: 9px; }

.success-msg {
  color: #23c574;
  font-size: 1.05em;
  font-weight: bold;
  margin: 15px 0 10px 0;
  display: block;
}
.error-msg {
  color: #e23b3b;
  font-weight:bold;
  padding: 4px 0;
}

/* --- Icon as label style for better accessibility --- */
th::before, td::before {
  font-size: 1.13em;
  margin-right: 3px;
}

/* --- Misc --- */
button:focus { outline: 2px solid #256db1; }
input:focus, textarea:focus, select:focus { outline: 2px solid #12b3e5;}

/* override for textarea (not too high by default) */
.dash-table textarea {min-height:54px;}

/* Download/Export button (future) */
.admin-export-btn {
  background: #f6b300;
  color:#fff; border: 0; border-radius:6px;
  padding:5px 13px; margin-left:7px; cursor:pointer;
  font-size: 1em;
}
.admin-export-btn:hover {background: #ffdc81;}


ต่อไปต้องการให้เกมนี้ทำให้มันออนไลน์ได้ไม่ต้องใหญ่โตมาก อยากให้เครื่องหลักให้เป็นออนไลน์เกมนี้ได้แบบง่ายที่สุด ฉันไม่เป็นอะไรเลย