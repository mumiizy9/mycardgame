// BattleUI.js - UI ‡πÅ‡∏•‡∏∞ Logic ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ

let currentBattle = null;

async function initBattleUI(team = null, enemies = null) {
    const root = document.getElementById('battle-root');
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏° ‡πÉ‡∏´‡πâ mock ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!team || !enemies) {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å character.json ‡πÄ‡∏≠‡∏≤ 4 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å vs 2 ‡∏ï‡∏±‡∏ß
        const res = await fetch('./data/characters.json');
        const all = await res.json();
        team = all.slice(0, 4);
        enemies = [
            { ...all[3], stats: { ...all[3].stats }, name: "Grok (Boss)", level: 5 },
            { ...all[6], stats: { ...all[6].stats }, level: 4 }
        ];
        enemies.forEach(e => e.stats.hp += 700); // Boss hp ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    }
    currentBattle = new window.BattleEngine(team, enemies);

    renderBattleUI();
}

function renderBattleUI() {
    if (!currentBattle) return;
    const root = document.getElementById('battle-root');
    const state = currentBattle.getState();
    root.innerHTML = `
  <div class="battle-box">
    <h2>‚öîÔ∏è Auto Battle</h2>
    <div class="battle-teams">
      <div class="battle-team">
        <h3>‡∏ó‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h3>
        ${state.team.map((c, i) => `
          <div class="battle-char${c.hp <= 0 ? ' fainted' : ''}">
            <span class="battle-icon">&#128100;</span>
            ${c.name} <span class="battle-hp">${c.hp} / ${c.maxhp} HP</span>
          </div>
        `).join('')}
      </div>
      <div class="battle-team">
        <h3>‡∏ù‡πà‡∏≤‡∏¢‡∏®‡∏±‡∏ï‡∏£‡∏π</h3>
        ${state.enemy.map((c, i) => `
          <div class="battle-char${c.hp <= 0 ? ' fainted' : ''}">
            <span class="battle-icon">&#128128;</span>
            ${c.name} <span class="battle-hp">${c.hp} / ${c.maxhp} HP</span>
          </div>
        `).join('')}
      </div>
    </div>
    <div class="battle-control">
      <button onclick="battleNextTurn()" ${state.finished ? "disabled" : ""}>‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</button>
      <button onclick="battleAuto()" ${state.finished ? "disabled" : ""}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏ö</button>
      <button onclick="battleReset()">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï</button>
    </div>
    <div class="battle-log">
      <h4>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ</h4>
      <div id="battle-log-text"></div>
    </div>
    ${state.finished ? `<div class="battle-result">
      <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ: ${state.result === 'win' ? "&#x1F389; ‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞" : state.result === 'lose' ? "&#10060; ‡πÅ‡∏û‡πâ" : "&#9873; ‡πÄ‡∏™‡∏°‡∏≠"}</h3>
    </div>` : ''}
  </div>`;
    renderBattleLog();
}

function battleNextTurn() {
    currentBattle.nextTurn();
    renderBattleUI();
}
function battleAuto() {
    currentBattle.runAutoFull();
    renderBattleUI();
}
function battleReset() {
    initBattleUI(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
}
function renderBattleLog() {
    const logDiv = document.getElementById('battle-log-text');
    if (!logDiv) return;
    const logs = currentBattle.getLog();
    logDiv.innerHTML = logs.map(l => {
        if (l.type === 'attack') return `<div>üó°Ô∏è <b>${l.actor}</b> ‡πÇ‡∏à‡∏°‡∏ï‡∏µ <b>${l.target}</b> ‡∏î‡πâ‡∏ß‡∏¢ "${l.skill}" ${l.effect ? `‡∏ú‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©:${l.effect}` : ""} <b>- ${l.value} HP</b></div>`;
        if (l.type === 'heal') return `<div>üíö <b>${l.actor}</b> ‡∏ü‡∏∑‡πâ‡∏ô HP <b>+${l.value}</b></div>`;
        if (l.type === 'aoe') return `<div>üí• <b>${l.actor}</b> ‡πÉ‡∏ä‡πâ "${l.skill}" ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏´‡∏°‡∏π‡πà ‡∏ó‡∏∏‡∏Å‡∏®‡∏±‡∏ï‡∏£‡∏π -${l.value} HP</div>`;
        return `<div>${JSON.stringify(l)}</div>`;
    }).join('');
}

// export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö html
window.initBattleUI = initBattleUI;
window.battleNextTurn = battleNextTurn;
window.battleAuto = battleAuto;
window.battleReset = battleReset;
window.renderBattleUI = renderBattleUI;