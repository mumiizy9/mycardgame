ไฟล์ index.html
<!DOCTYPE html>
<html lang="th">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Epic Seven Card Auto Battle</title>
    <link rel="stylesheet" href="css/style.css" />
    <link rel="icon" href="favicon.ico" />

    <style>
      #mainBattlefield.hide { display:none; }
    </style>
</head>

<body class="dark-bg">

    <!-- NAVBAR -->
    <header>
        <nav class="navbar">
            <div class="logo">EPIC Seven - Card Battle</div>
            <ul class="menu">
                <li>
                    <!-- ปุ่มจัดทีม -->
                    <button id="btnTeam" onclick="window.location.href='team.html'">จัดทีม</button>
                </li>
                <!-- ตัดปุ่มต่อสู้ (battle) ออก -->
                <li>
                    <!-- ปุ่มเลือกด่าน/ผจญภัย -->
                    <button id="btnStage" onclick="openStageMapPopup()">ผจญภัย</button>
                </li>
                <li>
                    <button id="btnInventory" onclick="openPopup('inventory')">คลังไอเท็ม</button>
                </li>
                <li>
                    <button id="btnQuest" onclick="openPopup('quest')">เควสต์</button>
                </li>
                <li>
                    <button id="btnShop" onclick="openPopup('shop')">ร้านค้า</button>
                </li>
                <li>
                    <button id="btnGacha" onclick="openPopup('gacha')">กาชา</button>
                </li>
                <li>
                    <button id="btnCharacter" onclick="openPopup('characterCollection')">คลังตัวละคร</button>
                </li>
                <li>
                    <button id="btnAnnouncement" onclick="openPopup('announcement')">ประกาศ</button>
                </li>
                <li>
                    <button id="btnChat" onclick="openPopup('chat')">แชท</button>
                </li>
                <li>
                    <button id="btnLogin" onclick="openPopup('login')">เข้าสู่ระบบ</button>
                </li>
            </ul>
            <div class="profile">
                <span id="playerName"></span>
                <button id="btnLogin" onclick="openPopup('login')">เข้าสู่ระบบ</button>
            </div>
        </nav>
    </header>

    <!-- POPUP LAYER -->
    <div id="popupLayer"></div>

    <!-- MAIN BATTLE FIELD (จะถูกเปิดโดย js/stage.js เท่านั้น) -->
    <main id="mainBattlefield" class="hide">
        <section class="battlefield">
            <div class="card-row user">
                <!-- card generation by JS -->
            </div>
            <div class="card-row monster">
                <!-- card generation by JS -->
            </div>
            <div class="spd-bar-container">
                <!-- generated by JS -->
            </div>
        </section>
        <section class="battle-controls">
            <button id="btnStartAuto" class="primary-btn">Auto Battle</button>
            <button id="btnBack" class="secondary-btn">กลับ</button>
        </section>
    </main>

    <!-- FOOTER -->
    <footer>
        <small style="color: #aaa;">© 2024 - Epic Seven Fan Project Demo Frontend</small>
        <div id="footerLangMenu" style="margin-top:8px; text-align:center;"></div>
    </footer>

    <!-- JS -->
    <!-- (popupManager.js ก่อนทุกฟีเจอร์) -->
    <script src="js/popupManager.js"></script>
    <script src="js/utils.js"></script>
    <script src="js/reward.js"></script>
    <script src="js/team.js"></script>
    <script src="js/battle.js"></script>
    <script src="js/ai.js"></script>
    <script src="js/animationEngine.js"></script>
    <script src="js/effect.js"></script>
    <script src="js/result.js"></script>
    <script src="js/inventory.js"></script>
    <script src="js/upgrade.js"></script>
    <script src="js/rune.js"></script>
    <script src="js/gacha.js"></script>
    <script src="js/quest.js"></script>
    <script src="js/stage.js"></script>
    <script src="js/shop.js"></script>
    <script src="js/announcement.js"></script>
    <script src="js/redeem.js"></script>
    <script src="js/auth.js"></script>
    <script src="js/characterCollection.js"></script>
    <script src="js/passive.js"></script>
    <script src="js/chat.js"></script>
    <script src="js/gachaLog.js"></script>
    <script src="js/energy.js"></script>
    <script src="js/localization.js"></script>

    <!-- Menu MAP Popups -->
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // set playerName, noti, ... ตามของเดิม
        window.setPlayerName = function (name) {
          var el = document.getElementById('playerName');
          if (el) el.textContent = name || '';
        };
        window.setMenuNoti = function (btnId, show) {
          var btn = document.getElementById(btnId);
          if (btn) {
            if (show) btn.classList.add('noti');
            else btn.classList.remove('noti');
          }
        };

        // Map popup menu (ยกเว้น btnTeam, btnStage)
        var menu = [
          ['btnInventory', 'inventory'],
          ['btnQuest', 'quest'],
          ['btnShop', 'shop'],
          ['btnGacha', 'gacha'],
          ['btnCharacter', 'characterCollection'],
          ['btnAnnouncement', 'announcement'],
          ['btnChat', 'chat'],
          ['btnLogin', 'login']
        ];
        menu.forEach(function (pair) {
          var btn = document.getElementById(pair[0]);
          if (btn && !btn.onclick) btn.onclick = function () { openPopup(pair[1]); };
        });

        // ปุ่ม Stage Map เปิด Map Popup
        var btnStage = document.getElementById('btnStage');
        if (btnStage) {
          btnStage.onclick = function () {
            if (window.openStageMapPopup) window.openStageMapPopup();
          }
        }

        // ปุ่ม Auto Battle ใน mainBattlefield (จะถูกเริ่มเมื่อ stage.js ดึง wave แล้ว)
        var btnAuto = document.getElementById('btnStartAuto');
        if(btnAuto){
          btnAuto.onclick = function(){
            if(window.battleEngine && battleEngine.startBattle){
              battleEngine.startBattle();
            }
          };
        }

        // ปุ่ม "กลับ" = ซ่อนสนามรบ
        var btnBack = document.getElementById('btnBack');
        if(btnBack){
          btnBack.onclick = function(){
            document.getElementById('mainBattlefield').classList.add('hide');
          };
        }
      });
    </script>
</body>
</html>

ไฟล์ css/style.css
/* Main color theme */
:root {
  --dark-bg: #191c21;
  --panel-bg: #23242a;
  --pop-bg: #1d2230;
  --accent: #3fa8ff;
  --accent2: #ff6565;
  --secondary: #e6f1ff;
  --border: #33364a;
  --card-bg: #25293c;
  --font-main: 'Prompt', 'Sarabun', Arial, sans-serif;
}

body,
html {
  margin: 0;
  padding: 0;
  background: var(--dark-bg);
  color: var(--secondary);
  font-family: var(--font-main);
  font-size: 17px;
  transition: background 0.2s;
  height: 100%;
  min-height: 100vh;
}
.dark-bg {
  background: var(--dark-bg)!important;
}

header, nav {
  width: 100vw;
  background: var(--panel-bg);
  position: sticky; top: 0;
  z-index: 40;
}

.navbar {
  display: flex; justify-content: space-between;
  align-items: center; padding: 0.3em 3vw;
}
.logo {
  font-weight: bold;
  font-size: 1.2em;
  letter-spacing: 1px;
  color: var(--accent);
}
.menu {
  list-style: none; display: flex; align-items: center; gap: .6em;
  margin: 0; padding: 0;
}
.menu li button {
  background: transparent; border: none; color: var(--secondary);
  font-size: 1em; padding: .45em 1em;
  border-radius: 30px; cursor: pointer;
  transition: background .14s;
  position: relative;
}
.menu li button.noti::after {
  content: "";
  background: var(--accent2);
  width: 10px; height: 10px;
  border-radius:100%; position: absolute;
  top: .3em; right: .7em;
  box-shadow: 0 0 6px 3px #ffabab77;
}

.menu li button:hover,
.menu li button:focus {
  background: #2c2e39;
  color: var(--accent);
}
.profile { display: flex; align-items: center; gap: 1em; }
#playerName { font-weight: 600; }
.hide { display: none!important; }


/* ========== MAIN BATTLEFIELD ========== */
main#mainBattlefield {
  max-width: 1180px;
  margin: 1.3em auto 0 auto;
  background: var(--panel-bg);
  border-radius: 15px;
  box-shadow: 0 2px 50px #0004;
  padding: 1.2em .5em 1.5em .5em;
  min-height: 430px;
  display: block;
  transition: all .18s;
}
.battlefield {
  position: relative;
  width: 100%;
  min-height: 320px;
  background: linear-gradient(0deg, #202639 80%, #1a222e 100%);
  border-radius: 16px;
  margin: 0 auto 10px auto; 
  box-shadow: 0 0 35px 10px #04071c30 inset;
  overflow: hidden;
  padding: 1em 0;
}
.card-row {
  display: flex;
  justify-content: space-evenly;
  align-items: flex-end;
  margin: 0.4em auto;
  gap: 13px;
  min-height: 130px;
  z-index: 2;
  position: relative;
}

/* User's team on top, monsters below */
.card-row.user { margin-bottom: 46px; }
.card-row.monster { margin-bottom: 18px; }

.spd-bar-container {
  position: absolute; width: 100%;
  left: 0; top: 48%;
  transform: translateY(-50%);
  display: flex; justify-content: center;
  gap: 24px; pointer-events: none;
  z-index: 3;
}
.spd-bar {
  width: 90px; height: 8px;
  background: #303742;
  border-radius: 6px;
  margin-bottom: 3px;
  overflow: hidden;
  box-shadow: 0 2px 8px #0006 inset;
}
.spd-bar-fill {
  background: linear-gradient(90deg, var(--accent), #9be7ff 70%);
  height: 100%; border-radius: 6px;
  transition: width 0.23s;
}

.battle-controls {
  display: flex; justify-content: center;
  gap: 30px; padding: 1.2em 0;
}
.primary-btn, .secondary-btn {
  background: var(--accent);
  border: none;
  color: #fff;
  font-size: 1.04em;
  font-weight: bold;
  padding: .65em 2.2em;
  border-radius: 35px;
  cursor: pointer;
  letter-spacing: .05em;
  box-shadow: 0 2px 8px #41a5f68e;
  margin-bottom: .4em;
  transition: all .14s;
}
.primary-btn:hover { background: #135488;}
.secondary-btn {
  background: #373958; color: #ccd9ef; box-shadow: none;
}
.secondary-btn:hover { background: #29304b; color: #fff; }

/* CARD STYLE - for hero & monster */
.card {
  background: var(--card-bg);
  border-radius: 15px;
  box-shadow: 0 0 8px 1px #23294a78, 0 1px 0 #3fa8ff2a;
  width: 116px; min-height: 136px;
  position: relative;
  display: flex; flex-direction: column;
  align-items: center; justify-content: flex-end;
  transition: transform .16s;
  overflow: visible;
  border: 2px solid #1d2238;
}
.card .hero-img, .card .mon-img {
  width: 75px; height: 75px;
  border-radius: 50%;
  margin-top: 17px;
  background: #13131c;
  object-fit: cover; object-position: center;
  outline: 3px solid var(--accent);
  box-shadow: 0 0 12px #3fa8ff33;
}
.card .statbar {
  width: 85%; height: 8px;
  border-radius: 5px;
  margin: 5px auto 5px auto;
  background: #171c2d;
  box-shadow: 0 1px 8px #0006 inset;
  overflow: hidden;
}
.card .hp-fill {
  background: linear-gradient(90deg, #55dcab, #4e93f1 80%);
  height: 100%; border-radius: 3px;
  transition: width 0.27s;
}
.card .name {
  font-size: .98em; font-weight: bold; margin-top: 7px;
  text-shadow: 0 2px 9px #0008;
  color: #fff;
  letter-spacing: .03em;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 95px;
  text-align: center;
}
.card .damage-popup {
  position: absolute;
  left: 60%; top: 23%;
  font-size: 1.15em;
  color: var(--accent2);
  font-weight: bold;
  transform: translate(-50%, -60%) scale(1.05);
  opacity: 0;
  pointer-events: none;
  animation: damageJump .7s cubic-bezier(.5,-1, .2, 1.8) 1;
}

@keyframes damageJump {
  0%   { opacity: 0; transform: translate(-50%, -80%) scale(0.7);}
  21%  { opacity: 1; transform: translate(-50%, -120%) scale(1.2);}
  69%  { opacity: 1; transform: translate(-50%, -115%) scale(1.0);}
  100% { opacity: 0; transform: translate(-50%,-70%) scale(.60);}
}

/* Buff & debuff icon overlay on card */
.card .stat-icons {
  display: flex; flex-wrap: wrap;
  gap: 1px; margin-bottom: 4px; justify-content: center;
}
.card .stat-icon {
  width: 18px; height: 18px; border-radius: 50%;
  background: #232c48; border: 2px solid #6ad2ff77;
  display: flex; align-items: center; justify-content: center;
  font-size: 1em; margin-left: 1px;
  box-shadow: 0 0 5px #0088ffc9;
  position: relative;
  cursor: pointer;
}
.card .stat-icon.buff { border-color: #15ef92; }
.card .stat-icon.debuff { border-color: #eb5454; }

/* Tooltip */
.tooltip {
  position: absolute;
  left: 50%; bottom: 120%; z-index: 24;
  background: #22253c;
  color: #daf5ff;
  padding: 4px 12px;
  border-radius: 8px;
  font-size: .90em; min-width: 87px; max-width: 200px;
  box-shadow: 0 8px 25px #0079ff41;
  pointer-events: none; opacity: 0; transition: all .12s;
}
.stat-icon:hover .tooltip { opacity: 1; }

/* ========== POPUPS ========== */
#popupLayer {
  position: fixed;
  top:0; left:0; z-index: 99;
  width:100vw; height:100vh;
  display:flex; align-items:center; justify-content:center;
  background: #050925d8;
  pointer-events: none;
  opacity: 0;
  transition: opacity .18s;
}
#popupLayer.active {
  pointer-events: all; opacity: 1;
}
.popup {
  background: var(--pop-bg);
  border-radius: 18px;
  padding: 2em 1.5em 1.5em 1.5em;
  box-shadow: 0 0 80px #3138aa51, 0 1px 13px #49d9ff1b;
  min-width: 340px;
  min-height: 120px;
  max-width: 99vw;
  max-height: 90vh;
  overflow-y: auto;
  color: #fff;
  position: relative;
  animation: popupOpen .25s cubic-bezier(.7,0, .09,1.55);
}
@keyframes popupOpen {
 0% { transform: scale(.82) translateY(50px) rotate(-7deg);}
 100%{ transform: scale(1) translateY(0);}
}
.popup.large { min-width: 700px; max-width: 99vw; min-height: 340px;}
.popup.tall { min-height: 390px; max-width: 550px;}
.popup.small { min-width: 260px;max-width:327px;}

.popup .close {
  position:absolute;
  top:10px; right: 10px;
  background: #293e69;
  color: #dff6fc;
  border:none; font-size:1.45em;
  width:30px; height:30px;
  border-radius:100%; cursor:pointer;
  opacity: .85;
  z-index: 5;
  transition: background .15s;
}
.popup .close:hover { background: var(--accent2); color: #fff; }

/* Pop-up area blocks (for slot areas) */
#teamEditArea, #questArea, #gachaArea, #characterArea, #announcementArea,
#chatArea, #shopArea, #inventoryArea { margin: 16px 0 0 0;}

/* Input Buttons/Fields */
input, select, textarea {
  background: #1e2532;
  border: 2px solid #314a6a;
  color: #eee;
  padding: 9px 14px;
  border-radius: 9px;
  font-size: 1em; outline: none;
  margin: 5px 0;
  box-shadow: 0 2px 8px #0067ad20;
  transition: border .13s;
}
input:focus { border:2px solid var(--accent);}
input[type="password"] { letter-spacing: .2em; }

button:focus { outline: 2px solid var(--accent);}
button:active { filter: brightness(.93);}
::-webkit-scrollbar { width: 9px; background: #233;}
::-webkit-scrollbar-thumb { background: #303860; border-radius: 7px; box-shadow: 0 2px 12px #152a;}

/* Footer */
footer {
  margin: 0;
  background: #141520;
  color: #c9d1e6bb;
  text-align: center;
  font-size: .96em;
  padding: 16px 0 11px 0;
}

/* ========== RESPONSIVE DESIGN ========== */
@media (max-width: 750px) {
  .battlefield { min-height: 240px; }
  .card { width: 81px; min-height: 82px; }
  .card .hero-img, .card .mon-img { width: 52px; height: 52px;}
  .popup.large { min-width: 97vw;}
  .popup.tall { min-width: 97vw;}
  main#mainBattlefield { padding: .51em 0; border-radius: 6px;}
  .navbar { flex-direction:column; gap:.5em;}
  .menu { flex-wrap: wrap; gap: .19em 1em; margin-bottom:.3em;}
}

@media (max-width: 540px) {
  .card { width: 66px; }
  .popup { padding:1em .65em .8em .65em; }
}

ไฟล์ data/char/astra.json
{
  "id": "astra",
  "type": "hero",
  "name": "Astra",
  "element": "water",
  "class": "knight",
  "rarity": 5,
  "star": 5,
  "level": 1,
  "level_max": 50,
  "exp": 0,
  "exp_max": 600,
  "hp": 150064,
  "atk": 1016,
  "def": 59,
  "spd": 1000,
  "crit_rate": 15,
  "crit_dmg": 150,
  "effectiveness": 0,
  "resistance": 20,
  "skills": [
    {
      "id": "astra_s1",
      "name": "Sword Slash",
      "type": "attack",
      "desc": "โจมตีเป้าหมาย 1 ตัว มีโอกาสติด [def break] 1 เทิร์น",
      "multiplier": 1.02,
      "effect": {
        "debuff": [
          { "type": "def_break", "turn": 1, "chance": 35 }
        ]
      },
      "cooldown": 0
    },
    {
      "id": "astra_s2",
      "name": "Guardian Blessing",
      "type": "buff",
      "desc": "เพิ่ม DEFให้ทั้งทีม 2 เทิร์น",
      "multiplier": 0,
      "effect": {
        "buff": [
          { "type": "def_up", "turn": 1 }
        ]
      },
      "cooldown": 5
    },
    {
      "id": "astra_s3",
      "name": "Aegis Pierce",
      "type": "attack",
      "desc": "โจมตีหมู่ ศัตรูทุกตัว โอกาสติด stunned 1 เทิร์น",
      "multiplier": 1.7,
      "effect": {
        "debuff": [
          { "type": "stun", "turn": 3, "chance": 50 }
        ]
      },
      "cooldown": 3
    }
  ],
  "passive": "astra_passive",
  "img": "astra.png"
}

ไฟล์ team.html
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Epic Seven - จัดทีม</title>
    <link rel="stylesheet" href="css/style.css" />
</head>
<body class="dark-bg">

<header>
    <nav class="navbar">
        <div class="logo">EPIC Seven - Card Battle</div>
        <ul class="menu">
            <li><button onclick="window.location.href='index.html'">หน้าหลัก</button></li>
            <li><button onclick="window.location.href='team.html'" class="noti">จัดทีม</button></li>
            <li><button id="btnBack">กลับ</button></li>
        </ul>
        <div class="profile">
            <span id="playerName"></span>
            <button id="btnLogin">เข้าสู่ระบบ</button>
        </div>
    </nav>
</header>

<main id="mainTeamSetup" style="max-width: 1000px; margin:20px auto;background:var(--panel-bg);border-radius:12px;box-shadow:0 1px 20px #0006;padding:26px 8px;">
    <h2 style="margin-bottom:0.8em;">จัดทีมสำหรับต่อสู้</h2>
    <div class="team-section">
        <h3>ทีมของฉัน (สูงสุด 4 ตัว)</h3>
        <div id="teamSlotBar" class="card-row user"></div>
        <button class="primary-btn" id="btnSaveTeam" style="margin-top:18px;">บันทึกทีม</button>
    </div>
    <hr style="margin: 32px 0 18px 0; border:1px solid var(--border);">
    <h4>ตัวละครที่มี (ลากขึ้นข้างบนเพื่อจัดทีม)</h4>
    <div id="charCollection" class="card-row" style="flex-wrap:wrap; gap:15px 8px; justify-content:flex-start;"></div>
</main>

<div id="popupLayer"></div>

<footer>
    <small style="color: #aaa;">&copy; 2024 - Epic Seven Fan Project Demo Frontend</small>
</footer>

<script src="js/utils.js"></script>
<script src="js/team.js"></script>
</body>
</html>

ไฟล์ js/team.js
// js/team.js

const maxTeam = 4;
const baseCharIds = ['astra', 'slime_earth', 'slime_fire', 'slime_water'];

let allChars = []; // All user-owned char (metadata, not just id)
let team = [];     // Current team (ids, max length 4)

/**
 * Ensure user has at least 4 base characters in their collection.
 * If there's no char_collection, or empty, will add defaults.
 */
function ensureBaseCollection() {
    let stored = localStorage.getItem('char_collection');
    let arr = [];
    if (stored && stored.startsWith('[')) {
        try { arr = JSON.parse(stored); } catch { arr = []; }
    }
    let changed = false;
    if (!Array.isArray(arr)) arr = [];
    baseCharIds.forEach(id => { if (!arr.includes(id)) { arr.push(id); changed = true; } });
    if (!stored || changed) localStorage.setItem('char_collection', JSON.stringify(arr));
    return arr;
}

/**
 * Load character meta from user collection (char_collection)
 */
async function loadCharacters() {
    let charIds = ensureBaseCollection();
    const metas = await Promise.all(
        charIds.map(id => fetch(`data/char/${id}.json`).then(r => r.json()).catch(() => null))
    );
    allChars = metas.filter(Boolean); // only those found in meta
}

/**
 * Load team from LocalStorage
 */
function loadTeam() {
    let t = localStorage.getItem('userTeam');
    if (!t) team = [];
    else team = JSON.parse(t);
    // Remove team member if not in current owned char
    let userCharIds = allChars.map(c => c.id);
    team = team.filter(id => userCharIds.includes(id));
}

/**
 * Save team to LocalStorage (max 4, only ids in collection)
 */
function saveTeam() {
    team = team.filter(id => id && allChars.some(c => c.id === id));
    localStorage.setItem('userTeam', JSON.stringify(team));
    alert("บันทึกทีมสำเร็จ!");
}

/**
 * Render team slot bar
 */
function renderTeamBar() {
    const el = document.getElementById('teamSlotBar');
    if (!el) return;
    el.innerHTML = '';
    for (let i = 0; i < maxTeam; i++) {
        let char = allChars.find(c => c.id === team[i]);
        let slot = document.createElement('div');
        slot.className = 'card';
        slot.style.minHeight = "140px";
        slot.dataset.idx = i;
        if (char) {
            slot.innerHTML = `
                <img src="img/char/${char.img}" class="hero-img" alt="${char.name}">
                <div class="name">${char.name}</div>
                <button class="primary-btn" style="margin:7px 0 4px 0;font-size:.93em;" onclick="removeFromTeam(${i})">นำออก</button>
            `;
        } else {
            slot.innerHTML = `<div style="opacity:.44;margin-top:30px;text-align:center;">ว่าง</div>`;
            slot.style.background = '#262a39b2';
        }
        el.appendChild(slot);
    }
}

/**
 * Render character collection below the team area, drag-to-add
 */
function renderCharCollection() {
    const el = document.getElementById('charCollection');
    if (!el) return;
    el.innerHTML = '';
    allChars.forEach(c => {
        let inTeam = team.includes(c.id);
        let div = document.createElement('div');
        div.className = 'card';
        div.draggable = !inTeam;
        div.style.opacity = inTeam ? '.34' : '1.0';
        div.style.cursor = inTeam ? "not-allowed" : "grab";
        div.innerHTML = `
            <img src="img/char/${c.img}" class="hero-img" alt="${c.name}" >
            <div class="name">${c.name}</div>
            <div style="font-size:.92em;margin-bottom:3px;">Lv.${c.level} &nbsp; <small class="stat-bar">${c.hp} HP</small></div>
        `;
        // Show popup info on click
        div.addEventListener('click', e => { openCharInfoPopup(c); });

        // Drag: เลือกใส่ทีม
        div.addEventListener('dragstart', ev => {
            ev.dataTransfer.setData("text/plain", c.id);
        });

        el.appendChild(div);
    });

    // Team slot: drag over/drop
    const teamSlots = document.querySelectorAll('#teamSlotBar .card');
    teamSlots.forEach(slot => {
        slot.ondragover = e => { e.preventDefault(); slot.style.borderColor = '#49cfffa8'; };
        slot.ondragleave = e => { slot.style.borderColor = ''; };
        slot.ondrop = function(e) {
            e.preventDefault();
            let dragId = e.dataTransfer.getData("text/plain");
            let idx = Number(slot.dataset.idx);
            // only if not in team and exists in collection
            if (!team.includes(dragId) && allChars.some(ch => ch.id === dragId)) {
                team[idx] = dragId;
                saveTeam();
                renderTeamBar();
                renderCharCollection();
            }
        }
    });
}

/**
 * Remove character from team by slot index
 */
window.removeFromTeam = function(idx) {
    team[idx] = undefined;
    renderTeamBar();
    renderCharCollection();
}

/**
 * Popup: Character info
 */
function openCharInfoPopup(char) {
    closePopup();
    window.openPopup('charInfo', {
        char
    });
}

// Patch: Add charInfo popup template for UI
(function () {
    const origRenderPopup = window.renderPopup;
    window.renderPopup = function (type, data) {
        if (type === "charInfo" && data && data.char) {
            const c = data.char;
            return `<div class="popup" style="min-width:285px;">
                <button class="close" onclick="closePopup()">×</button>
                <img src="img/char/${c.img}" class="hero-img" style="margin:auto;display:block;" />
                <div class="name" style="text-align:center;">${c.name}</div>
                <div style="margin-top:8px;font-size:.97em;color:#87cdff;">Lv.${c.level} ★${c.star} <span> (${c.class})</span></div>
                <hr style="margin:8px 0 8px 0;border-color:#234;">
                <div><b>HP</b> ${c.hp} &nbsp; <b>ATK</b> ${c.atk} &nbsp; <b>DEF</b> ${c.def}</div>
                <div><b>SPD</b> ${c.spd} &nbsp; <b>CRIT%:</b> ${c.crit_rate}</div>
                <div><b>Skills</b>:</div>
                <ul>${c.skills.map(s => `<li><b>${s.name}</b>: ${s.desc}</li>`).join('')}</ul>
            </div>`;
        }
        return origRenderPopup(type, data);
    }
})();

/**
 * Save team button
 */
document.addEventListener('DOMContentLoaded', () => {
    const btnSaveTeam = document.getElementById('btnSaveTeam');
    if (btnSaveTeam) btnSaveTeam.onclick = saveTeam;
});

/**
 * Back button - return to homepage
 */
const btnBack = document.getElementById('btnBack');
if (btnBack) btnBack.onclick = () => { window.location.href = 'index.html'; }

/**
 * Initialize: load all step
 */
(async () => {
    await loadCharacters();
    loadTeam(); // after allChars loaded
    renderTeamBar();
    renderCharCollection();
})();

ไฟล์ js/battle.js
// js/battle.js - Epic Seven Card Battle NEW (2024/06 Rewrite By GPT-4)
// ระบบต่อสู้แบบ SPD BAR, AI Auto, Popup ดาเมจ/ฮีล, Event เชื่อม, รองรับโมดูลใหม่ (effect, passive, animation)

const CONFIG = { SPD_MAX: 100, SPD_FRAME: 120, MAX_HERO: 4, MAX_MON: 4 };
let Battle = {
    heroes: [],
    monsters: [],
    spdBar: [],
    auto: false,
    running: false,
};

// ----------------- LOAD TEAM & ENEMY -----------------
async function loadBattleTeams() {
    // Load user team
    let ids = JSON.parse(localStorage.getItem('userTeam') || "[]");
    Battle.heroes = [];
    for (let id of ids) {
        if (!id) continue;
        let c = await fetch(`data/char/${id}.json`).then(r => r.json());
        let meta = { ...c, currHp: c.hp, alive: true, buffs: [], debuffs: [], cooldowns: new Array((c.skills||[]).length).fill(0) };
        if (window.passiveEngine?.apply) await window.passiveEngine.apply(meta);
        Battle.heroes.push(meta);
    }
    // Load monsters ("monster_list" หรือ fallback)
    let mlist = [];
    try {
        mlist = JSON.parse(localStorage.getItem("monster_list") || '["slime_basic"]');
    } catch { mlist = ["slime_basic"]; }
    Battle.monsters = [];
    for (let i = 0; i < CONFIG.MAX_MON; i++) {
        let id = mlist[i % mlist.length];
        let c = null;
        try { c = await fetch(`data/monster/${id}.json`).then(r => r.json()); }
        catch { c = { id: "slime_basic", name: "Slime", hp: 300, atk: 18, def: 7, spd: 85, img: "slime_basic.png", skills: [] }; }
        let meta = { ...c, id: c.id + '_' + (i+1), currHp: c.hp, alive: true, buffs: [], debuffs: [], cooldowns: new Array((c.skills||[]).length).fill(0) };
        if (window.passiveEngine?.apply) await window.passiveEngine.apply(meta);
        Battle.monsters.push(meta);
    }
}

// ----------------- SPD BAR INIT -----------------
function initSpdBar() {
    Battle.spdBar = [];
    Battle.heroes.forEach((h,i) => Battle.spdBar.push(spdObject(h,i,"hero")));
    Battle.monsters.forEach((m,i) => Battle.spdBar.push(spdObject(m,i,"mon")));
}
function spdObject(c, idx, side) {
    return { id: `${side}${idx}`, idx, side, name:c.name, spd:c.spd, charge:0, dead:false, cooldowns:c.cooldowns, buffs:c.buffs, debuffs:c.debuffs };
}

// ----------------- RENDER FIELD + CARD -----------------
function renderBattlefield() {
    let heroRow = document.querySelector('.card-row.user');
    let monRow  = document.querySelector('.card-row.monster');
    if (heroRow) heroRow.innerHTML = '';
    if (monRow) monRow.innerHTML   = '';
    Battle.heroes.forEach((c, i) => heroRow?.appendChild(renderCardNew(c,i,"hero")));
    Battle.monsters.forEach((c, i) => monRow?.appendChild(renderCardNew(c,i,"mon")));
    // SPD Bars
    let bar = document.querySelector('.spd-bar-container');
    if (bar) bar.innerHTML = '';
    Battle.spdBar.forEach(obj=>{
        let wrap = document.createElement('div');
        wrap.className = 'spd-bar';
        wrap.title = `[${obj.side=="hero"?"Hero":"Monster"}] ${obj.name} SPD:${obj.spd}`;
        let fill = document.createElement('div');
        fill.className = 'spd-bar-fill';
        fill.style.width = Math.floor(Math.min(CONFIG.SPD_MAX, obj.charge)/CONFIG.SPD_MAX*100) + "%";
        wrap.appendChild(fill); bar?.appendChild(wrap);
    });
}
function renderCardNew(c, idx, side) {
    let d = document.createElement('div');
    d.className = 'card';
    d.id = `${side}${idx}`;
    d.setAttribute('data-idx', idx);
    d.setAttribute('data-side', side);
    let img = document.createElement('img');
    img.className = (side=="hero"?"hero-img":"mon-img");
    img.src = `img/char/${c.img}`;
    img.alt = c.name;
    d.appendChild(img);
    d.appendChild(divCls('name', c.name));
    // HP BAR
    let statbar = document.createElement('div');
    statbar.className = 'statbar';
    let hpfill = document.createElement('div');
    hpfill.className = 'hp-fill';
    let hpPer = Math.max(0, Math.min(1, c.currHp / c.hp));
    hpfill.style.width = (hpPer * 100) + "%";
    statbar.appendChild(hpfill);
    d.appendChild(statbar);
    // buffer and debuff icons
    let statIcons = document.createElement('div');
    statIcons.className = 'stat-icons';
    (c.buffs||[]).forEach(b => statIcons.appendChild(iconForStatus(b,"buff")));
    (c.debuffs||[]).forEach(b => statIcons.appendChild(iconForStatus(b,"debuff")));
    d.appendChild(statIcons);
    d.appendChild(divCls('', `HP ${Math.floor(c.currHp)}/${c.hp} SPD:${c.spd}`, {fontSize:".82em"}));
    return d;
}
function divCls(cls, txt, styleObj) {
    let d = document.createElement('div');
    if (cls) d.className = cls;
    d.innerText = txt;
    if (styleObj) Object.assign(d.style, styleObj);
    return d;
}
function iconForStatus(stat, type) {
    let e = document.createElement('div');
    e.className = 'stat-icon '+type;
    e.innerHTML = getStatEmoji(stat.type);
    e.title = (stat.type||"").toUpperCase()+(stat.turn?(" ("+stat.turn+"T)"):"");
    if (stat.turn && stat.turn > 0) {
        let lbl = document.createElement('small');
        lbl.style = "position:absolute;font-size:.79em;font-weight:bold;right:2px;bottom:1px;color:"+ (type=="buff"?"#42fcc1":"#ffc3a3");
        lbl.innerText = stat.turn;
        e.appendChild(lbl);
    }
    let tt = document.createElement('span');
    tt.className = 'tooltip';
    tt.innerText = statDesc(stat.type,type,stat);
    e.appendChild(tt);
    return e;
}
function statDesc(type, side, details) {
    // Short desc
    const lib = {def_break: 'DEF↓',def_up:'DEF↑',stun:'Stun',poison:'Poison',burn:'Burn',heal_ot:'HoT',spd_up:'SPD↑',spd_down:'SPD↓',immune:'Immune',silence:'Silence'};
    return (lib[type]||type) + (details.turn?(" ("+details.turn+" turn)"):"");
}
function getStatEmoji(t) {
    return {def_break:"🛠️",def_up:"🛡️",stun:"💫",heal_ot:"💚",poison:"☠️",burn:"🔥",spd_up:"💨",spd_down:"🐢",immune:"🔒",silence:"🔇"}[t] || "✨";
}

// ----------------- SHOW DAMAGE / HEAL popups -----------------
window.showDamage = function(idx, side, value, color='#ff5656') {
    let dom = document.getElementById(`${side}${idx}`);
    if (!dom) return;
    let pop = document.createElement('span');
    pop.className = 'damage-popup';
    pop.innerText = (value < 0 ? "+" : "-") + Math.abs(value);
    pop.style.color = color;
    dom.appendChild(pop);
    setTimeout(()=>pop.remove(), 900);
};

// ----------------- AUTO SPD BAR LOOP & TURNS -----------------
async function startBattle() {
    if (Battle.running) return; Battle.running = true; Battle.auto = true;
    async function loop() {
        while (Battle.running) {
            for (let i=0;i<Battle.spdBar.length;i++) {
                let bar = Battle.spdBar[i];
                if (bar.dead) continue;
                let charArr = (bar.side=="hero"?Battle.heroes:Battle.monsters);
                let char = charArr[bar.idx];
                // Process buffs/debuffs/HoT, before charge
                if (window.effectEngine?.processStatusTurn) window.effectEngine.processStatusTurn(char);
                if (char.currHp <= 0) { char.alive = false; bar.dead = true; continue; }
                if (window.effectEngine?.isStunnedOrSkipped?.(char)) {
                    bar.cooldowns.forEach((v, i, arr) => {if(arr[i]>0) arr[i]--;});
                    continue;
                }
                // Increase SPD
                bar.charge += spdChargeCurrent(bar);
                if (bar.charge >= CONFIG.SPD_MAX) {
                    bar.charge = 0;
                    await runTurn(bar);
                    renderBattlefield();
                    break; // pause, rerun
                }
            }
            checkBattleResult();
            renderBattlefield();
            await (window.animationEngine?.sleep ? window.animationEngine.sleep(CONFIG.SPD_FRAME) : new Promise(r=>setTimeout(r,CONFIG.SPD_FRAME)));
        }
    }
    loop();
}
function spdChargeCurrent(bar) {
    let spd = bar.spd, up=1.0;
    if (bar.buffs?.some(b => b.type=="spd_up")) up+=.3;
    if (bar.debuffs?.some(b => b.type=="spd_down")) up-=.3;
    return spd/10*up;
}
async function runTurn(bar) {
    let team = (bar.side=="hero"?Battle.heroes:Battle.monsters);
    let enemy = (bar.side=="hero"?Battle.monsters:Battle.heroes);
    let char = team[bar.idx];
    if (window.effectEngine?.processStatusTurn) window.effectEngine.processStatusTurn(char);
    if (window.effectEngine?.isStunnedOrSkipped?.(char)) {
        bar.cooldowns.forEach((v,i,arr)=>{if(arr[i]>0) arr[i]--;});
        return;
    }
    if (!char.alive) return;
    // AI pick skill+target
    let skill = window.aiPickSkill ? window.aiPickSkill(char, bar.cooldowns, team, enemy) : pickSkillFallback(char,bar);
    let targets = [];
    if (skill.type==="attack" && (skill.multiplier > 1.2 || skill.type==='aoe')) targets = enemy.filter(e=>e.alive);
    else if (skill.type==="attack") targets = [pickTargetFallback(enemy, skill)];
    else if (skill.type==="buff") targets = team.filter(c=>c.alive);
    else if (skill.type==="heal") targets = [pickTargetFallback(team, skill)];
    targets = (targets||[]).filter(Boolean);
    // Animation
    if (window.animationEngine) {
        if (skill.type==="attack" && targets[0]) {
            let ti = enemy.indexOf(targets[0]);
            await window.animationEngine.animateAttackCard(bar.idx, ti, bar.side, bar.side=="hero"?"mon":"hero");
        }
        if ((skill.type==="attack" && skill.multiplier>1.2 && targets.length>1) || skill.type==="aoe") {
            let tiarr = targets.map(t=>enemy.indexOf(t));
            await window.animationEngine.animateAoEAttack(bar.idx, bar.side, bar.side=="hero"?"mon":"hero", tiarr);
        }
        if (skill.type==="heal") await window.animationEngine.animateHeal(bar.idx, bar.side);
        if (skill.type==="buff") await window.animationEngine.animateBuffDebuff(bar.idx, bar.side, "buff");
    }
    // Apply skill
    await doSkillNew(char, skill, targets, bar.side);
    // Cooldown
    if (skill.cooldown) bar.cooldowns[char.skills.findIndex(s=>s.id==skill.id)] = skill.cooldown+1;
    bar.cooldowns.forEach((v,i,arr)=>{if(arr[i]>0) arr[i]--;});
}
function pickSkillFallback(char,bar) {
    let order = [2,1,0];
    for (let i of order) if (char.skills?.[i] && bar.cooldowns[i]<=0) return char.skills[i];
    return char.skills?.[0];
}
function pickTargetFallback(arr,skill) {
    arr = arr.filter(c=>c.alive);
    if (skill?.type==="heal") return arr.sort((a,b)=>a.currHp/a.hp-b.currHp/b.hp)[0];
    return arr.sort((a,b)=>a.currHp-b.currHp)[0];
}

// ----------------- APPLY SKILL -----------------
async function doSkillNew(user, skill, targets, side) {
    if (!targets) return;
    for (let t of targets) {
        if (!t.alive) continue;
        // Heal
        if (skill.type=="heal") {
            let val = Math.floor(user.atk*0.7 + user.level*1.5);
            t.currHp = Math.min(t.hp, t.currHp + val);
            window.showDamage?.(t.index, t.side, -val, "#59f495"); // heal popup
            t.alive = t.currHp > 0;
            continue;
        }
        // Buff
        if (skill.type=="buff" && skill.effect?.buff)
        {
            window.effectEngine?.addEffect?.(t, skill.effect.buff, "buff");
            continue;
        }
        // Attack/AoE
        let dmg = Math.floor(user.atk * (skill.multiplier||1) * (1 + (user.crit_rate||0)/100));
        let defReduce = t.debuffs?.some(d=>d.type=="def_break") ? 1.4 : 1;
        let defVal = t.def*defReduce;
        dmg = Math.max(Math.floor(dmg - defVal/3), 1);
        if (Math.random()*100 < (user.crit_rate||0)) dmg = Math.floor(dmg * ((user.crit_dmg||150)/100));
        t.currHp = Math.max(0, t.currHp - dmg);
        t.alive = t.currHp > 0;
        window.showDamage?.(t.index, t.side, dmg, "#ff5656");
        // Debuff
        if (skill.effect?.debuff) {
            window.effectEngine?.addEffect?.(t, skill.effect.debuff, "debuff");
        }
        // Passive: onDamaged
        if (window.passiveEngine?.trigger) window.passiveEngine.trigger("onDamaged", t, {attacker:user,skill});
    }
}

// ----------------- RESULT CHECK ----------------
function checkBattleResult() {
    let aliveH = Battle.heroes.some(c=>c.alive);
    let aliveM = Battle.monsters.some(c=>c.alive);
    if (!aliveH || !aliveM) {
        Battle.running = false;
        showBattleResultPop(aliveH ? "win" : "lose");
    }
}
function showBattleResultPop(state) {
    if (window.renderBattleResult)
        window.renderBattleResult({ state });
    else setTimeout(()=>{
        openPopup('battleResult', {
            state
        });
    },800);
}

// ----------- DOM STARTUP: START/RENDER -----------
document.addEventListener('DOMContentLoaded', ()=>{
    let btn = document.getElementById('btnStartAuto');
    if (btn) btn.onclick = async()=>{
        Battle.auto = true;
        await loadBattleTeams();
        initSpdBar();
        renderBattlefield();
        startBattle();
    };
    if(document.getElementById('mainBattlefield') && !document.getElementById('mainBattlefield').classList.contains('hide')) {
        loadBattleTeams().then(()=>{
            initSpdBar();
            renderBattlefield();
        });
    }
});

// ----------- HELPER: deepcopy for char/monster -----------
function deepCopy(obj) { return JSON.parse(JSON.stringify(obj)); }

// ----------- EXPORT Global API -----------
window.battleEngine = {
    loadBattleTeams, initSpdBar, renderBattlefield, startBattle,
    get heroes() { return Battle.heroes; },
    get monsters() { return Battle.monsters; },
    get speedBars() { return Battle.spdBar; }
};

ไฟล์ js/ai.js
// js/ai.js
/**
 * Epic Seven - AI Auto Battle Engine (แยก Module)
 * ใช้เลือก skill และ target ใน battle.js
 */

/**
 * Pick skill ที่ควรใช้ (เลือกโดย AI) - แบบ modular
 * @param {Object} char - (obj) ตัวละคร
 * @param {Array<number>} cooldowns - cooldown แต่ละ skill [s1, s2, s3...]
 * @param {Array<Object>} allies - ฝั่งเดียวกัน (obj)
 * @param {Array<Object>} enemies - ฝั่งตรงข้าม (obj)
 * @return {Object} skill ที่จะใช้
 */
function aiPickSkill(char, cooldowns, allies, enemies) {
    // ถ้ามีบัฟ, heal, ใช้ skill aoe ก่อน (ลำดับ: AoE > Heal/Buff > Single)
    // ใช้เงื่อนไข HP ต่ำ, ศัตรูมาก/น้อย, หรือ CD climate
    let skills = char.skills || [];
    let usable = skills.map((s, i) => ({...s, cd: cooldowns[i] || 0, idx: i }))
        .filter(s => s.cd === 0);

    // (1) Heal/Buff - ใช้ทันทีถ้ามีใน usable skill
    for (let s of usable) {
        if (s.type === 'heal' && needHeal(allies)) return s;
        if (s.type === 'buff' && needBuff(allies, s)) return s;
    }

    // (2) AoE - ถ้า AoE และฝั่งศัตรูมี 2 ตัว+ (หรือ priority)
    for (let s of usable) {
        if ((s.type === 'attack' || s.type === 'aoe') && s.multiplier > 1.5 && (living(enemies) > 1)) {
            return s;
        }
    }

    // (3) Debuff - ตีเป้าที่บัฟแข็งแกร่ง (def break/stun)
    for (let s of usable) {
        if (s.effect && s.effect.debuff) return s;
    }

    // (4) Single Attack - เลือก default
    if (usable.length > 0) return usable[0];
    // fallback: skill 1
    return skills[0];
}

/**
 * Pick target ที่ควรโจมตี (AI)
 * @param {Array<Object>} arr - เป้าหมาย (obj)
 * @param {Object} skill - skill ที่จะใช้
 * @return {Object}
 */
function aiPickTarget(arr, skill = null) {
    // ตีตัว HP น้อยสุดก่อน เว้นถ้า skill เป็น heal/buff
    arr = arr.filter(c => c.alive);
    // Heal: หาเป้าคือฝั่งเรา (lowest HP)
    if (skill && skill.type === 'heal') {
        return arr.sort((a, b) => a.currHp / a.hp - b.currHp / b.hp)[0];
    }
    // Buff: เลือกตัวฝั่งเรา alive
    if (skill && skill.type === 'buff') {
        // แล้วแต่ logic   --> ใส่ให้ทุกคน เลือก index 0
        return arr[0];
    }
    // AoE: ทุกตัวเลย
    if (skill && (skill.type === 'aoe' || (skill.type === 'attack' && skill.multiplier > 1.5))) {
        return arr; // ทั้งแถว enemy
    }
    // Debuff: ตี tank ก่อน (defense/high HP), ถ้าไม่เน้น หา HP น้อยสุด
    let sorted = arr.sort((a, b) => a.currHp - b.currHp);
    return sorted[0];
}

/**
 * ใครในทีม HP ต่ำกว่า 60% ให้ heal
 * @param {Array<Object>} team
 */
function needHeal(team) {
    for (let c of team) {
        if (c.alive && c.currHp / c.hp < 0.6) return true;
    }
    return false;
}

/**
 * เช็คว่าบัฟที่ skill นี้ให้ มีอยู่ในทีมแล้วหรือยัง (ถ้ามีแล้วข้าม)
 * @param {Array<Object>} team
 * @param {Object} skill
 */
function needBuff(team, skill) {
    let buffs = (skill && skill.effect && skill.effect.buff) || [];
    for (let btype of buffs.map(b => b.type)) {
        // ถ้า buff นี้ทุกคนในทีมมีอยู่แล้วหมด ไม่ต้องใช้
        let count = team.filter(c => c.alive && c.buffs && c.buffs.some(bf => bf.type === btype)).length;
        if (count < team.length) return true; // ยังมีคนไม่ได้ buff นี้
    }
    return false;
}

/**
 * จำนวนเป้าหมายที่ยังไม่ตาย
 */
function living(arr) {
    return arr ? arr.filter(c => c.alive).length : 0;
}

// ---- สำหรับใช้งานกับ battle.js ----
// Expose เป็น global เพื่อเรียกใช้
window.aiPickSkill = aiPickSkill;
window.aiPickTarget = aiPickTarget;

ไฟล์ js/animationEngine.js
/* Epic Seven Card Auto Battle - Animation Engine */
/* วางใน /js/animationEngine.js */

window.animationEngine = (function () {
    /** Card slide animation to attack */
    async function animateAttackCard(fromIdx, toIdx, fromSide, toSide, type = 'single') {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        const toCard = document.getElementById(`${toSide}${toIdx}`);
        if (!fromCard || !toCard) return;
        // สร้าง overlay
        const rectFrom = fromCard.getBoundingClientRect();
        const rectTo = toCard.getBoundingClientRect();
        // Absolute overlay clone
        const clone = fromCard.cloneNode(true);
        clone.style.position = "fixed";
        clone.style.left = rectFrom.left + 'px';
        clone.style.top = rectFrom.top + 'px';
        clone.style.width = rectFrom.width + 'px';
        clone.style.zIndex = "2000";
        clone.style.transition = 'all 0.35s cubic-bezier(.6,0,.2,1.4)';
        // Hide original
        fromCard.style.opacity = "0.4";
        document.body.appendChild(clone);
        await sleep(30);

        // เลื่อนการ์ดไปตำแหน่งเป้าหมาย
        clone.style.left = rectTo.left + 'px';
        clone.style.top = rectTo.top + 'px';
        clone.style.boxShadow = "0 0 32px #e7ff79c8, 0 0 80px #e3e37044";
        clone.style.transform = "scale(1.10) rotate(-3deg)";
        await sleep(330);

        // Flash/Shake เป้าหมาย
        shakeCard(toCard);
        // Remove overlay
        setTimeout(() => {
            clone.remove();
            fromCard.style.opacity = "1";
        }, 110);

        await sleep(180);
    }

    /** AoE Animation (wave blast) */
    async function animateAoEAttack(fromIdx, fromSide, toSide, targets) {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        if (!fromCard) return;
        // Pulse the card
        pulseCard(fromCard, "#f2d13e");
        // Wave line to center
        targets.forEach((t) => {
            const tgt = document.getElementById(`${toSide}${t}`);
            if (tgt) {
                flashCard(tgt, "#ffd058");
                shakeCard(tgt);
            }
        });
        await sleep(340);
    }

    /** Heal effect (green glow, upward effect) */
    async function animateHeal(toIdx, toSide) {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, "#68eccc");
        // Heal "plus" popup up
        let plus = document.createElement('span');
        plus.textContent = "+HP";
        plus.style = "color:#68fdd8;font-weight:bold;font-size:1.18em;position:absolute;left:42%;top:17%;opacity:0;transition:top .4s,opacity .2s;";
        tgt.appendChild(plus);
        setTimeout(() => {
            plus.style.top = "-6%";
            plus.style.opacity = "1";
        }, 20);
        setTimeout(() => plus.remove(), 650);
        await sleep(390);
    }

    /** Buff/Debuff effect on card */
    async function animateBuffDebuff(toIdx, toSide, type = "buff") {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, type === "buff" ? "#98deff" : "#ff7b7b");
        await sleep(260);
    }

    // --- Utilities (Shake, Glow, Flash, Pulse) ---
    function shakeCard(card) {
        if (!card) return;
        card.animate([
            { transform: "translateX(0)" },
            { transform: "translateX(-12px)" },
            { transform: "translateX(13px)" },
            { transform: "translateX(-7px)" },
            { transform: "translateX(0)" }
        ], { duration: 320, easing: "ease-in" });
    }
    function glowCard(card, color) {
        if (!card) return;
        card.style.boxShadow = `0 0 15px 6px ${color}66`;
        setTimeout(() => (card.style.boxShadow = ""), 380);
    }
    function flashCard(card, color = "#fff") {
        if (!card) return;
        card.style.background = color;
        setTimeout(() => (card.style.background = ""), 170);
    }
    function pulseCard(card, color) {
        if (!card) return;
        card.animate([
            { boxShadow: `0 0 0px 0px ${color}40` },
            { boxShadow: `0 0 15px 8px ${color}bb` },
            { boxShadow: `0 0 0px 0px ${color}00` }
        ], { duration: 410 });
    }
    function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

    // --- Expose ---

    return {
        animateAttackCard,
        animateAoEAttack,
        animateHeal,
        animateBuffDebuff,
        shakeCard,
        glowCard,
        flashCard,
        pulseCard,
        sleep
    };
})();

ไฟล์ js/effect.js
// effect.js - Rewrite ver (by GPT-4, 2024)
// Epic Seven Card Battle: Effect System (Buff/Debuff/Heal/Process Turn/Stack)
// ออกแบบใหม่ ไม่ใช้โค้ดเดิม (คลีนและอ่านง่ายกว่าเดิม)
// ใช้ร่วมกับ: battle.js, ai.js, animationEngine.js

/**
 * เพิ่มสถานะ (Buff หรือ Debuff) ให้ character
 * @param {Object} target - ตัวละครเป้าหมาย
 * @param {Array|Object} effects - [{type, turn, chance}]
 * @param {String} effectType - 'buff' หรือ 'debuff'
 */
function addEffectV2(target, effects, effectType) {
  if (!target || !effects) return;
  if (!Array.isArray(effects)) effects = [effects];

  // Ensure buffs/debuffs field
  if (!target.buffs) target.buffs = [];
  if (!target.debuffs) target.debuffs = [];

  for (const effect of effects) {
    if (!effect || !effect.type) continue;

    // Immunity (debuff only)
    if (
      effectType === "debuff" &&
      Array.isArray(target.buffs) &&
      target.buffs.some(b => b.type === "immune" && b.turn && b.turn > 0)
    ) {
      // ยกเว้น stun/burn/poison ยังติด
      if (!["stun", "burn", "poison"].includes(effect.type)) continue;
    }

    // Non-stack (default), Stackable (burn/poison)
    let canStack = ["burn", "poison"].includes(effect.type);
    let existing =
      effectType === "buff"
        ? target.buffs.find(b => b.type === effect.type)
        : target.debuffs.find(d => d.type === effect.type);

    if (!canStack && existing) continue;

    // Chance
    if (typeof effect.chance === "number") {
      if (Math.random() * 100 > effect.chance) continue; // Failed to proc
    }

    let effObj = { ...effect };
    // (clone, so each has separate turn etc)
    if (effectType === "buff") target.buffs.push(effObj);
    else target.debuffs.push(effObj);
  }
}

/**
 * เมื่อเริ่ม turn ใหม่ หรือเปลี่ยนเทิร์น เรียกเพื่อลด turn & trigger effect
 * @param {Object} char
 */
function processStatusEachTurn(char) {
  if (!char) return;
  ["buffs", "debuffs"].forEach(group => {
    if (!Array.isArray(char[group])) return;
    // countdown
    for (let i = char[group].length - 1; i >= 0; i--) {
      let st = char[group][i];
      if (typeof st.turn === "number" && st.turn > 0) st.turn--;
      // Remove if expired
      if (st.turn === 0) char[group].splice(i, 1);
    }
  });

  // === ACTIVE EFFECTS ===
  // Debuff: Poison/Burn
  if (Array.isArray(char.debuffs)) {
    char.debuffs.forEach(d => {
      if (d.type === "poison") {
        let val = Math.max(1, Math.round(char.hp * 0.05));
        char.currHp = Math.max(0, char.currHp - val);
        showStatusPopup(char, -val, "#ffea80"); // yellow
      }
      if (d.type === "burn") {
        let val = Math.max(1, Math.round(char.hp * 0.12));
        char.currHp = Math.max(0, char.currHp - val);
        showStatusPopup(char, -val, "#ff6100");
      }
    });
  }
  // Buff: Heal Over Time
  if (Array.isArray(char.buffs)) {
    char.buffs.forEach(b => {
      if (b.type === "heal_ot") {
        let val = Math.max(1, Math.round(char.hp * 0.06));
        char.currHp = Math.min(char.hp, char.currHp + val);
        showStatusPopup(char, val, "#2ae5a4");
      }
    });
  }
}

/**
 * ตรวจสอบว่าตัวละครนี้โดน stun หรือ skip turn (เช่น stun, sleep, freeze, silence ฯลฯ)
 * @param {Object} char
 * @returns {Boolean}
 */
function isTurnSkipStatus(char) {
  if (!char || !char.debuffs) return false;
  const effectNames = ["stun", "sleep", "freeze", "silence"];
  return char.debuffs.some(b => effectNames.includes(b.type));
}

/**
 * ลบ buff หรือ debuff หรือทั้งหมด
 * @param {Object} char
 * @param {String} [type="all"] - 'buff'|'debuff'|'all'
 */
function clearStatus(char, type = "all") {
  if (!char) return;
  if (type === "all" || type === "buff") char.buffs = [];
  if (type === "all" || type === "debuff") char.debuffs = [];
}

/**
 * ฟังก์ชันแสดงดาเมจ/ฮีล เป็น popup (เชื่อมกับ window.showDamage)
 */
function showStatusPopup(char, value, color = "#ff7777") {
  // value > 0 : heal, <0 : dmg
  // Find side, index for rendering (if available)
  let side = char.side || "hero",
    idx = typeof char.index === "number" ? char.index : 0;
  if (window.showDamage) window.showDamage(idx, side, value, color);
}

// -- EXPORT: API Global --
window.effectEngine = {
  addEffect: addEffectV2,
  processStatusTurn: processStatusEachTurn,
  isStunnedOrSkipped: isTurnSkipStatus,
  removeStatus: clearStatus
};

ไฟล์ js/result.js
// result.js (รีไรท์ใหม่หมด 2024/06, โค้ดไม่ซ้ำเดิม)
// Epic Seven Card Battle - Modular Result + Reward System

/*
  Design Objectives:
    - Single responsibility: จัดการผลลัพธ์หลังจบด่านอย่างเดียว
    - ง่ายต่อ test, ปรับ theme, ต่อกับ reward/inventory/character
    - ไม่ชนกับ UI บาท, ทุก event/การแจ้งเตือนผลลัพธ์ ต้อง popup เดียว, ไม่แจม slide ดาเมจ
    - ต่อกับระบบ core ผ่านฟังก์ชัน API เหมือนเดิม (window.renderBattleResult, rewardEngine.give ฯลฯ)
    - Customizable hook พร้อม afterClose/callback แบบ Promise
*/

// =================[ STATE + CONST ]=================

const RESULT_POPUP_ID = "battleResultV2";

// =================[ MAIN CONTROLLER ]=================

/**
 * รับผลการต่อสู้ หลัง battle/stage จบ เพื่อ popup exp, ดรอป, level up, ฯลฯ
 * @param {Object} params - { state, heroes, monsters, drops, exp, afterClose }
 */
window.renderBattleResult = async function (params = {}) {
  // Basic fields
  const result = Object.assign(
    { state: "lose", exp: null, drops: [], heroes: null },
    params
  );
  // 1. โหลดทีม user ข้ามลำดับเพื่อความมั่นใจ meta+exp sync
  const teamIds = loadUserTeam();
  const heroList = await getCharList(teamIds);
  // 2. Calculate EXP
  const exp = Number.isFinite(result.exp)
    ? result.exp
    : (result.state === "win"
        ? getCfg("exp.base_win", 60)
        : getCfg("exp.base_lose", 18));
  const dropItems = Array.isArray(result.drops) ? mergeRewards(result.drops) : [];
  // 3. จัดการเควสต์/mission เพิ่ม tracking หรือแก้ไขได้ผ่าน hook:
  if (typeof window.increaseQuestProgress === "function" && result.state === "win") {
    window.increaseQuestProgress("daily_login");
  }
  // 4. อัปเดต EXP/เลเวล พร้อม list ที่ up
  const levelUpNames = processLevel(heroList, exp);
  // 5. ให้รางวัล (item, char ลง inventory)
  giveReward(dropItems);
  // 6. Render popup
  const html = genResultHTML(result, heroList, exp, dropItems, levelUpNames);
  window.openPopup(
    RESULT_POPUP_ID,
    html,
    "large",
    result.state === "win" ? t("popup.result_win") : t("popup.result_lose"),
    {
      onClose: typeof result.afterClose === "function"
        ? result.afterClose
        : undefined,
    }
  );
  // เชื่อม stageEngine
  if (typeof window.stageEngine?.end === "function" && result.stage) {
    window.stageEngine.end(result.state);
  }
};

// =================[ CORE LOGIC + REWARDS ]=================

function processLevel(heroList, expUp) {
  let list = [];
  for (let i = 0; i < heroList.length; ++i) {
    const c = heroList[i];
    if (!c) continue;
    let baseLv = c.level || 1,
      baseExp = c.exp || 0,
      maxExp = c.exp_max || 99999;
    c.exp = baseExp + expUp;
    let up = false;
    while (c.exp >= maxExp) {
      c.exp -= maxExp;
      c.level = (c.level || 1) + 1;
      up = true;
    }
    if (up) list.push(c.name);
    // sync
    localStorage.setItem("char_" + c.id, JSON.stringify(c));
  }
  return list;
}

function giveReward(arr) {
  if (!arr || !arr.length) return;
  arr.forEach(rw => {
    if (rw.type === "item") window.addToInventory?.(rw.id, rw.qty);
    if (rw.type === "character") window.collectCharacter?.(rw.id);
  });
}

function mergeRewards(rew) {
  let byId = {};
  (rew || []).forEach(r => {
    if (!r || !r.id) return;
    let k = r.type + ":" + r.id;
    if (!byId[k]) byId[k] = { ...r, qty: r.qty || 1 };
    else byId[k].qty += r.qty || 1;
  });
  return Object.values(byId);
}

// =================[ HTML RENDER ]=================

function genResultHTML(result, heroList, exp, dropItems, levedNames) {
  let html = '';
  // Header/State
  html += `<div style="text-align:center;font-size:2em;margin:2px 0 14px 0;">
    ${result.state === "win"
      ? "🏆 <b style='color:#4ffcbb'>" + t("popup.result_win") + "</b>"
      : "❌ <b style='color:#fb6'>" + t("popup.result_lose") + "</b>"}
    </div>
    <div style="font-size:1.13em;text-align:center;color:#aef;margin-bottom:7px;">
      ${t('battle.exp_gain')} +${exp}
    </div>
    <hr style="margin:11px 0 17px 0;border-color:#1888b088;">
  `;
  // Team heroes
  html += `<table style="width:98%;margin:0 auto 1em auto;"><tr>`;
  html += heroList
    .map(
      h =>
        `<td style="text-align:center;">
         <img src="img/char/${h.img || "noimg.png"}" alt="${h.name}" style="width:34px;border-radius:50%;box-shadow:0 0 9px #5affb7ee;"><br>
         <b>${h.name || "-"}</b><br>
         Lv.${h.level || "-"} ${
           levedNames.includes(h.name)
             ? '<span style="color:#59ff32;"> ↑UP!</span>'
             : ""
         }
        </td>`
    )
    .join("");
  html += `</tr></table>`;

  // Rewards
  if (dropItems.length) {
    html += `<div style="margin:9px 0;font-size:1.08em;color:#fffdbe;">
      ${t('battle.drop_items')} :
    </div>`;
    html += `<div style="display:flex;flex-wrap:wrap;gap:13px 16px;margin-bottom:1em;">`;
    dropItems.forEach(rw => {
      if (rw.type === "item") {
        const meta = window.inventoryEngine?.findItemById(rw.id) || {};
        html += `<div style="background:#26293d;border-radius:9px;padding:9px 11px;">
          <img src="img/item/${meta.img || "noimg.png"}" style="width:25px;border-radius:7px;"><br>
          ${meta.name || rw.id} <br>
          <span style="color:#aff;font-weight:700;">x${rw.qty}</span>
        </div>`;
      } else if (rw.type === "character") {
        html += `<div style="background:#413d23bb;border-radius:9px;padding:8px 10px;">
          <img src="img/char/${rw.id}.png" style="width:27px;border-radius:7px;"><br>
          <span style="color:#acf;font-weight:bold;">${rw.id}</span> 🎴
        </div>`;
      }
    });
    html += `</div>`;
  } else {
    html += `<div style="color:#9df;text-align:center;margin-top:.6em;">${t('inventory.no_item')}</div>`;
  }

  // Button
  html += `<div style="margin:2em 0 0 0;text-align:center;">
      <button class="primary-btn" onclick="closeResultAndReturn()" style="padding:.73em 2.7em;font-size:1.1em;">${t("popup.ok")}</button>
    </div>`;
  return html;
}

// =================[ API: ปิด popup, รีเฟรช ]=================

window.closeResultAndReturn = function () {
  window.closePopup?.(RESULT_POPUP_ID);
  // Reload or return, depends on page/context
  if (
    window.location.pathname.endsWith("index.html") &&
    typeof window.renderBattlefield === "function"
  ) {
    window.renderBattlefield();
  }
  if (typeof window.openStageMapPopup === "function") {
    setTimeout(() => window.openStageMapPopup(), 900);
  }
};

// =================[ UTIL ]=================

function getCfg(key, fallback) {
  try {
    let data =
      window._game_config_cache ||
      JSON.parse(localStorage.getItem("game_config_cache") || "{}");
    let parts = (key || "").split(".");
    for (let k of parts) data = data[k];
    return typeof data !== "undefined" ? data : fallback;
  } catch {
    return fallback;
  }
}

function loadUserTeam() {
  try {
    const t = localStorage.getItem("userTeam");
    return t ? JSON.parse(t) : [];
  } catch {
    return [];
  }
}

async function getCharList(ids) {
  if (!Array.isArray(ids)) return [];
  const all = await Promise.all(
    ids.map(async id => {
      if (!id) return null;
      let cache = null;
      try {
        cache = localStorage.getItem("char_" + id);
      } catch {}
      if (cache) return JSON.parse(cache);
      try {
        const res = await fetch(`data/char/${id}.json`);
        return await res.json();
      } catch {
        return null;
      }
    })
  );
  return all.filter(Boolean);
}

// ===============[ Reward Engine: re-expose ]====================
// ให้โมดูลอื่น เรียก rewardEngine.give() (for popup summarization)
window.rewardEngine = {
  give(arr) {
    let items = Array.isArray(arr) ? arr : [arr];
    let merged = mergeRewards(items);
    giveReward(merged);
    // show summary popup
    const summary = `<div style="text-align:center;">
      <div style="font-size:1.18em;color:#39ffc2;margin-bottom:6px;">ได้รับรางวัล</div>
      ${merged
        .map(
          rw =>
            rw.type === "item"
              ? `<div style="color:#d4f;font-size:.99em;padding:3px;"><b>${window.inventoryEngine?.findItemById(rw.id)?.name || rw.id}</b> x${rw.qty}</div>`
              : `<div style="color:#7bd;font-size:.99em;padding:3px;"><b>${rw.id}</b> 🎴</div>`
        )
        .join("")}
      <button class="primary-btn" style="margin-top:1.1em;" onclick="closePopup();">${
        t("popup.ok") || "OK"
      }</button>
    </div>`;
    window.openPopup?.("rewardSummary", summary, "small", "รางวัล");
  },
};
 
 ไฟล์ js/popupManager.js
 // /js/popupManager.js

/**
 * popupManager.js
 * Epic Seven Auto Battle - Popup System (v1.0)
 * จัดการเปิด-ปิด Pop-up กลาง / popover ซ้อน
 * รองรับ HTML Content, Callback, Responsive
 * ใช้ร่วมกับ index.html, ui.js, ทุก module
 * Author: (คุณ)
 */

// เก็บ Stack ของ popup สำหรับเปิดซ้อน
let popupStack = [];

/**
 * เปิด Popup กลางจอ
 * @param {Object} options { 
 *    id: string, // ชื่อ feature, ใช้เป็น key menu, ex: 'quest', 'inventory'
 *    title: string, // ชื่อแสดงหัวข้อ
 *    content: HTML string, // เนื้อหา HTML (innerHTML)
 *    size: "normal" | "large" | "tall" | "small",
 *    onClose: function, // callback เมื่อ popup นี้ปิด
 *    showCloseBtn: boolean, // แสดงปุ่มปิด (default: true)
 *    autoFocus: CSS selector (optional, โฟกัส input)
 * }
 */
window.popupManager = {
    open: function (options = {}) {
        // ป้องกัน popup ซ้อนซ้ำชื่อเดิม
        if (popupStack.some(p => p.id === options.id)) {
            return; // ถ้ามีแล้วไม่ต้องเปิดซ้ำ
        }
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;

        const { id, title, content, size, onClose, showCloseBtn, autoFocus } = options;
        const sz = size || 'normal';
        let html = `
      <div class="popup${sz === 'large' ? ' large' : sz === 'tall' ? ' tall' : sz === 'small' ? ' small' : ''}" 
        style="z-index: ${100 + popupStack.length * 2};" popup-id="${id || ''}">
          ${showCloseBtn === false ? '' : `<button class="close" onclick="popupManager.close('${id || ''}')">×</button>`}
          <h2 style="margin-bottom:.39em;">${title || ''}</h2>
          <div class="popup-content" style="margin-top:9px;">${content || ''}</div>
      </div>`;

        let wrap = document.createElement('div');
        wrap.className = 'popup-wrap-layer';
        wrap.style = `position:fixed; top:0; left:0; width:100vw;height:100vh;display:flex;
          align-items:center;justify-content:center;z-index:${99 + popupStack.length * 2 + 1};`;
        wrap.innerHTML = html;

        // Store info to Stack
        popupStack.push({
            id,
            wrap,
            onClose: typeof onClose === "function" ? onClose : null
        });

        popupLayer.appendChild(wrap);
        popupLayer.classList.add('active');

        // Auto focus
        if (autoFocus) {
            setTimeout(() => {
                const el = wrap.querySelector(autoFocus);
                if (el) el.focus();
            }, 150);
        }
    },

    /**
     * ปิด Popup (ปิดบนสุดล่าสุด หรือตาม id)
     * @param {string} id
     */
    close: function (id = '') {
        const popupLayer = document.getElementById('popupLayer');
        if (!popupLayer) return;
        if (popupStack.length === 0) return;
        let pop;
        if (id) {
            let idx = popupStack.findIndex(p => p.id === id);
            if (idx === -1) return;
            pop = popupStack.splice(idx, 1)[0];
            if (pop && pop.wrap) {
                pop.wrap.remove();
            }
        } else {
            // ถ้าไม่ส่ง id ให้ปิดตัวบนสุด
            pop = popupStack.pop();
            if (pop && pop.wrap) {
                pop.wrap.remove();
            }
        }
        // onClose callback
        if (pop && pop.onClose) pop.onClose();

        // หากไม่มี popup อื่นเหลือ ให้ปิด layer
        if (popupStack.length === 0) {
            popupLayer.classList.remove('active');
        }
    },

    /**
     * ปิด Popups ทั้งหมด (reset stack)
     */
    closeAll: function () {
        const popupLayer = document.getElementById('popupLayer');
        popupStack.forEach(p => {
            if (p.wrap) p.wrap.remove();
            if (typeof p.onClose === "function") p.onClose();
        });
        popupStack = [];
        if (popupLayer) popupLayer.classList.remove('active');
    },

    /**
     * Render content ใหม่บน popup id นี้ (เช่น refetch/refresh)
     * @param {string} id
     * @param {string} content HTML
     */
    update: function (id, content) {
        let pop = popupStack.find(p => p.id === id);
        if (pop && pop.wrap) {
            let inner = pop.wrap.querySelector('.popup-content');
            if (inner) inner.innerHTML = content;
        }
    },

    /**
     * ดึง Stack popups
     */
    getStack: function () { return [...popupStack]; }
};

// [Global shortcut]
window.openPopup = function (id, content = '', size = 'normal', title = '', options = {}) {
    // For backward compat: openPopup(type, html, size, title, { ... })
    window.popupManager.open({
        id, title: title || id, content, size, ...options
    });
}
window.closePopup = function (id = '') { window.popupManager.close(id); }
window.closeAllPopup = function () { window.popupManager.closeAll(); }

// Escape = close popup ล่าสุด
document.addEventListener('keyup', ev => {
    if (ev.key === 'Escape') popupManager.close();
});

// Click shadow layer (ปิด popup ล่าสุด เฉพาะ popup ที่อนุญาต)
document.getElementById('popupLayer')?.addEventListener('mousedown', ev => {
    if (ev.target.classList.contains('popup-wrap-layer')) {
        // หาก popup บนสุดมี showCloseBtn = false => ไม่ปิด ด้วยคลิก
        if (popupStack.length === 0) return;
        let last = popupStack[popupStack.length - 1];
        if (last && last.wrap && last.wrap.querySelector('.close')) {
            window.popupManager.close();
        }
    }
});

ไฟล์ data/item.json
[
  {
    "id": "gold",
    "name": "Gold",
    "type": "currency",
    "description": "เหรียญทองสำหรับใช้งานในร้านค้า อัปเกรด หรือสุ่มกาชา",
    "img": "gold.png",
    "rarity": 1,
    "usable": false,
    "price": 0
  },
  {
    "id": "diamond",
    "name": "Crystal",
    "type": "currency",
    "description": "เพชร ใช้ซื้อของหรือสุ่มกาชา พิเศษ",
    "img": "diamond.png",
    "rarity": 2,
    "usable": false,
    "price": 0
  },
  {
    "id": "exp_potion",
    "name": "EXP Potion",
    "type": "xp_item",
    "description": "เพิ่ม EXP ให้ตัวละครทันที ใช้เลือกเป้าหมาย",
    "img": "exp_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "exp": 500 },
    "price": 200
  },
  {
    "id": "skill_book",
    "name": "Skill Book",
    "type": "upgrade",
    "description": "หนังสืออัปเกรดสกิลตัวละคร (สุ่ม 1 skill)",
    "img": "skill_book.png",
    "rarity": 3,
    "usable": true,
    "effect": { "skillup": 1 },
    "price": 900
  },
  {
    "id": "rune_shard",
    "name": "Rune Shard",
    "type": "rune_material",
    "description": "เศษรูน ใช้สำหรับอัปเกรดหรือสร้างรูน",
    "img": "rune_shard.png",
    "rarity": 2,
    "usable": false,
    "price": 150
  },
  {
    "id": "heal_potion",
    "name": "Heal Potion",
    "type": "heal",
    "description": "ไอเท็มใช้ฟื้นฟู HP 50% ให้ตัวละครที่เลือก หรือใช้เติม Energy (+15)",
    "img": "heal_potion.png",
    "rarity": 2,
    "usable": true,
    "effect": { "hp_pct": 50, "energy": 15 },
    "price": 120
  }
]

ไฟล์ js/inventory.js
// js/inventory.js

let itemData = [];
let inventory = [];

/** โหลดไอเท็มจาก data/item.json */
async function loadItemData() {
  if (itemData.length) return;
  itemData = await fetch('data/item.json').then(r => r.json());
}

/** โหลดคลังของผู้เล่น (จาก localStorage) */
function loadInventory() {
  let raw = localStorage.getItem('user_inventory');
  inventory = raw ? JSON.parse(raw) : [];
}

/** เซฟ inventory */
function saveInventory() {
  localStorage.setItem('user_inventory', JSON.stringify(inventory));
}

/** ค้นหาไอเท็มใน data/item.json */
function findItemById(id) {
  return itemData.find(i => i.id === id);
}

/** render UI คลังไอเท็ม */
function renderInventoryUI() {
  let html = `
    <div style="display:flex;flex-direction:column;gap:7px;max-height:420px;overflow-y:auto;">
      ${inventory.length === 0 ? '<div style="color:#bbb;text-align:center;">ยังไม่มีไอเท็ม</div>' :
        inventory.map(item => {
          let info = findItemById(item.id) || {};
          return `
          <div style="display:flex;align-items:center;background:#272b38;padding:10px 16px;border-radius:10px;gap:19px;">
            <div style="width:36px;height:36px;border-radius:8px;background:#201624;display:flex;justify-content:center;align-items:center;">
              ${info.img ? `<img src="img/item/${info.img}" alt="${info.name}" style="width:32px;">` : "🎒"}
            </div>
            <div style="flex-grow:1;">
              <b>${info.name || item.id}</b>
              <div style="font-size:.91em;color:#84ccff;margin-top:2px;">${info.description || ''}</div>
            </div>
            <div style="color:#aaffbe;font-weight:bold;font-size:1.07em;">x${item.qty}</div>
            ${info.usable ? `<button class="primary-btn" style="padding:5px 1em 5px 1em;font-size:.96em;" onclick="useItemPrompt('${item.id}')">ใช้เลย</button>` : ""}
          </div>`;
        }).join('')}
    </div>
  `;
  document.getElementById('inventoryArea').innerHTML = html;
}

/** ฟังก์ชัน popup ยืนยันการใช้ไอเท็ม */
window.useItemPrompt = function(itemId) {
  let info = findItemById(itemId);
  window.openPopup('useItem', `
    <div style="text-align:center;">
      <img src="img/item/${info.img}" style="width:52px;margin-bottom:8px;">
      <div style="font-size:1.09em;">${info.name}</div>
      <div style="margin:.6em 0 1.1em 0;font-size:.97em;color:#7cf;">${info.description}</div>
      <button class="primary-btn" style="margin:.8em .3em 0 .3em;padding:.5em 2.1em;" onclick="useItemNow('${itemId}')">ยืนยันใช้ไอเท็ม</button>
      <button class="secondary-btn" style="margin:.8em .3em 0 .3em;" onclick="closePopup()">ยกเลิก</button>
    </div>
  `, 'small', `ใช้ ${info.name}`);
}

/** ใช้ไอเท็มทันที (ลด qty, เรียก effect, update ui) */
window.useItemNow = function(itemId) {
  let idx = inventory.findIndex(i => i.id === itemId);
  let info = findItemById(itemId);
  if (idx === -1 || !info) return;
  if (inventory[idx].qty <= 0) return;
  // Effect (mock: อัปเดต character / heal / exp อัตโนมัติ)
  if (info.effect && info.effect.exp) {
    // เพิ่ม exp ตัวละครแรกใน team
    let t = JSON.parse(localStorage.getItem('userTeam') || "[]");
    if (t.length) {
      let cid = t[0];
      let cdata = JSON.parse(localStorage.getItem("char_" + cid) || '{}');
      if (cdata) {
        cdata.exp = (cdata.exp || 0) + info.effect.exp;
        localStorage.setItem("char_" + cid, JSON.stringify(cdata));
        alert(`เพิ่ม EXP ให้ ${cdata.name} +${info.effect.exp}`);
      }
    }
  }
  // Heal to selected: (Opt: implement in character select popup)
  // เพิ่ม energy bar (สำหรับ Heal Potion) 
  if (info.effect && info.effect.energy) {
    let energy = Number(localStorage.getItem("user_energy") || 0);
    let maxEnergy = 45; // default, สามารถโยง config/energy.js ได้
    let after = Math.min(maxEnergy, energy + info.effect.energy);
    localStorage.setItem("user_energy", after);
    alert(`เติม Energy +${after - energy}`);
    if (typeof renderEnergyBar === "function") renderEnergyBar();
  }
  inventory[idx].qty--;
  if (inventory[idx].qty === 0) inventory.splice(idx, 1);
  saveInventory();
  window.closePopup();
  renderInventoryUI();
}

/** เพิ่มไอเท็มเข้า inventory */
window.addToInventory = function(itemId, qty) {
  if (!itemId || !qty) return;
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) inventory[idx].qty += qty;
  else inventory.push({ id: itemId, qty });
  saveInventory();
}

/** ลบไอเท็ม (admin, debug) */
window.removeFromInventory = function(itemId, qty) {
  let idx = inventory.findIndex(i => i.id === itemId);
  if (idx >= 0) {
    inventory[idx].qty -= qty;
    if (inventory[idx].qty <= 0) inventory.splice(idx, 1);
    saveInventory();
  }
}

// DOM integration, auto popup on menu
document.addEventListener('DOMContentLoaded', async () => {
  await loadItemData();
  loadInventory();
  // เชื่อม hook popup
  const showInvPopup = () => {
    window.openPopup('inventory', `
      <div id="inventoryArea"></div>
      <div style="text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>
    `, 'large', "คลังไอเท็ม");
    renderInventoryUI();
  };
  let btn = document.getElementById('btnInventory');
  if (btn) btn.onclick = showInvPopup;

  window.renderInventoryUI = renderInventoryUI;
});

/** เชื่อมต่อ API ให้ระบบอื่นเรียกใช้ */
window.inventoryEngine = {
  load: loadInventory,
  save: saveInventory,
  add: window.addToInventory,
  remove: window.removeFromInventory,
  list: () => inventory,
  findItemById,
  reloadAll: async () => { await loadItemData(); loadInventory(); },
}

ไฟล์ js/upgrade.js
// js/upgrade.js - Epic Seven Auto Battle - Upgrade System

let upgradeConfig = {};
let charUpgradeTarget = null;

function example() {
    let inventory = window.inventoryEngine.list();
}

/** Load upgrade config from /data/upgrade.json */
async function loadUpgradeConfig() {
  if (Object.keys(upgradeConfig).length) return;
  upgradeConfig = await fetch('data/upgrade.json').then(r => r.json());
}

/** Render Upgrade popup for a character */
async function openUpgradePopup(characterId) {
  await loadUpgradeConfig();
  await window.inventoryEngine.reloadAll();
  let char = JSON.parse(localStorage.getItem('char_' + characterId)
               || localStorage.getItem('char_' + characterId.replace('_', ''))
               || '{}');
  if (!char || !char.id) { alert("ไม่พบตัวละครนี้"); return; }
  charUpgradeTarget = char;
  let html = `
    <div style="display:flex;flex-direction:column;align-items:center;gap:10px;">
      <img src="img/char/${char.img}" style="width:72px;border-radius:15px;box-shadow:0 0 22px #1defeb66;">
      <div style="font-size:1.18em;font-weight:bold;">${char.name}</div>
      <div>Lv. <b>${char.level}</b> <span style="color:#ffe480;">★${char.star}</span>
          / <b>EXP</b> ${char.exp}/${char.exp_max || '?'}
      </div>
      <div style="color:#87c7ff;">HP <b>${char.hp}</b> | ATK <b>${char.atk}</b> | DEF <b>${char.def}</b> | SPD <b>${char.spd}</b></div>
      <hr style="width:88%; border:1px solid #234">
      <div style="display:flex;gap:12px;">
        <button class="primary-btn" onclick="doLevelUpChar('${char.id}')">เพิ่มเลเวล</button>
        <button class="primary-btn" onclick="doSkillUpChar('${char.id}')">อัปเกรดสกิล</button>
        <button class="primary-btn" onclick="doPromoteChar('${char.id}')">เลื่อนขั้น/เพิ่มดาว</button>
      </div>
      <button class="secondary-btn" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('upgradePopup', html, 'large', 'อัปเกรดตัวละคร');
}

/** Level Up (use exp_potion) */
window.doLevelUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let expItem = upgradeConfig.levelup.exp_item;
  let inv = window.inventoryEngine.list();
  let owned = inv.find(i => i.id === expItem);
  if (!owned || owned.qty <= 0) { alert("ไม่มี EXP Potion ในคลัง"); return; }
  let expAdd = 500;
  char.exp = (char.exp || 0) + expAdd;
  let lvled = false;
  while (char.exp >= (char.exp_max || 99999)) {
    char.exp -= char.exp_max;
    char.level = (char.level || 1) + 1;
    lvled = true;
  }
  if (lvled) alert("Level UP!");
  char.hp = Math.round(char.hp * 1.085);
  char.atk = Math.round(char.atk * 1.08);
  char.def = Math.round(char.def * 1.09);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(expItem, 1);
  openUpgradePopup(char.id);
};

/** Skill Up (use skill_book) */
window.doSkillUpChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let inv = window.inventoryEngine.list();
  let skillBookItem = upgradeConfig.skillup.item;
  let owned = inv.find(i => i.id === skillBookItem);
  if (!owned || owned.qty <= 0) { alert("ไม่มี Skill Book ในคลัง"); return; }
  let skills = char.skills || [];
  if (!skills.length) { alert("ไม่มีสกิลให้อัปเกรด"); return; }
  let idx = Math.floor(Math.random() * skills.length);
  let sk = skills[idx];
  if (sk.multiplier) sk.multiplier = +(sk.multiplier + upgradeConfig.skillup.increase_percent/100).toFixed(2);
  if (sk.cooldown && sk.cooldown > 1) sk.cooldown = Math.max(1, sk.cooldown - 1);
  char.skills[idx] = sk;
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  window.inventoryEngine.remove(skillBookItem, 1);
  alert(`อัปเกรด Skill "${sk.name}" ให้แรงขึ้น!`);
  openUpgradePopup(char.id);
};

/** Promote: Increase Stars (use gold + material) */
window.doPromoteChar = function (charId) {
  let char = JSON.parse(localStorage.getItem('char_' + charId));
  if (!char) return;
  let starNext = (char.star || 1) + 1;
  let prom = upgradeConfig.promotion.requirements.find(r => r.star === char.star);
  if (!prom) { alert("ดาวสูงสุดแล้ว"); return; }
  let inv = window.inventoryEngine.list();
  let gold = inv.find(i => i.id === 'gold');
  if (!gold || gold.qty < prom.cost_gold) { alert("Gold ไม่พอ"); return; }
  let enough = prom.materials.every(mat =>
    inv.find(i => i.id === mat.id && i.qty >= mat.qty));
  if (!enough) { alert("วัตถุดิบไม่พอ"); return; }
  window.inventoryEngine.remove('gold', prom.cost_gold);
  prom.materials.forEach(mat => window.inventoryEngine.remove(mat.id, mat.qty));
  char.star = starNext;
  char.hp = Math.floor(char.hp * 1.20);
  char.atk = Math.floor(char.atk * 1.15);
  char.def = Math.floor(char.def * 1.12);
  localStorage.setItem('char_' + char.id, JSON.stringify(char));
  alert("เลื่อนขั้นสำเร็จ! ดาวใหม่: " + char.star);
  openUpgradePopup(char.id);
};

// เชื่อมกับ characterCollection
document.addEventListener('DOMContentLoaded', () => {
  window.upgradeCharPopup = openUpgradePopup;
  let area = document.getElementById('characterArea');
  if (area) area.addEventListener('click', e => {
    let target = e.target.closest('[data-upgrade]');
    if (target) openUpgradePopup(target.dataset.upgrade);
  });
});

// Expose
window.upgradeEngine = {
  open: openUpgradePopup,
  reloadConfig: loadUpgradeConfig
};

ไฟล์ data/upgrade.json
{
  "levelup": {
    "exp_required_base": 600,
    "exp_curve": 1.2,
    "exp_item": "exp_potion"
  },
  "promotion": {
    "star_max": 6,
    "requirements": [
      { "star": 3, "cost_gold": 1000, "materials": [ { "id": "rune_shard", "qty": 4 } ] },
      { "star": 4, "cost_gold": 4000, "materials": [ { "id": "rune_shard", "qty": 9 } ] },
      { "star": 5, "cost_gold": 9000, "materials": [ { "id": "rune_shard", "qty": 15 }, { "id": "heal_potion", "qty": 2 } ] }
    ]
  },
  "skillup": {
    "item": "skill_book",
    "increase_percent": 11,
    "max_lv": 6,
    "cost_gold": 700
  },
  "awaken": {
    "enabled": true,
    "require_materials": [
      { "star": 4, "materials": [ { "id": "rune_shard", "qty": 8 }, { "id": "heal_potion", "qty": 1 } ] },
      { "star": 5, "materials": [ { "id": "rune_shard", "qty": 14 }, { "id": "heal_potion", "qty": 2 } ] }
    ]
  }
}

ไฟล์ js/rune.js
// js/rune.js

let runeData = [];
let runeSetBonuses = {};
let userRunes = [];    // ทุกรูนของ user (id, unlock, slot)
let equippedRunes = {}; // { char_id: [slot1, slot2, slot3, slot4] }
let currentCharEquip = null;

// โหลดข้อมูลรูนจาก data/rune.json
async function loadRuneData() {
  if (runeData.length) return;
  let arr = await fetch('data/rune.json').then(r => r.json());
  runeData = arr.filter(x => !x.set_bonuses);
  runeSetBonuses = arr.find(x => x.set_bonuses)?.set_bonuses || {};
}

// โหลดรูนของ user (จาก localStorage)
function loadUserRunes() {
  userRunes = JSON.parse(localStorage.getItem('user_runes') || "[]");
  equippedRunes = JSON.parse(localStorage.getItem('equipped_runes') || "{}");
}

// เซฟรูนกลับ localStorage
function saveUserRunes() {
  localStorage.setItem('user_runes', JSON.stringify(userRunes));
  localStorage.setItem('equipped_runes', JSON.stringify(equippedRunes));
}

// UI - render pop-up สวมใส่รูน
async function openRuneEquipPopup(char_id) {
  await loadRuneData(); loadUserRunes();
  currentCharEquip = char_id;
  let charRunes = equippedRunes[char_id] || [null, null, null, null];
  let runeSlotHtml = '';
  for (let slot = 1; slot <= 4; slot++) {
    let runeId = charRunes[slot - 1];
    let ru = runeData.find(r => r.id === runeId);
    runeSlotHtml += `<div style="border:1px solid #348ac9;border-radius:10px;padding:8px 7px;min-width:96px;min-height:65px;margin:3px 0;">
      <b>ช่อง ${slot}:</b> ${ru ?
        `<span title="${ru.name}" style="font-size:1.2em;vertical-align:middle;">${ru.icon ?? '🔸'}</span> 
        <span style="color:#7df;font-weight:600;">${ru.name}</span>
        <button class="secondary-btn" style="font-size:.96em;padding:.1em .8em;margin-left:4px;" onclick="unequipRune(${slot})">ถอน</button>
        <div style="font-size:0.88em;color:#acfc94;margin-top:4px;">${mainStatText(ru.main_stat)} ${ru.sub_stats.map(mainStatText).join(', ')}</div>`
        : `<span style="color:#888;">ว่าง</span>
          <button class="primary-btn" style="font-size:.9em;" onclick="showSelectRune(${slot})">+ เพิ่มรูน</button>`
      }
      </div>`;
  }
  const setBuffHtml = renderSetBonus(charRunes);
  const html = `
    <div style="display:flex;flex-direction:column;gap:7px;">
      <h3>รูนของตัวละครนี้</h3>
      ${runeSlotHtml}
      ${setBuffHtml}
      <button class="secondary-btn" onclick="closePopup()">บันทึกและปิด</button>
    </div>`;
  window.openPopup('runeEquip', html, 'large', 'สวมใส่รูน');
}

// Render set buff รวม (ถ้าเซ็ตครบ)
function renderSetBonus(runeIdArr) {
  let sets = {}, slots = {};
  runeIdArr.forEach(id => {
    let r = runeData.find(a => a.id === id);
    if (r) {
      sets[r.set] = (sets[r.set] || 0) + 1;
      slots[r.slot] = 1;
    }
  });
  let buffHtml = '';
  Object.keys(sets).forEach(set => {
    const cfg = runeSetBonuses[set];
    if (cfg && sets[set] >= cfg.slot_required) {
      buffHtml += `<div style="background:#22442b;margin:13px 0;padding:7px 9px;border-radius:7px;">
          <span style="font-size:1.16em;">${cfg.desc}</span> <b style="color:#66e0ca;">(ครบเซ็ต!)</b>
        </div>`;
    }
  });
  return buffHtml ? `<div style="margin-top:14px;">${buffHtml}</div>` : '';
}

// เลือกรูน
window.showSelectRune = function(slot) {
  let avai = userRunes.filter(r =>
    !Object.values(equippedRunes).flat().includes(r.rune_id) && runeData.find(x => x.id === r.rune_id)?.slot === slot);
  let html = avai.length
      ? avai.map(r => {
          let d = runeData.find(x => x.id === r.rune_id);
          return `<div style="display:flex;align-items:center;gap:9px;">
            <span style="font-size:1.3em;">${d.icon ?? '🔸'}</span>
            <b>${d.name}</b> <span style="font-size:0.93em;color:#d2ffee;">${mainStatText(d.main_stat)}</span>
            <button class="primary-btn" onclick="equipRuneSlot('${r.rune_id}',${slot})">ใส่</button>
          </div>`;
        }).join('<hr style="margin:2px 0;">')
      : `<div style="color:#fda;">ยังไม่มีรูนสำหรับช่องนี้</div>`;
  window.openPopup('selectRune', html, 'small', `เลือกรูน ช่อง ${slot}`);
};

// ข้อความหลักของ stat
function mainStatText(stat) {
  if (!stat) return "";
  const lib = { spd: 'SPD', atk_pct: 'ATK%', def: 'DEF', def_pct: 'DEF%', crit_pct: 'CRIT%', effectiveness: 'EFF' };
  return (lib[stat.type] || stat.type) + " +" + stat.val;
}

// ใส่รูนลง slot
window.equipRuneSlot = function(rune_id, slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = rune_id;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  closePopup('selectRune');
  openRuneEquipPopup(currentCharEquip);
};

// ถอนรูน
window.unequipRune = function(slot) {
  let charRunes = equippedRunes[currentCharEquip] || [null,null,null,null];
  charRunes[slot - 1] = null;
  equippedRunes[currentCharEquip] = charRunes;
  saveUserRunes();
  openRuneEquipPopup(currentCharEquip);
};

// อัปเกรดรูน (mock)
window.upgradeRune = function(rune_id) {
  alert("= Demo = คุณอัปเลเวลรูน " + rune_id + " แล้ว (mock)");
};

window.runeEngine = {
  openEquipPopup: openRuneEquipPopup,
  getEquipped: function(char_id) { loadUserRunes(); return equippedRunes[char_id] || [null,null,null,null]; },
  getUserRunes: function() { loadUserRunes(); return userRunes; },
  addRune: function(rune_id) { userRunes.push({ rune_id }); saveUserRunes(); },
  removeRune: function(rune_id) { userRunes = userRunes.filter(r => r.rune_id !== rune_id); saveUserRunes(); }
};

// Hook DOM ในคลังตัวละคร (คลิกปุ่ม "ใส่รูน" ได้)
document.addEventListener('DOMContentLoaded', async () => {
  await loadRuneData(); loadUserRunes();
  if (document.getElementById('characterArea')) {
    document.getElementById('characterArea').addEventListener('click', e => {
      const btn = e.target.closest('[data-equiprune]');
      if (btn) openRuneEquipPopup(btn.getAttribute('data-equiprune'));
    });
  }
});

ไฟล์ data/rune.json
[
  {
    "id": "spd_rare",
    "name": "Speed Rune",
    "slot": 2,
    "main_stat": { "type": "spd", "val": 25 },
    "sub_stats": [
      { "type": "atk_pct", "val": 7 },
      { "type": "def", "val": 16 }
    ],
    "set": "speed",
    "rarity": 4,
    "icon": "💨"
  },
  {
    "id": "atk_pure",
    "name": "Attack Rune",
    "slot": 1,
    "main_stat": { "type": "atk_pct", "val": 15 },
    "sub_stats": [
      { "type": "spd", "val": 5 }
    ],
    "set": "rage",
    "rarity": 3,
    "icon": "⚔️"
  },
  {
    "id": "crit_big",
    "name": "Critical Rune",
    "slot": 4,
    "main_stat": { "type": "crit_pct", "val": 12 },
    "sub_stats": [
      { "type": "atk_pct", "val": 6 },
      { "type": "spd", "val": 7 },
      { "type": "effectiveness", "val": 4 }
    ],
    "set": "critical",
    "rarity": 5,
    "icon": "🎯"
  },
  {
    "id": "def_basic",
    "name": "Defense Rune",
    "slot": 3,
    "main_stat": { "type": "def_pct", "val": 10 },
    "sub_stats": [],
    "set": "defend",
    "rarity": 2,
    "icon": "🛡️"
  },
  {
    "set_bonuses": {
      "speed":    { "slot_required": 2, "bonus": { "spd": 25 },        "desc": "Speed +25%"  },
      "rage":     { "slot_required": 4, "bonus": { "atk_pct": 35 },     "desc": "ATK +35%"    },
      "critical": { "slot_required": 2, "bonus": { "crit_pct": 12 },    "desc": "Crit +12%"   },
      "defend":   { "slot_required": 2, "bonus": { "def_pct": 15 },     "desc": "DEF +15%"    }
    }
  }
]

ไฟล์ js/gacha.js
// js/gacha.js - ระบบสุ่มกาชา Epic Seven Clone Frontend

let gachaList = [];
let gachaUserLog = [];
let gachaPity = {}; // { gachaId: pityCount }

async function loadGachaData() {
    if (gachaList.length) return;
    const res = await fetch('data/gacha.json').then(r => r.json());
    gachaList = res.gachas;
}

function loadGachaUserLog() {
    gachaUserLog = JSON.parse(localStorage.getItem('gacha_user_log') || '[]');
    gachaPity = JSON.parse(localStorage.getItem('gacha_pity') || '{}');
}

function saveGachaLog() {
    localStorage.setItem('gacha_user_log', JSON.stringify(gachaUserLog));
    localStorage.setItem('gacha_pity', JSON.stringify(gachaPity));
}

async function openGachaPopup() {
    await loadGachaData(); loadGachaUserLog();
    let avai = gachaList.filter(g => g.enabled);
    if (!avai.length) {
        window.openPopup('gacha', `<div>ไม่พบกาชาที่เปิดใช้งาน</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'กาชา');
        return;
    }
    let html = avai.map(g => `
        <div style="background:#1b232e;padding:24px 1.5em;border-radius:18px;margin-bottom:24px;text-align:center;box-shadow:0 2px 18px #278ddf18;">
            <img src="img/gacha/${g.banner_img || 'noimg.png'}" style="width:100%;min-width:210px;max-width:330px;border-radius:9px;margin-bottom:7px;box-shadow:0 1px 40px #35cfff23;">
            <div style="font-size:1.14em;color:#7ffbfb;font-weight:600;margin-bottom:4px;">${g.name}</div>
            <div style="color:#aef;margin-bottom:1em;">${g.desc || ''}</div>
            <div style="font-size:.95em;margin-bottom:1em;"><b>ค่าใช้จ่าย: </b>
                <span style="color:goldenrod;font-weight:bold;">${g.cost.amount}</span> 
                <img src="img/item/${g.cost.item}.png" style="width:19px;vertical-align:middle" />
            </div>
            <div>
                <button class="primary-btn" onclick="gachaSummon('${g.id}',1)">สุ่ม 1 ครั้ง</button>
                <button class="primary-btn" onclick="gachaSummon('${g.id}',10)">สุ่ม 10 ครั้ง</button>
            </div>
            <div style="margin-top:18px;font-size:.9em;">
                <a href="#" onclick="openGachaLogPopup('${g.id}');return false;" style="color:#85deff;text-decoration:underline;">ดูประวัติการสุ่ม</a>
                ${g.pity?.enabled ? `<span style="margin-left:2em;color:#ffa;">Pity: ${gachaPity[g.id]||0}/${g.pity.max}</span>` : ''}
            </div>
        </div>
    `).join('');
    window.openPopup('gacha', html, 'large', 'กาชา');
}

// ฟังก์ชันสุ่ม gacha
window.gachaSummon = async function(gachaId, times = 1) {
    await loadGachaData(); loadGachaUserLog();
    let g = gachaList.find(x => x.id === gachaId); if (!g) return;

    // ตรวจสอบทรัพยากร
    let inv = window.inventoryEngine?.list() || [];
    let currency = inv?.find(i => i.id === g.cost.item);
    if (!currency || currency.qty < g.cost.amount * times) {
        alert(`คุณมี ${g.cost.item} ไม่เพียงพอ`);
        return;
    }

    // แปลง pool ให้สุ่มตามอัตรา
    let poolFlat = [];
    g.pool.forEach(entry => {
        for (let i = 0; i < entry.rate; i++) poolFlat.push(entry.char_id);
    });

    let got = [], pityFlag = false;
    for (let t = 0; t < times; t++) {
        let pity = (g.pity?.enabled ? gachaPity[g.id] || 0 : 0);
        let pick;
        // pity trigger
        if (g.pity?.enabled && g.pity.max && pity+1 >= g.pity.max) {
            pick = g.pool.find(c => c.rarity === g.pity.guarantee_rarity)?.char_id || poolFlat[0];
            gachaPity[g.id] = 0;
            pityFlag = true;
        } else {
            pick = poolFlat[Math.floor(Math.random() * poolFlat.length)];
            let card = g.pool.find(c => c.char_id === pick);
            if (g.pity?.enabled) {
                if(card && card.rarity === g.pity.guarantee_rarity) gachaPity[g.id] = 0;
                else gachaPity[g.id] = (gachaPity[g.id] || 0) + 1;
            }
        }
        got.push(pick);
        window.collectCharacter?.(pick);
        window.addGachaLog?.({
            gacha_id: g.id,
            char_id: pick,
            rarity: g.pool.find(c => c.char_id === pick)?.rarity || 3
        });
    }
    window.inventoryEngine.remove(g.cost.item, g.cost.amount * times);
    saveGachaLog();
    openGachaResult(g, got, pityFlag);
};

// เพิ่มตัวละครใหม่เข้า collection (หากยังไม่มี)
window.collectCharacter = function(charId) {
    let chars = JSON.parse(localStorage.getItem('char_collection') || '[]');
    if(!chars.includes(charId)) chars.push(charId);
    localStorage.setItem('char_collection', JSON.stringify(chars));
}

// แสดงผลสุ่มกาชา
function openGachaResult(gacha, resultArr, pityFlag) {
    let html = `<div style="text-align:center;">
        <div style="font-size:1.7em;margin-bottom:6px;">🎴 Gacha Result</div>
        <div style="color:#fcc;${pityFlag ? 'font-weight:bold;' : ''}">${pityFlag ? 'Pity Triggered! การันตีได้รับระดับสูงสุด!' : ''}</div>
        <div style="display:flex;justify-content:center;gap:13px;flex-wrap:wrap;margin-top:1em;">` +
        resultArr.map(cid => {
            let imgSrc = `img/char/${cid}.png`;
            return `<div style="background:#223352;border:2px solid #35aaffb7;border-radius:13px;padding:8px 12px;display:flex;flex-direction:column;align-items:center;min-width:93px;">
                <img src="${imgSrc}" style="width:58px;margin-bottom:8px;border-radius:10px;box-shadow:0 0 17px #27508080;" />
                <b style="color:#aef;">${cid}</b>
            </div>`;
        }).join('') +
        `</div>
        <div style="margin-top:18px;">
            <button class="primary-btn" onclick="closePopup();openGachaPopup();">กลับหน้ากาชา</button>
        </div>
    </div>`;
    window.openPopup('gachaResult', html, 'large', 'สุ่มกาชาสำเร็จ');
}

// ดูประวัติกาชา
window.openGachaLogPopup = function(gachaId) {
    loadGachaUserLog();
    let logs = gachaUserLog.filter(x => x.gacha_id === gachaId).slice(-30).reverse();
    let html = logs.length ? `<div style="max-height:300px;overflow-y:auto;"><table style="width:100%;">
        <tr style="color:#aae;"><th>#</th><th>เวลา</th><th>ผลสุ่ม</th><th>Rarity</th></tr>
        ${logs.map((l,i) => `<tr>
            <td>${i+1}</td>
            <td>${(new Date(l.time)).toLocaleString()}</td>
            <td>${l.char}</td>
            <td><span style="color:${l.rarity>=5?'gold':'#fff'};">★${l.rarity}</span></td>
        </tr>`).join('')}
        </table></div>` : `<div style="text-align:center">ยังไม่ได้สุ่มกาชา</div>`;
    window.openPopup('gachaLog'+gachaId, html, 'large', "ประวัติการสุ่มกาชา");
}

// auto bind ปุ่ม
document.addEventListener('DOMContentLoaded', () => {
    let btn = document.getElementById('btnGacha');
    if(btn) btn.onclick = openGachaPopup;
});

// สำหรับระบบ/แอดมิน
window.gachaEngine = {
    open: openGachaPopup,
    log: openGachaLogPopup,
    summon: window.gachaSummon
};

ไฟล์ data/gacha.json
{
    "gachas": [
        {
            "id": "premium_summon",
            "name": "Premium Gacha",
            "type": "normal",
            "enabled": true,
            "cost": {
                "item": "diamond",
                "amount": 50
            },
            "pool": [
                {
                    "char_id": "astra",
                    "rarity": 5,
                    "rate": 5
                },
                {
                    "char_id": "slime_basic",
                    "rarity": 3,
                    "rate": 95
                }
            ],
            "pity": {
                "enabled": true,
                "max": 20,
                "guarantee_rarity": 5
            },
            "banner_img": "gacha_premium.png",
            "desc": "สุ่มตัวละครระดับสูง\nยิ่งหมุนเยอะยิ่งมีโอกาสได้ ★5!"
        },
        {
            "id": "event_summon_may2024",
            "name": "May 2024 Event",
            "type": "event",
            "enabled": false,
            "cost": {
                "item": "ticket_event",
                "amount": 1
            },
            "pool": [
                {
                    "char_id": "astra",
                    "rarity": 5,
                    "rate": 10
                },
                {
                    "char_id": "slime_basic",
                    "rarity": 3,
                    "rate": 90
                }
            ],
            "pity": {
                "enabled": false
            },
            "banner_img": "gacha_event_may2024.png",
            "desc": "เฉพาะกิจ - ใช้ตั๋ว Event เท่านั้น"
        }
    ]
}

ไฟล์ js/quest.js
// js/quest.js

/**
 * ระบบเควสต์รายวัน / สัปดาห์ / event, UI popup, เชื่อม inventory/reward
 * ข้อมูลหลักอยู่ที่ data/quest/<xxx>.json
 */

let questData = [];
let questProgress = {}; // ต่อ user

async function loadQuests() {
  questData = [];
  // สมมุติใช้ไฟล์เดียวรายวัน/สัปดาห์ก่อน
  let daily = await fetch('data/quest/daily.json').then(r => r.json()).catch(() => []);
  let weekly = await fetch('data/quest/weekly.json').then(r => r.json()).catch(() => []);
  questData = [...(daily.quests || []), ...(weekly.quests || [])];
  loadQuestProgress();
}
function loadQuestProgress() {
  try {
    questProgress = JSON.parse(localStorage.getItem('quest_progress') || '{}');
  } catch { questProgress = {}; }
}
function saveQuestProgress() {
  localStorage.setItem('quest_progress', JSON.stringify(questProgress));
}

async function openQuestPopup() {
  await loadQuests();
  loadQuestProgress();
  let html = questData.length
    ? questData.map(q => renderQuestCard(q)).join('')
    : `<div style="text-align:center;color:#ddd">ยังไม่มีเควสต์ในระบบ</div>`;
  window.openPopup('quest', `<div>${html}</div>
    <div style="margin-top:16px;text-align:right;"><button class="secondary-btn" onclick="closePopup()">ปิด</button></div>`, 'large', 'เควสต์');
}
function renderQuestCard(q) {
  let prog = questProgress[q.id] || { cur: 0, claimed: false };
  let done = prog.cur >= (q.target || 1);
  return `<div style="background:#1f302a;border-radius:11px;margin:8px 0;padding:12px 13px;color:${done ? '#adeb98' : '#fff'}">
    <b>${q.name}</b><br>
    <div style="color:#bde8ff">${q.desc || ''}</div>
    <div style="margin:7px 0">ความคืบหน้า: <b>${prog.cur || 0} / ${q.target || 1}</b> ${done ? '✅' : ''}</div>
    <div>รางวัล: ${q.reward.map(r => `<span>${r.type === "item" ? "🎁" : r.type === "character" ? "🎴" : "⭐"} ${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</span>`).join(' ')}</div>
    <button class="primary-btn" style="margin-top:8px" onclick="claimQuest('${q.id}')" ${!done || prog.claimed ? 'disabled' : ''}>รับรางวัล${prog.claimed ? 'แล้ว' : ''}</button>
  </div>`;
}
window.claimQuest = function (questId) {
  let q = questData.find(x => x.id === questId);
  if (!q) return;
  loadQuestProgress();
  let prog = questProgress[questId] || { cur: 0, claimed: false };
  if ((prog.cur || 0) >= q.target && !prog.claimed) {
    window.rewardEngine.give(q.reward);
    prog.claimed = true;
    questProgress[questId] = prog;
    saveQuestProgress();
    openQuestPopup();
  } else {
    alert("ยังทำเควสต์ไม่ครบ");
  }
}
// ฟังก์ชันเพิ่มความคืบหน้า: เรียกเมื่อระบบหลัก trigger
window.increaseQuestProgress = function (questId, amt = 1) {
  loadQuestProgress();
  let prog = questProgress[questId] || { cur: 0, claimed: false };
  prog.cur += amt;
  questProgress[questId] = prog;
  saveQuestProgress();
}

// Auto bind menu
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnQuest');
  if (btn) btn.onclick = openQuestPopup;
});
// export
window.questEngine = {
  open: openQuestPopup,
  reload: loadQuests,
  progress: questProgress,
  increment: window.increaseQuestProgress,
};

ไฟล์ data/quest/daily.json
{
  "quests": [
    {
      "id": "daily_login",
      "name": "เข้าสู่ระบบวันนี้",
      "desc": "ล็อกอินเข้าเกม 1 ครั้ง",
      "target": 1,
      "reward": [
        {"type": "item", "id": "exp_potion", "qty": 1}
      ]
    }
  ]
}

ไฟล์ data/quest/weekly.json
{
  "quests": [
    {
      "id": "weekly_gacha",
      "name": "สุ่มกาชา 5 ครั้ง",
      "desc": "สุ่มกาชาครบ 5 ครั้งในสัปดาห์นี้",
      "target": 5,
      "reward": [
        {"type": "item", "id": "gold", "qty": 1000}
      ]
    }
  ]
}

ไฟล์ js/stage.js
// js/stage.js - EpicSeven Advance Stage System (Linear Unlock v2.1 / GPT-4 Enhanced)

// ---------------------------- CONFIG & STATE ----------------------------
let chapterData = [];
let stageProgress = {}; // { [stageId]: true }
let chapterFiles = [
    'data/stage/chapter1.json',
    'data/stage/chapter2.json',
    'data/stage/chapter3.json'
];

// โหลดทุก Chapter พร้อมกัน (รองรับ multi chapter)
async function loadChapters() {
    if (chapterData.length) return;
    chapterData = [];
    for (let fn of chapterFiles) {
        try {
            const ch = await fetch(fn).then(r => r.json());
            chapterData.push(ch);
        } catch (e) { /* ถ้าไฟล์ยังไม่มี จะข้ามอัตโนมัติ */ }
    }
}

function loadStageProgress() {
    try {
        stageProgress = JSON.parse(localStorage.getItem('stage_progress') || '{}');
    } catch { stageProgress = {}; }
}

function saveStageProgress() {
    localStorage.setItem('stage_progress', JSON.stringify(stageProgress));
}

// --------------------- UNLOCK LOGIC WITH CROSS-ZONE + ทีมเลเวล ------------------
function isStageUnlocked(chapterIdx, zoneIdx, stageIdx) {
    return true;
}

function isStageCleared(stageId) {
    return !!stageProgress[stageId];
}

// --------------------- STAGE MAP POPUP + ADVANCED RENDER ------------------
window.openStageMapPopup = async function () {
    await loadChapters();
    loadStageProgress();
    let html = '';
    chapterData.forEach((ch, chapterIdx) => {
        html += `<div style="margin-bottom:14px;">
            <h2 style="color:#6cfffa">${ch.name}</h2>
            <div style="color:#c8eee9">${ch.desc || ''}</div>
            ${ch.zones.map((zone, zoneIdx) => `
                <div style="margin:17px 0 7px 18px;">
                    <h3 style="color:#aff">${zone.name}</h3>
                    <div class="stage-list">
                    ${
                        zone.stages.map((stage, stageIdx) => {
                            let teamLvLocked = false;
                            if (stage.require_team_level) {
                                let team = [];
                                try { team = JSON.parse(localStorage.getItem('userTeam') || '[]'); } catch {}
                                let ok = team.some(cid => {
                                    try {
                                        let c = JSON.parse(localStorage.getItem('char_' + cid) || 'null');
                                        return c && c.level && c.level >= stage.require_team_level;
                                    } catch { return false; }
                                });
                                if (!ok) teamLvLocked = true;
                            }
                            let unlocked = isStageUnlocked(chapterIdx, zoneIdx, stageIdx);
                            let cleared = isStageCleared(stage.id);
                            return `<div style="margin:4px 0 7px 27px;
                                                padding:7px 13px;border-radius:11px;
                                                background:${cleared ? '#242c4a' : '#141d28ba'};
                                                display:flex;align-items:center;justify-content:space-between;">
                                    <div>
                                        <b>${stage.name}</b> <span style="color:#cde;">LV.${stage.recommended_level}</span>
                                        <div style="font-size:.96em;color:#afe;">${stage.desc || ''}</div>
                                        ${
                                            stage.require_team_level
                                            ? `<div style="font-size:.95em;color:#62f6e6;">🔓 ต้องมีตัวละครในทีม Lv.${stage.require_team_level} ขึ้นไปถึงจะเข้าเล่น</div>`
                                            : ''
                                        }
                                    </div>
                                    <div>
                                    ${
                                        teamLvLocked
                                        ? `<span style="color:#fa8;font-size:.98em;">🔒 ต้องมีตัวในทีม Lv.${stage.require_team_level}+</span>`
                                        : (unlocked
                                            ? `<button class="primary-btn" style="padding:.5em 1.7em;" onclick="startStageBattle('${ch.id}','${zone.id}','${stage.id}')" ${cleared ? '' : ''}>
                                                    ${cleared ? 'เล่นซ้ำ' : 'เข้าเล่น'}
                                                </button>`
                                            : `<span style="color:#fa8;font-size:.98em;">🔒 ต้องผ่านด่านก่อนหน้า</span>`)
                                    }
                                    </div>
                                    ${cleared ? '<span style="color:#93d;font-size:.96em;margin-left:13px;">✔ ผ่านแล้ว</span>' : ''}
                                </div>`;
                        }).join('')
                    }
                    </div>
                </div>
            `).join('')}
        </div>`;
    });
    html += `<div style="text-align:right;margin-top:14px;">
        <button class="secondary-btn" onclick="closePopup()">ปิด</button>
    </div>`;
    window.openPopup('stageMap', html, 'large', 'เลือกด่าน');
};

// ------------------- START/END STAGE BATTLE HOOKS ----------------------
window.startStageBattle = async function (chapterId, zoneId, stageId) {
    await loadChapters();

    let chapter = chapterData.find(ch => ch.id === chapterId);
    if (!chapter) return;
    let zone = chapter.zones.find(z => z.id === zoneId);
    if (!zone) return;
    let stage = zone.stages.find(s => s.id === stageId);
    if (!stage) return;

    // Check energy
    let energy = Number(localStorage.getItem("user_energy") || 0);
    if (energy < stage.require_energy) {
        alert("Energy ไม่พอ!");
        return;
    }
    localStorage.setItem("user_energy", energy - stage.require_energy);
    if (typeof renderEnergyBar === "function") renderEnergyBar();

    // เตรียม wave (แค่ wave[0] เสมอในระบบ simple นี้)
    let enemies = (stage.waves[0] && Array.isArray(stage.waves[0].enemies))
        ? stage.waves[0].enemies
        : [];

    // Save current stage context
    localStorage.setItem('current_stage_id', stage.id);
    localStorage.setItem('current_stage_zone', zone.id);
    localStorage.setItem('current_stage_chapter', chapter.id);
    closePopup();

    setTimeout(async () => {
        // Team user
        if (window.battleEngine && battleEngine.loadBattleTeams)
            await battleEngine.loadBattleTeams();

        // Monsters
        if (window.battleEngine && typeof battleEngine.monsters !== "undefined") {
            try {
                let arr = [];
                for (const enemy of enemies) {
                    let c = null;
                    // New: Try load meta from data/monster/{id}.json first
                    try {
                        c = await fetch(`data/monster/${enemy.id}.json`).then(r => r.json());
                    } catch {
                        // Fallback: support special boss or player-like monsters
                        try {
                            c = await fetch(`data/char/${enemy.id}.json`).then(r => r.json());
                        } catch (e) { c = null; }
                    }
                    if (!c) continue;
                    arr.push({
                        ...c,
                        id: enemy.id + "_" + ((Math.random() * 10000) | 0),
                        level: enemy.level || c.level || 1,
                        currHp: c.hp,
                        alive: true,
                        buffs: [],
                        debuffs: [],
                        cooldowns: Array((c.skills || []).length).fill(0),
                    });
                }
                battleEngine.monsters = arr;
            } catch {}
        }
        battleEngine?.initSpdBar?.();
        battleEngine?.renderBattlefield?.();
        document.getElementById('mainBattlefield')?.classList.remove('hide');
    }, 400);
};

// ------- เมื่อจบด่าน (win) - ปลดล็อกด่านถัดไปทีละด่าน (linear) -----
window.hookStageBattleEnd = function(state) {
    let curStageId = localStorage.getItem('current_stage_id');
    if (state === 'win' && curStageId) {
        loadStageProgress();
        stageProgress[curStageId] = true;
        saveStageProgress();
    }
    setTimeout(() => { openStageMapPopup(); }, 900);
};

window.updateStageProgress = function(stageId) {
    loadStageProgress();
    stageProgress[stageId] = true;
    saveStageProgress();
};

// (Exports)
window.stageEngine = Object.assign(window.stageEngine || {}, {
    end: window.hookStageBattleEnd,
    update: window.updateStageProgress,
    reload: loadChapters,
});

ไฟล์ js/shop.js
// js/shop.js - UI Rewrite V2 (2024) - Epic Seven Clone Frontend Shop

let shopDataV2 = [];
let purchaseLog = {};
let shopFilter = { text: "", type: "all" };

// โหลดข้อมูลร้านค้าใหม่
async function loadShopDataV2() {
  if (shopDataV2.length) return;
  try {
    const raw = await fetch('data/shop.json').then(r => r.json());
    shopDataV2 = Array.isArray(raw.shops) ? raw.shops : [];
  } catch { shopDataV2 = []; }
}

// โหลดประวัติการซื้อ
function loadShopLog() {
  try {
    purchaseLog = JSON.parse(localStorage.getItem('shop_purchase_log') || '{}');
  } catch { purchaseLog = {}; }
}

// เซฟประวัติการซื้อ
function saveShopLog() {
  localStorage.setItem('shop_purchase_log', JSON.stringify(purchaseLog));
}

// =================== UI SHOP MAIN POPUP ====================

async function openShopCenter(shopId = "main") {
  await loadShopDataV2();
  loadShopLog();
  await window.inventoryEngine?.reloadAll?.();

  let shop = shopDataV2.find(s => s.id === shopId && s.enabled);
  if (!shop) {
    window.openPopup('shop', `<div>ไม่พบร้านค้านี้ หรือปิดอยู่</div><button class="secondary-btn" onclick="closePopup()">ปิด</button>`, 'large', 'ร้านค้า');
    return;
  }

  // Filter, search
  const types = Array.from(new Set(shop.items.map(i => i.type || ""))).filter(x=>!!x);
  let typeSel = `<option value="all">ประเภททั้งหมด</option>` +
      types.map(tp=>`<option value="${tp}">${tp}</option>`).join('');
  let filterHtml = `
    <div style="display:flex;gap:10px 21px;flex-wrap:wrap;margin-bottom:14px;">
      <input type="text" placeholder="ค้นหาชื่อไอเท็ม..." style="flex:2;min-width:170px" id="shopSearchBox" value="${shopFilter.text||""}"/>
      <select id="shopTypeFilter" style="flex:1;min-width:120px">${typeSel}</select>
      <button class="secondary-btn" onclick="resetShopFilter()" style="min-width:62px">รีเซ็ต</button>
    </div>
  `;

  // Filter items
  let items = shop.items.filter(x=>x.enabled);
  if (shopFilter.text) {
    items = items.filter(i=>{
      let info = window.inventoryEngine.findItemById(i.item_id) || {};
      return (info.name||i.item_id||"").toLowerCase().includes(shopFilter.text.toLowerCase());
    });
  }
  if (shopFilter.type && shopFilter.type !== "all") {
    items = items.filter(i => (i.type||"") === shopFilter.type);
  }
  // Sort by: rare first, price, name
  items = items.slice().sort((a, b)=>{
    let ait = window.inventoryEngine.findItemById(a.item_id) || {};
    let bit = window.inventoryEngine.findItemById(b.item_id) || {};
    return (bit.rarity||0)-(ait.rarity||0) || (a.price_amount||0)-(b.price_amount||0) || ((ait.name||a.item_id||"")+(bit.name||b.item_id||""));
  });

  let itemHtml = items.length
    ? items.map(item => renderShopCard(shop, item)).join("")
    : `<div style="color:#eee;text-align:center;padding:1.7em 0">ไม่พบสินค้าที่ต้องการ</div>`;
  
  let mainHtml = `
    ${filterHtml}
    <div style="display: grid;grid-template-columns: repeat(auto-fit,minmax(210px,1fr));gap:18px;" id="shopGridArea">
    ${itemHtml}
    </div>
    <div style="margin-top:17px;text-align:right">
      <button class="secondary-btn" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('shop', mainHtml, 'large', shop.name);

  setTimeout(()=>{
    document.getElementById('shopSearchBox').oninput = ev=>{
      shopFilter.text = ev.target.value; openShopCenter(shopId);
    };
    document.getElementById('shopTypeFilter').value = shopFilter.type||"all";
    document.getElementById('shopTypeFilter').onchange = ev=>{
      shopFilter.type = ev.target.value; openShopCenter(shopId);
    };
  }, 100);
}
window.openShopCenter = openShopCenter;

// Shop Card - 1 รายการ
function renderShopCard(shop, item) {
  let invList = window.inventoryEngine?.list() || [];
  let itemMeta = window.inventoryEngine.findItemById(item.item_id) || {};
  let haveQty = invList.find(i=>i.id===item.item_id)?.qty || 0;
  let priceQty = invList.find(i=>i.id===item.price_item)?.qty || 0;

  let buyKey = `${shop.id}_${item.id}_${todayKey()}`;
  let bought = purchaseLog[buyKey] || 0;
  // ซื้อได้สูงสุด?
  let leftDaily  = item.daily_limit ? (item.daily_limit-bought) : "∞";
  let maxBuyOK = ((!item.daily_limit)||bought<item.daily_limit) && ((!item.can_buy)||bought<item.can_buy);
  let enoughtCash = priceQty >= (item.price_amount||0);
  let canBuy = maxBuyOK && enoughtCash;

  let badge = "";
  if(itemMeta.rarity>=4) badge = `<div style="position:absolute;top:8px;right:13px;color:gold;padding:.1em .8em;background:#3334">★${itemMeta.rarity}</div>`;
  if(haveQty>0) badge += `<div style="position:absolute;bottom:9px;left:13px;background:#71fa9c;color:#202;padding:.09em .7em;font-size:.92em">มีอยู่: ${haveQty}</div>`;

  let outStock = !canBuy;
  let img = itemMeta.img || "noimg.png";

  return `
    <div class="shop-card" style="position:relative;border:2px solid #286af677;border-radius:15px;background:#20253799;padding:14px 11px;margin-bottom:6px;min-height:181px;box-shadow:${outStock ? "0 2px 19px #f2242320":"0 2px 13px #1acf8327"};overflow:hidden;">
      ${badge}
      <div style="text-align:center;"><img src="img/item/${img}" style="width:38px;height:38px" alt="${itemMeta.name||item.item_id}"/></div>
      <div style="font-weight:700;font-size:1.1em;text-align:center;margin:.5em 0 .13em 0;">${itemMeta.name||item.item_id}</div>
      <div style="color:#ade;font-size:.94em;margin-bottom:2px;text-align:center;">${item.desc||itemMeta.description||''}</div>
      <div style="text-align:center;color:#ffd25c;font-size:.95em">จำนวน: <b>${item.amount}</b></div>
      <div style="text-align:center;margin-top:.3em;">
        <span style="color:gold;font-size:1.13em;font-weight:bold;">${item.price_amount}</span>
        <img src="img/item/${item.price_item}.png" style="width:16px;vertical-align:middle" />
        <span style="color:#aef;font-size:.97em;">(คงเหลือ: ${priceQty})</span>
      </div>
      <div style="margin:.37em 0 .17em 0;text-align:center;">
        ${item.daily_limit ? `<span style="color:#b4f6b3;font-size:.95em;">เหลือวันนี้: ${leftDaily}</span>` : ""}
      </div>
      <button class="primary-btn" style="width:100%;padding:.55em 0;font-size:1em;" onclick="promptBuyShopItem('${shop.id}','${item.id}')" ${!canBuy?"disabled":""}>${canBuy?"ซื้อ":"ซื้อไม่ได้"}</button>
    </div>
  `;
}

// Buy: ยืนยัน
window.promptBuyShopItem = function(shopId, itemId) {
  let shop = shopDataV2.find(s=>s.id==shopId);
  let item = shop?.items.find(i=>i.id==itemId);
  if(!shop||!item) return;
  let itemMeta = window.inventoryEngine.findItemById(item.item_id) || {};

  let invList = window.inventoryEngine?.list() || [];
  let priceQty = invList.find(i=>i.id===item.price_item)?.qty || 0;
  let haveQty = invList.find(i=>i.id===item.item_id)?.qty || 0;

  let buyKey = `${shop.id}_${item.id}_${todayKey()}`;
  let bought = purchaseLog[buyKey] || 0;
  let canBuy = ((item.daily_limit ? bought<item.daily_limit:true) && (item.can_buy?bought<item.can_buy:true) && priceQty >= (item.price_amount||0));
  if(!canBuy) return alert("ไม่สามารถซื้อสินค้านี้");

  window.openPopup("shopConfirm", `
    <div style="text-align:center;">
      <img src="img/item/${itemMeta.img||'noimg.png'}" style="width:47px;margin-bottom:8px;" /><br>
      <div style="font-size:1.11em;font-weight:700">${itemMeta.name||item.item_id}</div>
      <div style="margin-bottom:6px;color:#fcf090">${item.desc||itemMeta.description||""}</div>
      <div>ต้องการใช้ <b style="color:gold">${item.price_amount}</b> <img src="img/item/${item.price_item}.png" style="width:16px;vertical-align:middle"/> ซื้อ <b>${itemMeta.name} x${item.amount}</b> ?</div>
      <hr style="margin:11px 0;">
      <button class="primary-btn" onclick="doBuyShopAction('${shop.id}','${item.id}')" style="padding:.5em 2.1em;">ยืนยันซื้อ</button>
      <button class="secondary-btn" style="margin-left:1.1em;" onclick="closePopup()">ยกเลิก</button>
    </div>
  `, 'small', 'ยืนยันสั่งซื้อ');
}

// Buy Action
window.doBuyShopAction = function(shopId,itemId) {
  let shop = shopDataV2.find(s=>s.id==shopId);
  let item = shop?.items.find(i=>i.id==itemId);
  if(!shop||!item) return;
  let buyKey = `${shop.id}_${item.id}_${todayKey()}`;
  let bought = purchaseLog[buyKey]||0;

  let invList = window.inventoryEngine?.list() || [];
  let priceQty = invList.find(i=>i.id===item.price_item)?.qty || 0;
  // Double check
  if(item.daily_limit && bought>=item.daily_limit) return alert("ครบจำกัดรายวันแล้ว");
  if(item.can_buy && bought>=item.can_buy) return alert("ครบโควต้าซื้อแล้ว");
  if(priceQty<item.price_amount) return alert("ทรัพยากรไม่พอ");

  // ลบเงิน, เพิ่มของ
  window.inventoryEngine.remove(item.price_item, item.price_amount);
  window.inventoryEngine.add(item.item_id, item.amount);
  purchaseLog[buyKey] = bought+1;
  saveShopLog();
  closePopup('shopConfirm');

  window.openPopup("shopResult", `
    <div style="color:#19e6b4;font-weight:bold;text-align:center;font-size:1.1em">
      ซื้อสำเร็จ!<br>
      ได้รับ ${window.inventoryEngine.findItemById(item.item_id)?.name||item.item_id} x${item.amount}
    </div>
    <div style="margin:1.5em auto 0 auto;text-align:center;">
      <button class="primary-btn" onclick="closePopup();openShopCenter('${shopId}')">หน้าร้าน</button>
    </div>
  `, "small", "ซื้อสำเร็จ");
}

function resetShopFilter() {
  shopFilter = { text:"", type:"all" }; openShopCenter();
}

function todayKey() {
  let d = new Date();
  return d.getFullYear()+("0"+(d.getMonth()+1)).slice(-2)+("0"+d.getDate()).slice(-2);
}

// =========== MENU BIND ===============
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnShop');
  if(btn) btn.onclick = ()=>openShopCenter();
});

// Export API
window.shopEngine = {
  open: openShopCenter,
  reload: loadShopDataV2
};

ไฟล์ data/shop.json
{
  "shops": [
    {
      "id": "main",
      "name": "ร้านค้าหลัก",
      "type": "main",
      "enabled": true,
      "desc": "ซื้อไอเท็ม, วัตถุดิบ, และของจำเป็นประจำวัน",
      "refresh_type": "none",    
      "refresh_cycle_minutes": 0,
      "items": [
        {
          "id": "gold_5000",
          "item_id": "gold",
          "amount": 5000,
          "price_item": "diamond",
          "price_amount": 10,
          "desc": "รับ 5,000 Gold ทันที",
          "can_buy": 999,
          "daily_limit": 3,
          "enabled": true
        },
        {
          "id": "exp_potion_1",
          "item_id": "exp_potion",
          "amount": 1,
          "price_item": "gold",
          "price_amount": 110,
          "desc": "EXP Potion x1 สำหรับอัปเลเวลตัวละคร",
          "can_buy": 99,
          "daily_limit": 5,
          "enabled": true
        },
        {
          "id": "rune_shard_1",
          "item_id": "rune_shard",
          "amount": 1,
          "price_item": "gold",
          "price_amount": 200,
          "desc": "Rune Shard สำหรับสร้างรูน",
          "can_buy": 50,
          "daily_limit": 0,
          "enabled": true
        }
      ]
    },
    {
      "id": "event",
      "name": "Event Shop",
      "type": "event",
      "enabled": false,
      "desc": "ร้านค้านี้เปิดเฉพาะช่วงกิจกรรม",
      "refresh_type": "none",
      "items": []
    },
    {
      "id": "secret",
      "name": "Secret Shop",
      "type": "secret",
      "enabled": false,
      "desc": "สุ่มเปลี่ยนสินค้าใหม่ทุก 30 นาที",
      "refresh_type": "time",
      "refresh_cycle_minutes": 30,
      "items": []
    }
  ]
}

ไฟล์ js/announcement.js
/* Epic Seven Card Auto Battle - Animation Engine */
/* วางใน /js/animationEngine.js */

window.animationEngine = (function () {
    /** Card slide animation to attack */
    async function animateAttackCard(fromIdx, toIdx, fromSide, toSide, type = 'single') {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        const toCard = document.getElementById(`${toSide}${toIdx}`);
        if (!fromCard || !toCard) return;
        // สร้าง overlay
        const rectFrom = fromCard.getBoundingClientRect();
        const rectTo = toCard.getBoundingClientRect();
        // Absolute overlay clone
        const clone = fromCard.cloneNode(true);
        clone.style.position = "fixed";
        clone.style.left = rectFrom.left + 'px';
        clone.style.top = rectFrom.top + 'px';
        clone.style.width = rectFrom.width + 'px';
        clone.style.zIndex = "2000";
        clone.style.transition = 'all 0.35s cubic-bezier(.6,0,.2,1.4)';
        // Hide original
        fromCard.style.opacity = "0.4";
        document.body.appendChild(clone);
        await sleep(30);

        // เลื่อนการ์ดไปตำแหน่งเป้าหมาย
        clone.style.left = rectTo.left + 'px';
        clone.style.top = rectTo.top + 'px';
        clone.style.boxShadow = "0 0 32px #e7ff79c8, 0 0 80px #e3e37044";
        clone.style.transform = "scale(1.10) rotate(-3deg)";
        await sleep(330);

        // Flash/Shake เป้าหมาย
        shakeCard(toCard);
        // Remove overlay
        setTimeout(() => {
            clone.remove();
            fromCard.style.opacity = "1";
        }, 110);

        await sleep(180);
    }

    /** AoE Animation (wave blast) */
    async function animateAoEAttack(fromIdx, fromSide, toSide, targets) {
        const fromCard = document.getElementById(`${fromSide}${fromIdx}`);
        if (!fromCard) return;
        // Pulse the card
        pulseCard(fromCard, "#f2d13e");
        // Wave line to center
        targets.forEach((t) => {
            const tgt = document.getElementById(`${toSide}${t}`);
            if (tgt) {
                flashCard(tgt, "#ffd058");
                shakeCard(tgt);
            }
        });
        await sleep(340);
    }

    /** Heal effect (green glow, upward effect) */
    async function animateHeal(toIdx, toSide) {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, "#68eccc");
        // Heal "plus" popup up
        let plus = document.createElement('span');
        plus.textContent = "+HP";
        plus.style = "color:#68fdd8;font-weight:bold;font-size:1.18em;position:absolute;left:42%;top:17%;opacity:0;transition:top .4s,opacity .2s;";
        tgt.appendChild(plus);
        setTimeout(() => {
            plus.style.top = "-6%";
            plus.style.opacity = "1";
        }, 20);
        setTimeout(() => plus.remove(), 650);
        await sleep(390);
    }

    /** Buff/Debuff effect on card */
    async function animateBuffDebuff(toIdx, toSide, type = "buff") {
        const tgt = document.getElementById(`${toSide}${toIdx}`);
        if (!tgt) return;
        glowCard(tgt, type === "buff" ? "#98deff" : "#ff7b7b");
        await sleep(260);
    }

    // --- Utilities (Shake, Glow, Flash, Pulse) ---
    function shakeCard(card) {
        if (!card) return;
        card.animate([
            { transform: "translateX(0)" },
            { transform: "translateX(-12px)" },
            { transform: "translateX(13px)" },
            { transform: "translateX(-7px)" },
            { transform: "translateX(0)" }
        ], { duration: 320, easing: "ease-in" });
    }
    function glowCard(card, color) {
        if (!card) return;
        card.style.boxShadow = `0 0 15px 6px ${color}66`;
        setTimeout(() => (card.style.boxShadow = ""), 380);
    }
    function flashCard(card, color = "#fff") {
        if (!card) return;
        card.style.background = color;
        setTimeout(() => (card.style.background = ""), 170);
    }
    function pulseCard(card, color) {
        if (!card) return;
        card.animate([
            { boxShadow: `0 0 0px 0px ${color}40` },
            { boxShadow: `0 0 15px 8px ${color}bb` },
            { boxShadow: `0 0 0px 0px ${color}00` }
        ], { duration: 410 });
    }
    function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

    // --- Expose ---

    return {
        animateAttackCard,
        animateAoEAttack,
        animateHeal,
        animateBuffDebuff,
        shakeCard,
        glowCard,
        flashCard,
        pulseCard,
        sleep
    };
})();

ไฟล์ data/announcement.json
{
  "announcements": [
    {
      "id": "patch_20240601",
      "type": "patch",
      "title": "อัปเดตระบบต่อสู้เวอร์ชัน 1.0",
      "content": "*เพิ่มระบบ auto battle* โหมดใหม่: SPD BAR\nAnimation Slide การ์ดโจมตีแบบ Yu-Gi-Oh!\n\n- เพิ่มรับ EXP\n- เพิ่มระบบสุ่มกาชาและร้านค้า",
      "start_time": 1717200000000,
      "end_time": null,
      "show_time": 1717239842000,
      "pin": true,
      "force_popup": true,
      "enabled": true
    },
    {
      "id": "reward_june2024",
      "type": "reward",
      "title": "แจกไอเท็มฟรีประจำเดือนมิถุนายน",
      "content": "ล็อกอินวันนี้รับของขวัญเพชร 500\nและ EXP Potion x2 ฟรีไปเลย!\n\n*ระยะเวลา 1-7 มิ.ย. 2024*",
      "start_time": 1717214400000,
      "end_time": 1717791999000,
      "show_time": 1717214500000,
      "pin": false,
      "enabled": true
    },
    {
      "id": "event_runeweek",
      "type": "event",
      "title": "กิจกรรม Rune Week",
      "content": "เข้าสู่ระบบทุกวัน รับ Rune Shard x2\nและสุ่มกาชาได้เพิ่ม 1 ครั้งทุกวัน!",
      "start_time": 1717300800000,
      "end_time": 1717895999000,
      "show_time": 1717387200000,
      "pin": false,
      "enabled": true
    },
    {
      "id": "shop_promotion",
      "type": "shop",
      "title": "โปรโมชั่นร้านค้าเดือนมิถุนายน",
      "content": "ไอเท็มลดราคาสูงสุด 30% ที่ร้านค้าหลัก\n*เฉพาะ 1-5 มิ.ย. 2024*",
      "start_time": 1717214400000,
      "end_time": 1717559999000,
      "show_time": 1717214600000,
      "pin": false,
      "link_url": "",
      "enabled": true
    },
    {
      "id": "system_maintenance",
      "type": "system",
      "title": "แจ้งเวลาปิดปรับปรุงเซิร์ฟเวอร์",
      "content": "ระบบจะปิดปรับปรุงในวันที่ 4 มิ.ย. 2024 เวลา 00:00-03:00 น.\n*กรุณา logout ให้เรียบร้อยก่อนเวลานี้*",
      "start_time": 1717430400000,
      "end_time": 1717441200000,
      "show_time": 1717430500000,
      "pin": false,
      "enabled": true
    }
  ]
}

ไฟล์ js/redeem.js
// js/redeem.js
let redeemCodeList = [];
let userUsedRedeem = []; // [{code_id:..., redeemed_time:...}]
async function loadRedeemCodeList() {
  if (redeemCodeList.length) return;
  try {
    redeemCodeList = (await fetch('data/redeem.json').then(r=>r.json()))?.codes || [];
  } catch { redeemCodeList = []; }
  loadUserRedeemUsed();
}
function loadUserRedeemUsed() {
  userUsedRedeem = JSON.parse(localStorage.getItem('user_used_redeem') || '[]');
}
function saveUserRedeemUsed() {
  localStorage.setItem('user_used_redeem', JSON.stringify(userUsedRedeem));
}
// ป๊อปอัป "กรอกโค้ดรับรางวัล"
window.openRedeemPopup = function () {
  const html = `
    <div style="text-align:center;">
      <div style="font-size:1.16em;font-weight:600;margin-bottom:.88em;">🎁 กรอกโค้ดรับของรางวัล</div>
      <input id="redeemInputBox" placeholder="ใส่โค้ด (A-Z, 0-9)" style="width: 90%;" maxlength="32"/>
      <div style="margin:1.3em 0;"><button class="primary-btn" onclick="checkRedeemCode()">ยืนยันรับรางวัล</button></div>
      <div id="redeemResultHint" style="color:#ffc29a;font-size:.94em;margin-top:1em;"></div>
      <div style="color:#aee;margin-top:1.7em;font-size:.89em;">
        *โค้ด 1 คนใช้ได้ 1 ครั้ง, มีวันหมดอายุ, เฉพาะโค้ดที่ยังเปิดใช้งาน
      </div>
      <button class="secondary-btn" style="margin-top:2.2em;" onclick="closePopup()">ปิด</button>
    </div>
  `;
  window.openPopup('redeem', html, 'small', 'กรอกโค้ด');
  setTimeout(() => document.getElementById('redeemInputBox')?.focus(), 100);
};
// validate and ให้รางวัล
window.checkRedeemCode = async function () {
  await loadRedeemCodeList();
  const box = document.getElementById('redeemInputBox');
  if (!box) return;
  let code = box.value.trim().toUpperCase();
  let hintEl = document.getElementById('redeemResultHint');
  hintEl.innerText = "";
  if (!code.match(/^[A-Z0-9\-\_]+$/)) return hintEl.innerText = "กรุณากรอกโค้ดที่ถูกต้อง (A-Z, 0-9)";
  let redeem = redeemCodeList.find(c => c.id === code && c.enabled !== false);
  const now = Date.now();
  if (!redeem)
    return hintEl.innerText = "❌ ไม่พบโค้ดนี้ หรือโค้ดถูกปิด/หมดอายุแล้ว";
  if (redeem.start_time && now < redeem.start_time)
    return hintEl.innerText = "❌ โค้ดยังไม่เปิดให้ใช้";
  if (redeem.end_time && now > redeem.end_time)
    return hintEl.innerText = "❌ โค้ดนี้หมดอายุแล้ว";
  if (redeem.max_usage && redeem.used_count >= redeem.max_usage)
        return hintEl.innerText = "❌ โค้ดนี้ถูกใช้เต็มจำนวนแล้ว";
  // per user
  loadUserRedeemUsed();
  if (userUsedRedeem.some(u => u.code_id === code)) {
    return hintEl.innerText = "❌ คุณใช้โค้ดนี้ไปแล้ว 1 ครั้ง";
  }
  // ตรวจไอดีผู้เล่น (ควรล็อกอินก่อน, แต่ถ้าไม่มีก็จำลอง)
  let curUserId = localStorage.getItem('user_id') || 'guest';
  // ให้รางวัล (เพิ่มเข้า inventory/character)
  const rewardHtml = [];
  if (redeem.reward && Array.isArray(redeem.reward)) {
    for (let r of redeem.reward) {
      if (r.type === 'item') {
        window.addToInventory?.(r.id, r.qty || 1);
        rewardHtml.push(`<div>🎁 ได้รับ <b>${window.inventoryEngine?.findItemById(r.id)?.name || r.id} x${r.qty}</b></div>`);
      } else if (r.type === 'character') {
        window.collectCharacter?.(r.id);
        rewardHtml.push(`<div>🎴 ได้รับตัวละคร <b style="color:#84bcff;">${r.id}</b></div>`);
      }
    }
  }
  // เซฟ userUsedRedeem
  userUsedRedeem.push({ code_id: code, time: now, user: curUserId });
  saveUserRedeemUsed();
  // (ฝั่ง admin/หลังบ้านจะต้องเพิ่ม used_count เองในไฟล์ json)
  // แสดง popup ผลลัพธ์
  window.openPopup('redeemSuccess', `
    <div style="text-align:center;">
      <div style="font-size:1.15em;font-weight:700;color:#56f7ca;margin-bottom:9px;">รับรางวัลสำเร็จ!</div>
      ${rewardHtml.join('')}
      <button class="primary-btn" style="margin-top:1.2em;" onclick="closePopup();">โอเค</button>
    </div>
  `, 'small', 'ได้รับของรางวัล');
};

// Auto bind ปุ่มเมนู (ID: btnRedeem)
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnRedeem');
  if (btn) btn.onclick = window.openRedeemPopup;
});

// Expose export
window.redeemEngine = {
  open: window.openRedeemPopup,
  check: window.checkRedeemCode,
  reload: async () => { redeemCodeList = []; await loadRedeemCodeList(); }
};

ไฟล์ data/redeem.json
{
  "codes": [
    {
      "id": "WELCOME2024",           
      "reward": [                    
        { "type": "item", "id": "diamond", "qty": 500 },
        { "type": "item", "id": "exp_potion", "qty": 2 }
      ],
      "desc": "รับฟรีเพชร 500 + EXP Potion x2 (สำหรับผู้เล่นใหม่)",
      "start_time": 1717200000000,  
      "end_time": 1767167999000,    
      "max_usage": 10000,           
      "used_count": 0,              
      "per_user": 1,                
      "enabled": true
    },
    {
      "id": "JUNE_EVENT01",
      "reward": [
        { "type": "item", "id": "rune_shard", "qty": 6 }
      ],
      "desc": "กิจกรรม Rune June รับ Rune Shard x6",
      "start_time": 1717214400000,  
      "end_time": 1717791999000,    
      "max_usage": 500,
      "used_count": 49,
      "per_user": 1,
      "enabled": true
    },
    {
      "id": "INDIV_CODE_DEMO_123X",
      "reward": [
        { "type": "character", "id": "astra", "qty": 1 }
      ],
      "desc": "แจก Astra 5★ สำหรับกิจกรรม DEVS",
      "start_time": 1717200000000,
      "end_time": 1720000000000,
      "max_usage": 1,
      "used_count": 0,
      "per_user": 1,
      "enabled": true
    }
  ]
}

ไฟล์ js/auth.js
// auth.js (Rewrite 2024/06) - Epic Seven Card Battle - NEW LOGIN SYSTEM

// State
let Auth = {
    user: null,
    isLoggedIn: false,
    isAdmin: false
};

let userTable = [];

// ===== 1. โหลด user list จาก data/user.json =====
async function fetchUserTable() {
    if (userTable.length) return userTable;
    try {
        const res = await fetch('data/user.json');
        userTable = await res.json();
    } catch {
        userTable = [];
    }
    return userTable;
}

// ===== 2. บันทึก session (LocalStorage) =====
function saveSession(user) {
    localStorage.setItem('user_id', user.id);
    localStorage.setItem('user_name', user.name);
    localStorage.setItem('user_is_admin', user.role === "admin" ? "1" : "0");
}

function clearSession() {
    localStorage.removeItem('user_id');
    localStorage.removeItem('user_name');
    localStorage.removeItem('user_is_admin');
}

// ===== 3. ตรวจสอบ session ใน localStorage =====
function readSession() {
    let id = localStorage.getItem('user_id') || '';
    let name = localStorage.getItem('user_name') || '';
    let admin = localStorage.getItem('user_is_admin') === "1";
    if (id && name) {
        Auth = {
            user: { id, name, role: admin ? "admin" : "player" },
            isLoggedIn: true,
            isAdmin: admin
        };
    } else {
        Auth = { user: null, isLoggedIn: false, isAdmin: false };
    }
    // อัปเดตชื่อบน UI ถ้ามี
    if (typeof setPlayerName === 'function') {
        setPlayerName(Auth.isLoggedIn && Auth.user ? Auth.user.name : '');
    }
}
readSession();

// ===== 4. Popup ฟอร์ม Login =====
function renderLoginForm() {
    return `
        <div class="popup small" style="padding:1.3em 1.2em;">
          <button class="close" onclick="closePopup()">×</button>
          <h2 style="margin-bottom:.95em;">เข้าสู่ระบบ</h2>
          <div id="loginMsg" style="color:#f66;font-size:.93em;margin-bottom:4px;"></div>
          <input id="login_user" type="text" placeholder="User ID..." autocomplete="username" style="width:100%;margin-bottom:7px;">
          <input id="login_pass" type="password" placeholder="Password..." autocomplete="current-password" style="width:100%;margin-bottom:16px;">
          <button class="primary-btn" style="width:100%;margin-bottom:.6em;" onclick="doLogin()">
              ล็อกอิน
          </button>
          <button class="secondary-btn" style="width:100%;" onclick="closePopup()">ยกเลิก</button>
        </div>
    `;
}

window.openLoginPopup = async function () {
    await fetchUserTable();
    window.openPopup('login', renderLoginForm(), 'small', 'เข้าสู่ระบบ');
    setTimeout(() => {
        let el = document.getElementById('login_user');
        if (el) el.focus();
    }, 120);
};

// ===== 5. ฟังก์ชันล็อกอิน + ตรวจสอบ =====
window.doLogin = async function () {
    await fetchUserTable();
    const inputId = document.getElementById('login_user').value.trim();
    const inputPw = document.getElementById('login_pass').value;
    const elMsg = document.getElementById('loginMsg');
    const found = userTable.find(u =>
        u.id === inputId && u.password === inputPw && u.enabled !== false
    );
    if (found) {
        saveSession(found);
        readSession();
        closePopup();
        location.reload();
    } else {
        if (elMsg) elMsg.innerText = 'ชื่อผู้ใช้หรือรหัสผ่านผิด!';
    }
};

// ===== 6. Logout =====
window.doLogout = function () {
    clearSession();
    readSession();
    location.reload();
};

// ===== 7. Shortcut =====
window.getCurrentUser = function () {
    readSession();
    return Auth.user;
}
window.isAdmin = function () {
    readSession();
    return Auth.isAdmin;
}
window.isLoggedIn = function () {
    readSession();
    return Auth.isLoggedIn;
}

// ===== 8. On load: set event handler/login button =====
document.addEventListener('DOMContentLoaded', () => {
    readSession();
    let btn = document.getElementById('btnLogin');
    if (btn) {
        // Toggle text and func
        if (Auth.isLoggedIn) {
            btn.textContent = "ออกจากระบบ";
            btn.onclick = window.doLogout;
        } else {
            btn.textContent = "เข้าสู่ระบบ";
            btn.onclick = window.openLoginPopup;
        }
    }
    // กำหนดชื่อ user
    if (typeof setPlayerName === 'function') {
        setPlayerName(Auth.isLoggedIn && Auth.user ? Auth.user.name : '');
    }
});

// ===== 9. EXPORT (for legacy/compatibility) =====
window.authEngine = {
    user: () => getCurrentUser(),
    isAdmin,
    isLoggedIn,
    login: window.doLogin,
    logout: window.doLogout,
    open: window.openLoginPopup
};

ไฟล์ data/user.json
[
  {
    "id": "admin",
    "name": "Admin",
    "password": "adminpass123",
    "role": "admin",
    "enabled": true
  },
  {
    "id": "player1",
    "name": "Achiraya",
    "password": "p1demo!!",
    "role": "player",
    "enabled": true
  },
  {
    "id": "player2",
    "name": "Somchai",
    "password": "playerdemo2",
    "role": "player",
    "enabled": true
  }
]

ไฟล์ js/characterCollection.js
// js/characterCollection.js

/**
 * Epic Seven - Character Collection System (Frontend Only)
 * - Card grid, search, sort, filter, responsive, upgrade, rune
 * - Data driven by: localStorage char_collection & data/char/*.json
 * - Connect: upgrade.js, rune.js, team.js, popupManager.js
 * (c) 2024
 */

let charCollection = [];  // Owned character IDs
let charMeta = [];        // All char meta loaded
let filters = { text: '', star: 0, element: 'all', class: 'all' };

// ------------ 1. Load user collection from localStorage ------------
function loadCharCollection() {
    let arr = JSON.parse(localStorage.getItem('char_collection') || "[]");
    charCollection = arr.filter((id, idx) => arr.indexOf(id) === idx); // unique
}

// ------------ 2. Load meta data for all owned characters ------------
async function loadCharMeta() {
    await loadCharCollection();
    charMeta = await Promise.all(charCollection.map(async id => {
        try {
            let res = await fetch(`data/char/${id}.json`);
            return await res.json();
        } catch (e) { return null; }
    }));
    charMeta = charMeta.filter(c => !!c);
}

// ------------ 3. Render main UI grid ------------
function renderCharGrid() {
    let area = document.getElementById('characterArea');
    if (!area) return;
    let cs = charMeta.slice();
    if (filters.star > 0) cs = cs.filter(c => (c.star || 0) === Number(filters.star));
    if (filters.element !== 'all') cs = cs.filter(c => (c.element || "") === filters.element);
    if (filters.class !== 'all') cs = cs.filter(c => (c.class || "") === filters.class);
    if (filters.text.length) cs = cs.filter(c => c.name.toLowerCase().includes(filters.text.toLowerCase()));
    cs.sort((a, b) => (b.star || 0) - (a.star || 0) || (a.name.localeCompare(b.name)));
    let isMobile = window.innerWidth < 650;
    let html = `<div style="display:grid;grid-template-columns:repeat(${isMobile ? 3 : 6},1fr);gap:16px;">` +
        (cs.length ? cs.map(c => charCardBox(c)).join('') : '<div style="color:#fff;">ไม่มีตัวละคร</div>') +
        `</div>`;
    area.innerHTML = `
      <div style="display:flex;gap:10px;margin-bottom:10px;">
        <input id="charSearchBox" placeholder="ค้นหาชื่อ..." style="flex:1;max-width:180px;" value="${filters.text || ''}"/>
        <select id="starFilter"><option value="0">★ ทั้งหมด</option><option value="3">★3</option><option value="4">★4</option><option value="5">★5</option></select>
        <select id="eleFilter"><option value="all">ทุกธาตุ</option><option value="fire">🔥 ไฟ</option><option value="water">💧 น้ำ</option><option value="earth">🌱 ดิน</option><option value="dark">🌑 มืด</option><option value="light">🌟 แสง</option></select>
        <select id="classFilter"><option value="all">ทุกคลาส</option><option value="knight">อัศวิน</option><option value="warrior">นักรบ</option><option value="mage">จอมเวทย์</option><option value="ranger">เรนเจอร์</option><option value="assassin">แอสซาซิน</option><option value="monster">มอนสเตอร์</option></select>
      </div>
      ${html}
    `;
    document.getElementById('starFilter').value = filters.star;
    document.getElementById('eleFilter').value = filters.element;
    document.getElementById('classFilter').value = filters.class;
    document.getElementById('charSearchBox').oninput = ev => { filters.text = ev.target.value.trim(); renderCharGrid(); };
    document.getElementById('starFilter').onchange = ev => { filters.star = ev.target.value; renderCharGrid(); };
    document.getElementById('eleFilter').onchange = ev => { filters.element = ev.target.value; renderCharGrid(); };
    document.getElementById('classFilter').onchange = ev => { filters.class = ev.target.value; renderCharGrid(); };
}

// ------------ 4. Card box HTML ------------
function charCardBox(c) {
    let lock = isCharLocked(c.id);
    return `
      <div class="card" data-chrid="${c.id}" style="position:relative;">
        <img src="img/char/${c.img}" class="hero-img" alt="${c.name}" />
        <div class="name">${c.name}</div>
        <div style="font-size:.93em;color:#d9d;line-height:1.2em;">Lv. ${c.level || '-'} ★${c.star || '-'}</div>
        <div style="font-size:.89em;color:#cff;">ธาตุ: ${elIcon(c.element)} | ${classIcon(c.class)}</div>
        <div style="margin:6px 0;">
            <button class="primary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="showCharDetailPopup('${c.id}')">รายละเอียด</button>
            <button class="secondary-btn" style="padding:3px 1.1em;font-size:.97em;" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
            <button class="primary-btn" style="padding:3px 1em;font-size:.93em;" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
        </div>
        <button style="position:absolute;top:7px;right:14px;opacity:.8;background:none;border:0;color:#fa8;font-size:1.5em;outline:none;z-index:7"
            onclick="toggleCharLock('${c.id}');event.stopPropagation()" title="${lock ? 'ปลดล็อก' : 'ล็อก'}">
            ${lock ? '🔒' : '🔓'}
        </button>
      </div>`;
}
function elIcon(el) {
    return { fire: '🔥', water: '💧', earth: '🌱', dark: '🌑', light: '🌟' }[el] || '❔';
}
function classIcon(cls) {
    return { knight: '🛡️', warrior: '⚔️', mage: '🦉', ranger: '🏹', assassin: '🗡️', monster: '👾' }[cls] || '👽';
}

// ------------ 5. Lock/Unlock ------------
function isCharLocked(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    return ll.includes(chid);
}
function toggleCharLock(chid) {
    let ll = JSON.parse(localStorage.getItem('char_lock') || "[]");
    let idx = ll.indexOf(chid);
    if (idx >= 0) ll.splice(idx, 1); else ll.push(chid);
    localStorage.setItem('char_lock', JSON.stringify(ll));
    renderCharGrid();
}

// ------------ 6. Popup: Char Detail ------------
window.showCharDetailPopup = async function (charId) {
    let c = charMeta.find(c => c.id === charId);
    if (!c) return;
    let html = `
        <div style="display:flex;flex-direction:column;align-items:center;gap:7px;">
            <img src="img/char/${c.img}" class="hero-img" style="width:82px;margin:0 auto 9px auto;" />
            <div style="font-size:1.22em;font-weight:600">${c.name}</div>
            <div style="color:#b6deff;">Lv.${c.level || '-'} / ★${c.star||'-'} | ${elIcon(c.element)} ${classIcon(c.class)}</div>
            <hr style="width:86%;border:1px solid #234;" />
            <div>HP <b>${c.hp}</b> | ATK <b>${c.atk}</b> | DEF <b>${c.def}</b> | SPD <b>${c.spd}</b></div>
            <div>CRIT <b>${c.crit_rate}%</b> | CRIT DMG <b>${c.crit_dmg}%</b> | EFF <b>${c.effectiveness}%</b></div>
            <div>Skills: <ul>${(c.skills || []).map(s => `<li><b>${s.name}</b>: ${s.desc || ''}</li>`).join('')}</ul></div>
            <div style="margin-top:7px;">
                <button class="primary-btn" onclick="upgradeCharPopup('${c.id}')">อัปเกรด</button>
                <button class="primary-btn" onclick="runeEngine.openEquipPopup('${c.id}')">ใส่รูน</button>
                <button class="secondary-btn" onclick="closePopup()" style="margin-left:11px;">ปิด</button>
            </div>
        </div>`;
    window.openPopup('charDetail', html, 'large', c.name);
}

// ------------ 7. INIT [DOM Ready, bind menu] ------------
document.addEventListener('DOMContentLoaded', async () => {
    let btn = document.getElementById('btnCharacter');
    if (btn)
        btn.onclick = async () => {
            await loadCharMeta();
            renderCharGrid();
            window.openPopup('characterCollection', `<div id="characterArea"></div>`, 'large', 'คลังตัวละคร');
            renderCharGrid();
        };
});

// ให้ระบบอื่นเชื่อมต่อ (upgrade, rune)
window.characterEngine = {
    load: loadCharMeta,
    render: renderCharGrid
};

ไฟล์ js/passive.js
// js/passive.js
//
// Epic Seven Card Battle - Passive Engine (Rewrite 2024/06/Full Modular By GPT)
//
// Features: 
// - Aura/Always/Trigger/Custom support
// - Centralized EventManager
// - Extendable PassiveEvent definition
// - Robust UI popup bind (showDamage, popupPassive)
//

(function () {
  // 1. State: passive list + ready flag
  let passiveMeta = [];
  let fetched = false;

  // 2. Load all passive config from /data/passive.json
  async function loadPassiveMeta() {
    if (fetched && passiveMeta.length) return;
    try {
      passiveMeta = await fetch('data/passive.json').then(r => r.json());
      fetched = true;
    } catch {
      passiveMeta = [];
    }
  }

  // 3. Interface: Passive object logic
  //    Use: passiveManager.applyAllOnInit(character)
  //         passiveManager.trigger('onDamaged', ...)
  class PassiveManager {
    constructor() {
      this._registeredEvents = {};
    }

    // Register all passive effects on char (eg. when start battle)
    async applyAllOnInit(char, context = {}) {
      await loadPassiveMeta();
      if (!char.passive) return;
      let assigned = Array.isArray(char.passive) ? char.passive : [char.passive];

      assigned.forEach(pid => {
        let meta = passiveMeta.find(p => p.id === pid);
        if (!meta) return;

        // 1. Aura/passive stat buff
        if (meta.type === "aura" && meta.effect) {
          Object.entries(meta.effect).forEach(([stat, val]) => {
            char[stat] = (char[stat] || 0) + val;
          });
          // Add passive tag for UI
          char._auraNotes = char._auraNotes || [];
          char._auraNotes.push({ icon: meta.icon, name: meta.name });
        }
        // 2. Apply always type flag (e.g. immunity)
        if (meta.type === "always" && meta.effect) {
          char._alwaysFlags = Object.assign({}, char._alwaysFlags || {}, meta.effect);
        }
        // 3. Register event-driven passive
        if (meta.type === "trigger") {
          char._passiveTriggers = char._passiveTriggers || [];
          char._passiveTriggers.push(meta);
        }
      });
    }

    // Centralized trigger for passive event ("onDamaged", "onHit", etc.)
    trigger(event, char, payload = {}) {
      if (!char?._passiveTriggers) return;
      char._passiveTriggers.forEach(pas => {
        // Matched event (eg. onDamaged), Chance roll
        if (pas.event === event && Math.random() * 100 < (pas.chance ?? 100)) {
          // Effect logic
          if (pas.effect) {
            Object.entries(pas.effect).forEach(([k, v]) => {
              // [Stat] instant gain (if exist)
              if (["hp", "atk", "def", "spd"].includes(k)) {
                char[k] = (char[k] || 0) + v;
                showPassivePopup(char, pas, `+${k.toUpperCase()} ${v}`);
              }
              // Heal
              else if (k === "heal") {
                let amount = typeof v === "number" ? Math.floor(char.hp * v) : 0;
                char.currHp = Math.min(char.hp, char.currHp + amount);
                showPassivePopup(char, pas, `Heal ${amount}`);
                if (window.showDamage) window.showDamage(char.index || 0, char.side || 'hero', -amount, "#5dfcb3");
              }
              // Buff/Debuff
              else if (k === "buff" && window.effectEngine) {
                window.effectEngine.addEffect(char, Array.isArray(v) ? v : [v], "buff");
                showPassivePopup(char, pas, t("popup.equip") + (pas.name ? ": " + pas.name : ''));
              }
              else if (k === "debuff" && window.effectEngine) {
                window.effectEngine.addEffect(char, Array.isArray(v) ? v : [v], "debuff");
                showPassivePopup(char, pas, "DEBUFF");
              }
            });
          }
          // Option: add more handling per game logic
          if (pas.showText) showPassivePopup(char, pas, pas.showText);
        }
      });
    }

    // Register global event hooks (optional for expansion)
    on(event, handler) {
      if (!this._registeredEvents[event]) this._registeredEvents[event] = [];
      this._registeredEvents[event].push(handler);
    }
    emit(event, ...args) {
      (this._registeredEvents[event] || []).forEach(fn => fn(...args));
    }

    // Utility: global filter, eg. check immunity
    static hasImmunity(char) {
      return !!(char?._alwaysFlags?.immune_all || (char.buffs || []).some(b => b.type === "immune"));
    }
  }

  // 4. Passive popup show logic for UI (dmg/heal/other)
  function showPassivePopup(char, pas, txt) {
    // Use UI function, fallback to alert
    let dom = document.getElementById(`${char.side || "hero"}${char.index || 0}`);
    if (dom) {
      let pop = document.createElement('span');
      pop.className = "damage-popup";
      pop.style.color = pas?.color || '#31ebdb';
      pop.innerHTML = `${pas?.icon ? pas.icon + " " : ""}<b>PASSIVE</b>: ${txt || pas?.name || ""}`;
      dom.appendChild(pop);
      setTimeout(() => pop.remove(), 1300);
    } else {
      // fallback for debug/dev
      // alert(`[Passive] ${char.name}: ${txt}`);
    }
  }

  // 5. Export public API
  const passiveEngine = {
    load:   loadPassiveMeta,
    apply:  (char, context) => (new PassiveManager()).applyAllOnInit(char, context),
    trigger: (event, char, payload) => (new PassiveManager()).trigger(event, char, payload),
    // Optional utilities for future
    hasImmunity: PassiveManager.hasImmunity
  };

  // Expose window.passiveEngine for global use
  window.passiveEngine = passiveEngine;

  // (Option) For all system auto-load
  window.addEventListener && window.addEventListener("DOMContentLoaded", () => loadPassiveMeta());

})();

/*
USAGE (like old version—compatible):
- await passiveEngine.apply(char, char.passive);      // at battle start
- passiveEngine.trigger('onDamaged', char, payload);  // eg. in doSkill/onHit
- (UI) showPassivePopup(char, passive, message)       // for display popup

Passive event types: onDamaged, onEndTurn, onHit, onHeal, onBattleInit, etc.
*/

ไฟล์ data/passive.json
[
  {
    "id": "counter_attack",
    "name": "Counter Strike",
    "icon": "↩️",
    "desc": "มีโอกาส 25% โต้กลับเมื่อถูกโจมตี",
    "type": "trigger",
    "event": "onDamaged",
    "chance": 25,
    "effect": {"buff":[{"type":"counter_ready","turn":1}]},
    "showText": "โต้กลับ!"
  },
  {
    "id": "team_aura_def",
    "name": "Commander Aura",
    "icon": "🛡️",
    "desc": "ทีมได้รับ DEF+12 ตลอดเวลาขณะต่อสู้",
    "type": "aura",
    "effect": { "def": 12 }
  },
  {
    "id": "self_heal",
    "name": "Regeneration",
    "icon": "💚",
    "desc": "ฟื้นฟู HP 10% ของ Max HP เมื่อจบเทิร์นตัวเอง",
    "type": "trigger",
    "event": "onEndTurn",
    "chance": 100,
    "effect": { "heal": 0.10 },
    "showText": "Regenerate"
  },
  {
    "id": "immunity_permanent",
    "name": "Immunity Master",
    "icon": "🔒",
    "desc": "ไม่ติด debuff เลย",
    "type": "always",
    "effect": { "immune_all": true }
  },
  {
    "id": "relentless_aura_spd",
    "name": "Relentless Aura",
    "icon": "💨",
    "desc": "ทีมได้รับ SPD+8",
    "type": "aura",
    "effect": { "spd": 8 }
  },
  {
    "id": "burn_on_hit",
    "name": "Inferno Retaliate",
    "icon": "🔥",
    "desc": "มีโอกาส 30% ติด burn ศัตรูที่ตีตัวนี้",
    "type": "trigger",
    "event": "onDamaged",
    "chance": 30,
    "effect": { "debuff": [{"type":"burn", "turn":2}] },
    "showText": "Burned!"
  }
]

ไฟล์ admin.html
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <title>Admin Panel - Epic Seven Card Auto Battle</title>
  <link rel="stylesheet" href="css/style.css" />
</head>
<body class="dark-bg">
<header>
  <nav class="navbar">
    <div class="logo">ADMIN - Epic Seven Card Battle</div>
    <ul class="menu">
      <li><button onclick="window.location.href='index.html'">กลับหน้าหลักเกม</button></li>
      <li><button id="btnUserMgr">บัญชีผู้เล่น</button></li>
      <li><button id="btnCharMgr">ตัวละคร/Skills</button></li>
      <li><button id="btnItemMgr">ไอเท็ม</button></li>
      <li><button id="btnRuneMgr">รูน</button></li>
      <li><button id="btnQuestMgr">เควสต์</button></li>
      <li><button id="btnGachaMgr">กาชา</button></li>
      <li><button id="btnStageMgr">ดันเจี้ยน</button></li>
      <li><button id="btnShopMgr">ร้านค้า</button></li>
      <li><button id="btnAnnounceMgr">ประกาศ</button></li>
      <li><button id="btnRedeemMgr">โค้ด</button></li>
      <li><button id="btnChatMod">แชท</button></li>
    </ul>
    <div class="profile">
      <span id="adminName"></span>
      <button id="btnLogout">ออกจากระบบ</button>
    </div>
  </nav>
</header>

<main style="max-width: 1120px;margin: 1.5em auto;background:#262a38bb;border-radius:18px;box-shadow:0 2px 26px #0b0a10a6;padding:26px 24px;min-height:440px;">
  <div id="adminMainArea"></div>
</main>

<div id="popupLayer"></div>
<footer>
  <small style="color: #aaa;">&copy; 2024 - Admin Panel (For Epic Seven Fan Project)</small>
</footer>

<script src="js/utils.js"></script>
<script src="js/admin.js"></script>
</body>
</html>

ไฟล์ js/admin.js
// js/admin.js (ฉบับเต็มสำหรับ admin panel)

/* ==== 1) LOGIN ADMIN GUARD ==== */
document.addEventListener('DOMContentLoaded', () => {
  // Check admin session
  const isAdmin = localStorage.getItem("user_is_admin") === "1";
  const adminName = localStorage.getItem("user_name");

  if (!isAdmin) {
    alert("ต้องเป็นผู้ดูแลระบบเท่านั้น");
    window.location.href = "index.html";
    return;
  }
  document.getElementById('adminName').innerText = `👤 ${adminName}`;
  document.getElementById("btnLogout").onclick = function () {
    localStorage.removeItem("user_id");
    localStorage.removeItem("user_name");
    localStorage.removeItem("user_is_admin");
    window.location.href = "index.html";
  };

  // Menu event mapping
  {
    let mapping = {
      btnUserMgr:   renderUserMgr,
      btnCharMgr:   renderCharMgr,
      btnItemMgr:   renderItemMgr,
      btnRuneMgr:   renderRuneMgr,
      btnQuestMgr:  renderQuestMgr,
      btnGachaMgr:  renderGachaMgr,
      btnStageMgr:  renderStageMgr,
      btnShopMgr:   renderShopMgr,
      btnAnnounceMgr: renderAnnounceMgr,
      btnRedeemMgr: renderRedeemMgr,
      btnChatMod:   renderChatMgr
    };
    Object.entries(mapping).forEach(([btn, fn])=>{
      let el = document.getElementById(btn);
      if (el) el.onclick = fn;
    });
  }

  // Default: open user mgr
  renderUserMgr();
});

// Helper: set main admin area content
function setAdminMain(html) {
  document.getElementById("adminMainArea").innerHTML = html;
}

/* ==== 2) USER MANAGEMENT ==== */
async function renderUserMgr() {
  let res = await fetch('data/user.json').then(r=>r.json());
  let html = `<h2>จัดการผู้ใช้</h2>
    <table style="width:100%;background:#223247;border-radius:12px;">
      <tr style="color:#bfa;font-size:1.13em;"><th>ID</th><th>ชื่อ</th><th>Role</th><th>สถานะ</th><th>ควบคุม</th></tr>
      ${res.map(u=>
        `<tr>
          <td>${u.id}</td>
          <td>${u.name}</td>
          <td>${u.role}</td>
          <td><span style="color:${u.enabled?'#7fe':'#fad'};">${u.enabled?'✔️ ใช้งาน':'❌ ถูกปิด'}</span></td>
          <td>
            <button onclick="editUserPopup('${u.id}')" class="primary-btn" style="font-size:.95em;">แก้ไข</button>
            <button onclick="banUser('${u.id}')" class="secondary-btn" style="font-size:.93em;">แบนผู้ใช้</button>
          </td>
        </tr>`).join('')}
    </table>
    <div style="margin:16px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addUserPopup()">+ เพิ่มผู้ใช้</button>
    </div>`;
  setAdminMain(html);
}
window.renderUserMgr = renderUserMgr;

window.editUserPopup = function (uid) {
  alert("ฟอร์มแก้ไขผู้ใช้อยู่ระหว่างพัฒนา");
}
window.addUserPopup = function () {
  alert("ฟอร์มเพิ่มผู้ใช้ใหม่อยู่ระหว่างพัฒนา");
}
window.banUser = function (uid) {
  alert(`ระบบแบนผู้ใช้ "${uid}" อยู่ระหว่างพัฒนา (ในเวอร์ชัน local ต้องแก้ใน data/user.json โดยตรงหรือเชื่อมต่อ backend)`);
};

/* ==== 3) CHAR MANAGEMENT ==== */
async function renderCharMgr() {
  let charIds = ['astra','slime_basic'];
  let all = await Promise.all(charIds.map(id=>fetch(`data/char/${id}.json`).then(r=>r.json())));
  let html = `<h2>จัดการตัวละคร (meta-json)</h2>
    <table style="width:100%;background:#2a3247;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>★</th><th>ธาตุ</th><th>class</th><th>สกิล</th><th>แก้ไข</th></tr>
      ${all.map(c=>`
        <tr>
         <td><img src="img/char/${c.img}" style="width:36px;border-radius:9px;" /></td>
         <td>${c.id}</td>
         <td>${c.name}</td>
         <td>${c.star}</td>
         <td>${c.element}</td>
         <td>${c.class}</td>
         <td>${(c.skills||[]).length}</td>
         <td><button onclick="editCharPopup('${c.id}')" class="primary-btn" style="font-size:.93em;">แก้ไข</button></td>
        </tr>`).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="addCharPopup()">+ เพิ่มตัวละคร</button>
    </div>
    <div style="color:#aaa;padding:13px 0;">*การอัปเดตจะ Reflect เมื่อลงไฟล์ .json จริง (auto reload)</div>`;
  setAdminMain(html);
}
window.renderCharMgr = renderCharMgr;
window.editCharPopup = function (cid) { window.openPopup('editChar',`<div>ยังไม่รองรับ (โปรดแก้ json โดยตรง)</div>`,'small','แก้ไขตัวละคร'); }
window.addCharPopup = function () { window.openPopup('addChar',`<div>ยังไม่รองรับ (โปรดเขียน .json ใหม่ใน data/char/)</div>`,'small','เพิ่มตัวละคร'); }

/* ==== 4) ITEM MANAGEMENT ==== */
async function renderItemMgr() {
  let items = await fetch('data/item.json').then(r=>r.json());
  let html = `<h2>จัดการไอเท็ม</h2>
    <table style="width:100%;background:#273257;border-radius:12px;">
      <tr><th>รูป</th><th>ID</th><th>ชื่อ</th><th>type</th><th>desc</th><th>ราคา</th></tr>
      ${items.map(it=>
        `<tr>
           <td><img src="img/item/${it.img||'noimg.png'}" style="width:32px" /></td>
           <td>${it.id}</td><td>${it.name}</td>
           <td>${it.type||'-'}</td><td>${it.description||'-'}</td>
           <td>${it.price}</td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin:14px 0 0 0;text-align:right;">
      <button class="primary-btn" onclick="alert('เพิ่มไอเท็ม: โปรดเพิ่มที่ data/item.json')">+ เพิ่มไอเท็ม</button>
    </div>`;
  setAdminMain(html);
}
window.renderItemMgr = renderItemMgr;

/* ==== 5) RUNE ==== */
async function renderRuneMgr() {
  let runes = await fetch('data/rune.json').then(r=>r.json());
  let html = `<h2>จัดการรูน (rune.json)</h2>
    <table style="width:100%;background:#223549;border-radius:12px;">
      <tr><th>ICON</th><th>id</th><th>name</th><th>slot</th><th>main stat</th><th>set</th><th>sub</th></tr>
      ${runes.filter(r=>r.id).map(r=>
        `<tr>
         <td>${r.icon||'🔸'}</td>
         <td>${r.id}</td>
         <td>${r.name}</td>
         <td>${r.slot}</td>
         <td>${r.main_stat ? `${r.main_stat.type}+${r.main_stat.val}` : '-'}</td>
         <td>${r.set}</td>
         <td>${(r.sub_stats||[]).map(s=>`${s.type}+${s.val}`).join(', ')}</td>
        </tr>`).join('')}
    </table>
    <div style="text-align:right;margin-top:13px;">
      <button class="primary-btn" onclick="alert('เพิ่มรูน: โปรดเพิ่มใน data/rune.json')">+ เพิ่มรูน</button>
    </div>`;
  setAdminMain(html);
}
window.renderRuneMgr = renderRuneMgr;

/* ==== 6) QUEST (JSON) ==== */
async function renderQuestMgr() {
  setAdminMain(`<h2>จัดการเควสต์ (โปรดแก้ไขที่ data/quest/*.json)</h2>
    <div>เควสต์/ภารกิจสามารถเพิ่มหรือแก้ไขได้ทันทีที่ไฟล์แล้ว reload เกม</div>
    <div style="margin:16px 0;"><button class="primary-btn" onclick="alert('รอเพิ่มหน้าเควสต์')">ตัวอย่าง</button></div>`);
}

/* ==== 7) GACHA ==== */
async function renderGachaMgr() {
  let gacha = await fetch('data/gacha.json').then(r=>r.json());
  let html = `<h2>จัดการกาชา (gacha.json)</h2>
      <table style="width:100%;background:#243168;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>เปิดใช้งาน</th><th>type</th><th>cost</th><th>pool</th><th>ควบคุม</th></tr>
      ${gacha.gachas.map(g=>
        `<tr>
         <td>${g.id}</td>
         <td>${g.name}</td>
         <td>${g.enabled ? "✔" : "❌"}</td>
         <td>${g.type}</td>
         <td>${g.cost.amount} ${g.cost.item}</td>
         <td>${g.pool.map(p=>`${p.char_id}(★${p.rarity})`).join(', ')}</td>
         <td><button onclick="alert('edit gacha: โปรดแก้ไขที่ data/gacha.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:11px;text-align:right;">
        <button onclick="alert('เพิ่มกาชา: โปรดแก้ไข data/gacha.json')" class="primary-btn">+ เพิ่มกาชา</button>
      </div>`;
  setAdminMain(html);
}
window.renderGachaMgr = renderGachaMgr;

/* ==== 8) STAGE/DUNGEON ==== */
async function renderStageMgr() {
  setAdminMain(`<h2>จัดการ Stage/Dungeon</h2>
  <div>แผนที่, Zone, Stage ทั้งหมด config ใน data/stage/*.json</div>`);
}

/* ==== 9) SHOP ==== */
async function renderShopMgr() {
  let shop = await fetch('data/shop.json').then(r=>r.json());
  let html = `<h2>จัดการร้านค้า</h2>
      <table style="width:100%;background:#223249;border-radius:12px;">
      <tr><th>id</th><th>name</th><th>type</th><th>สถานะ</th><th>สินค้า</th></tr>
      ${shop.shops.map(s=>
        `<tr>
         <td>${s.id}</td>
         <td>${s.name}</td>
         <td>${s.type}</td>
         <td>${s.enabled ? "✔" : "❌"}</td>
         <td>${(s.items||[]).length} รายการ</td>
        </tr>`).join('')}
      </table>
      <div style="margin-top:10px;text-align:right;">
        <button onclick="alert('update shop: โปรดแก้ไขที่ data/shop.json')" class="primary-btn">+ เพิ่มร้านค้า/สินค้า</button>
      </div>`;
  setAdminMain(html);
}
window.renderShopMgr = renderShopMgr;

/* ==== 10) ANNOUNCEMENT ==== */
async function renderAnnounceMgr() {
  let ann = await fetch('data/announcement.json').then(r=>r.json());
  let html = `<h2>จัดการประกาศ</h2>
    <table style="width:100%;background:#142449;border-radius:10px;">
    <tr><th>id</th><th>title</th><th>pin</th><th>type</th><th>เวลา</th><th>แก้ไข</th></tr>
    ${ann.announcements.map(a=>
      `<tr>
        <td>${a.id}</td><td>${a.title}</td>
        <td>${a.pin?'✔':'❌'}</td>
        <td>${a.type}</td>
        <td>${a.show_time ? new Date(a.show_time).toLocaleString() : '-'}</td>
        <td><button onclick="alert('Announce: โปรดแก้ไขที่ data/announcement.json')" class="primary-btn" style="font-size:.96em;">แก้ไข</button></td>
      </tr>`
    ).join('')}
    </table>
    <div style="margin-top:10px;text-align:right">
     <button class="primary-btn" onclick="alert('เพิ่ม/ลบประกาศ: โปรดแก้ที่ announcement.json')">+ เพิ่มประกาศ</button>
    </div>
    <div style="color:#ead;padding:13px;">*ประกาศใหม่/ลบ ต้อง reload ไฟล์ announcement.json แล้วรีเฟรชเกม</div>`;
  setAdminMain(html);
}
window.renderAnnounceMgr = renderAnnounceMgr;

/* ==== 11) REDEEM CODE ==== */
async function renderRedeemMgr() {
  let rc = await fetch('data/redeem.json').then(r=>r.json());
  let html = `<h2>จัดการโค้ด (redeem)</h2>
    <table style="width:100%;background:#212d41;border-radius:12px;">
      <tr><th>id</th><th>desc</th><th>active</th><th>จำนวนที่ใช้</th><th>แก้ไข</th></tr>
      ${rc.codes.map(c=>
        `<tr>
         <td>${c.id}</td>
         <td>${c.desc}</td>
         <td>${c.enabled?'✔':'❌'}</td>
         <td>${c.used_count||0}/${c.max_usage||'-'}</td>
         <td><button onclick="alert('แก้ไขโค้ด: โปรดแก้ไขใน data/redeem.json')" class="primary-btn">แก้ไข</button></td>
        </tr>`
      ).join('')}
    </table>
    <div style="margin-top:11px;text-align:right;">
      <button onclick="alert('เพิ่มโค้ด: โปรดแก้ไข data/redeem.json โดยตรง')" class="primary-btn">+ เพิ่มโค้ด</button>
    </div>`;
  setAdminMain(html);
}
window.renderRedeemMgr = renderRedeemMgr;

/* ==== 12) CHAT MOD/PANEL ==== */
async function renderChatMgr() {
  // Load chat log, banned words
  let chat = [];
  try { chat = await fetch('data/chat.json').then(r=>r.json()); } catch { chat = []; }
  let banned = [];
  try { banned = await fetch('data/banned_words.json').then(r=>r.json()); } catch {banned = [];}
  let html = `<h2>ควบคุมแชท/ข้อความ</h2>
    <h3>บันทึกข้อความล่าสุด (${chat.length})</h3>
    <div style="max-height:210px;overflow-y:auto;">
      <table style="width:100%;background:#23236c;border-radius:11px;">
        <tr><th style="width:120px;">เวลา</th><th style="width:180px;">ผู้ใช้</th><th>ข้อความ</th><th>ควบคุม</th></tr>
        ${chat.slice(-50).reverse().map(c=>
          `<tr>
            <td>${c.time ? (new Date(c.time)).toLocaleTimeString() : '-'}</td>
            <td>${c.user}</td>
            <td>${escapeHTML(c.text)}</td>
            <td>
              <button class="secondary-btn" style="padding:.2em 1.2em;" onclick="alert('ลบข้อความนี้: แก้ chat.json')">ลบ</button>
            </td>
          </tr>`
        ).join('')}
      </table>
    </div>
    <h3>คำต้องห้าม (${banned.length})</h3>
    <div>
      <ul>
      ${banned.map(word=>`<li>${escapeHTML(word)} <button class="secondary-btn" onclick="alert('ลบคำต้องห้าม: โปรดแก้ banned_words.json โดยตรง')">ลบ</button></li>`).join('')}
      </ul>
      <button class="primary-btn" onclick="alert('เพิ่มคำต้องห้าม: โปรดเพิ่มใน banned_words.json')">+ เพิ่มคำต้องห้าม</button>
    </div>
    <div style="color:#98ffe7;margin:11px 0 0 0;">* ต้องอัปเดตไฟล์ JSON และรีเฟรชจึงจะมีผล</div>`;
  setAdminMain(html);
}
window.renderChatMgr = renderChatMgr;

// Utility for safe display in table
function escapeHTML(str) {
  return (str || "").replace(/[<>&"]/g, c=>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c]));
}

ไฟล์ stage/chapter1.json
{
  "id": "chapter1",
  "name": "บทที่ 1 : ป่าแห่งการเริ่มต้น",
  "desc": "ออกเดินทางสู่ป่ามืดเพื่อฝึกฝนและพบเพื่อนใหม่",
  "zones": [
    {
      "id": "zone1",
      "name": "ป่าลำธารตะวันออก",
      "stages": [
        {
          "id": "c1z1s1",
          "name": "ทางเดินป่า (ง่าย)",
          "desc": "ฝึกขั้นพื้นฐานกับสไลม์ตัวเล็ก",
          "recommended_level": 1,
          "require_energy": 2,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 1 }
              ]
            }
          ],
          "drops": [
            { "id": "gold", "min": 50, "max": 65, "rate": 80 }
          ],
          "exp_reward": 25
        },
        {
          "id": "c1z1s2",
          "name": "เนินลาดเอียง",
          "desc": "เริ่มเจอมอนสเตอร์สองตัว",
          "recommended_level": 2,
          "require_energy": 2,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 2 },
                { "id": "slime_basic", "level": 2 }
              ]
            }
          ],
          "drops": [
            { "id": "gold", "min": 60, "max": 80, "rate": 85 }
          ],
          "exp_reward": 28
        },
        {
          "id": "c1z1s3",
          "name": "ร่องน้ำตกแห้ง",
          "desc": "ต้องเจอ Slime ทั้งแถว",
          "recommended_level": 3,
          "require_energy": 3,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 3 },
                { "id": "slime_basic", "level": 2 },
                { "id": "slime_basic", "level": 2 }
              ]
            }
          ],
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 1, "rate": 15 }
          ],
          "exp_reward": 32
        },
        {
          "id": "c1z2s1",
          "name": "ต้นไม้สูงเทียมเมฆ",
          "desc": "มอนสเตอร์เริ่มแข็งแกร่งขึ้น",
          "recommended_level": 4,
          "require_energy": 3,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 4 },
                { "id": "slime_basic", "level": 4 }
              ]
            }
          ],
          "drops": [
            { "id": "rune_shard", "min": 1, "max": 2, "rate": 23 }
          ],
          "exp_reward": 35
        },
        {
          "id": "c1z2s2",
          "name": "คูน้ำลึก",
          "desc": "พบกับ บอส Slime ใหญ่",
          "recommended_level": 6,
          "require_energy": 3,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 5 },
                { "id": "slime_basic", "level": 6 }
              ]
            }
          ],
          "drops": [
            { "id": "gold", "min": 75, "max": 105, "rate": 88 }
          ],
          "exp_reward": 41
        },
        {
          "id": "c1z2s3",
          "name": "โพรงไฟ",
          "desc": "เจอมอนสเตอร์ 3 ตัว สีฟ้า",
          "recommended_level": 7,
          "require_energy": 4,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 6 },
                { "id": "slime_basic", "level": 6 },
                { "id": "slime_basic", "level": 5 }
              ]
            }
          ],
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 2, "rate": 25 }
          ],
          "exp_reward": 46
        },
        {
          "id": "c1z3s1",
          "name": "ทางไปสระน้ำ",
          "desc": "ทดสอบการวางแผนกับทีมสี่ตัว",
          "recommended_level": 8,
          "require_energy": 5,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 7 },
                { "id": "slime_basic", "level": 7 },
                { "id": "slime_basic", "level": 6 }
              ]
            }
          ],
          "drops": [
            { "id": "rune_shard", "min": 1, "max": 2, "rate": 28 }
          ],
          "exp_reward": 55
        },
        {
          "id": "c1z3s2",
          "name": "กลุ่มเต่านำโชค",
          "desc": "ต่อสู้ยาว สไลม์ 4 ตัว",
          "recommended_level": 9,
          "require_energy": 5,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 7 },
                { "id": "slime_basic", "level": 8 },
                { "id": "slime_basic", "level": 8 },
                { "id": "slime_basic", "level": 8 }
              ]
            }
          ],
          "drops": [
            { "id": "gold", "min": 90, "max": 125, "rate": 90 }
          ],
          "exp_reward": 59
        },
        {
          "id": "c1z3s3",
          "name": "เนินเขาลับ",
          "desc": "ทดสอบความแข็งแกร่ง, สไลม์ Lv.9",
          "recommended_level": 10,
          "require_energy": 6,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 9 }
              ]
            }
          ],
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 2, "rate": 33 }
          ],
          "exp_reward": 64
        },
        {
          "id": "c1z4s1",
          "name": "หน้าทางเข้า",
          "desc": "เริ่มท้าทายบอสจริงจัง",
          "recommended_level": 11,
          "require_energy": 7,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 10 },
                { "id": "slime_basic", "level": 10 }
              ]
            }
          ],
          "drops": [
            { "id": "gold", "min": 120, "max": 160, "rate": 95 }
          ],
          "exp_reward": 69
        },
        {
          "id": "c1z4s2",
          "name": "บ่อเวทย์มนตร์",
          "desc": "ชุด combo ศัตรู Lv.11",
          "recommended_level": 12,
          "require_energy": 8,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 11 },
                { "id": "slime_basic", "level": 11 },
                { "id": "slime_basic", "level": 10 }
              ]
            }
          ],
          "drops": [
            { "id": "exp_potion", "min": 1, "max": 3, "rate": 48 }
          ],
          "exp_reward": 74
        },
        {
          "id": "c1z4s3",
          "name": "สนามฝึกยักษ์",
          "desc": "ด่านสุดท้าย ท้าทายที่สุดในบทนี้!",
          "recommended_level": 13,
          "require_energy": 10,
          "waves": [
            {
              "enemies": [
                { "id": "slime_basic", "level": 12 },
                { "id": "slime_basic", "level": 12 },
                { "id": "slime_basic", "level": 12 },
                { "id": "slime_basic", "level": 12 }
              ]
            }
          ],
          "drops": [
            { "id": "rune_shard", "min": 2, "max": 4, "rate": 40 }
          ],
          "exp_reward": 85
        }
      ]
    }
  ]
}

ไฟล์ js/chat.js
// js/chat.js

/*
  Epic Seven Card Auto Battle - Chat System
  - GM / Global / System / Player Chat
  - เก็บ chat.json + banned_words.json
  - Responsive, security filter, limited send rate
  - ใช้กับ popup UI
  (C) 2024
*/

let chatList = [];     // [{user, text, time}, ...]
let bannedWords = [];  // ["badword1", ...]
let chatLastTime = 0;
const CHAT_LOG_MAX = 50;

// โหลด chat log (localStorage/data)
async function loadChat() {
  if (!chatList.length) {
    try {
      let arr = JSON.parse(localStorage.getItem('chat_log') || "[]");
      chatList = arr;
    } catch { chatList = []; }
  }
}
function saveChat() {
  let arr = chatList.slice(-CHAT_LOG_MAX); // keep recent
  localStorage.setItem('chat_log', JSON.stringify(arr));
}

// โหลด banned words
async function loadBannedWords() {
  if (!bannedWords.length) {
    try {
      let arr = await fetch('data/banned_words.json').then(r=>r.json());
      bannedWords = arr;
    } catch { bannedWords = []; }
  }
}

// ฟังก์ชัน render popup UI
async function openChatPopup() {
  await loadChat(); await loadBannedWords();
  renderChatListUI();

  let html = `
      <div style="max-height:300px;overflow-y:auto;" id="chatAreaList"></div>
      <div style="margin-top:1.0em;display:flex;gap:7px;">
        <input id="chatInputBox" maxlength="90" placeholder="พิมพ์ที่นี่..." style="flex:1;"/>
        <button class="primary-btn" onclick="sendChatMsg()">ส่ง</button>
      </div>
      <div style="font-size:.86em;color:#cae;margin-top:.3em;">ขีดจำกัดครั้งละ 1 ข้อความต่อ 3 วินาที</div>
      <button class="secondary-btn" style="margin-top:9px;" onclick="closePopup()">ปิด</button>
  `;
  window.openPopup('chat', html, 'tall', 'แชท Global');

  document.getElementById('chatInputBox').focus();
  setInterval(renderChatListUI, 4000); // refresh
}

// Render ข้อความ
function renderChatListUI() {
  let el = document.getElementById('chatAreaList');
  if (!el) return;
  let arr = chatList.slice(-CHAT_LOG_MAX);
  el.innerHTML = arr.map(c =>
   `<div style="display:flex;align-items:center;gap:7px;margin-bottom:2px;">
      <span style="color:#77f;font-weight:600;font-size:.98em;">[${formatChatTime(c.time)}] ${escapeHTML(c.user)}:</span>
      <span style="font-size:.97em;">${escapeHTML(c.text)}</span>
      ${c.system ? ` <span style="color:#ef7;font-size:.89em;">[System]</span>` : ""}
    </div>`).join('');
  el.scrollTop = el.scrollHeight;
}

// ฟอร์แมตเวลา
function formatChatTime(ts) {
  let d = new Date(ts);
  return d.getHours().toString().padStart(2,"0")+":"+d.getMinutes().toString().padStart(2,"0");
}

// ส่งข้อความ
window.sendChatMsg = function() {
  let box = document.getElementById('chatInputBox');
  if (!box) return;
  let txt = (box.value || "").trim();
  if (!txt) return;
  if (txt.length>90) return alert('ข้อความยาวเกิน 90 ตัวอักษร');
  let now = Date.now();
  // Anti spam/rapid
  if (now - chatLastTime < 3000) { alert("ต้องรอ 3 วินาทีต่อข้อความ"); return; }
  chatLastTime = now;
  // ดึงชื่อ
  let username = localStorage.getItem('user_name') || 'Guest';
  // Filter banned
  let test = txt.toLowerCase();
  if (bannedWords.some(w => test.includes(w))) { alert("ข้อความไม่เหมาะสม!"); return; }
  // Safe HTML, not allow tags
  if (txt.match(/[<>]/)) { alert("ไม่อนุญาต HTML"); return; }
  // Push log
  chatList.push({ user: username, text: txt, time: now, system: false });
  // ตัดเก็บแค่ 50 messages
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  box.value = "";
  renderChatListUI();
}

// Add system message (เรียกจาก battle/gacha)
window.addSystemChat = function(msg) {
  let now = Date.now();
  chatList.push({ user: "System", text: msg, time: now, system: true });
  chatList = chatList.slice(-CHAT_LOG_MAX);
  saveChat();
  renderChatListUI();
}

// Escape HTML
function escapeHTML(str) {
  return (str || "").replace(/[<>"']/g, c =>
    ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;',"'":'&#39;'}[c]));
}

// Auto mount ปุ่มแชทในเมนู
document.addEventListener('DOMContentLoaded', () => {
  let btn = document.getElementById('btnChat');
  if (btn) btn.onclick = openChatPopup;
});

// Export
window.chatEngine = {
  open: openChatPopup,
  addSystem: window.addSystemChat,
  reloadWords: async()=>{bannedWords=[];await loadBannedWords();}
};

ไฟล์ data/chat.json
[
  {
    "user": "System",
    "text": "ยินดีต้อนรับสู่แชท Global!",
    "time": 1717214400000,
    "system": true
  }
]

ไฟล์ banned_words.json
[
  "เหี้ย","ควย","สัส","fuck","shit","bitch","แม่ง","ส้นตีน"
]

ไฟล์ js/gachaLog.js
// js/gachaLog.js - Epic Seven Card System: Gacha Log ระบบล็อกประวัติการสุ่มกาชา

// Log: { user_id, time, gacha_id, char_id, rarity }
let gachaLogList = [];
let gachaLogLoaded = false;

// โหลด log กาชา (จาก localStorage หรือ data/gacha_log.json สำหรับ admin)
async function loadGachaLog() {
    if (gachaLogLoaded) return;
    try {
        gachaLogList = JSON.parse(localStorage.getItem('gacha_log') || '[]');
    } catch { gachaLogList = []; }

    // ถ้าเป็น admin สามารถโหลดทุก log จากไฟล์ (read-only)
    if (window.isAdmin && window.isAdmin()) {
        try {
            let allLog = await fetch('data/gacha_log.json').then(r => r.json());
            gachaLogList = allLog.logs || [];
        } catch { /* skip if unavailable */ }
    }
    gachaLogLoaded = true;
}

// เซฟ log ลง localStorage ผู้ใช้ (เก็บ 200 รายการล่าสุด)
function saveGachaLog() {
    localStorage.setItem('gacha_log', JSON.stringify(gachaLogList));
}

// เพิ่ม log ใหม่ (ทุกครั้งสุ่ม)
window.addGachaLog = function({ user_id, gacha_id, char_id, rarity }) {
    const entry = {
        user_id: user_id || (localStorage.getItem('user_id') || 'guest'),
        gacha_id,
        char_id,
        rarity,
        time: Date.now()
    };
    gachaLogList.push(entry);
    gachaLogList = gachaLogList.slice(-200);
    saveGachaLog();
};

// ดู log ย้อนหลังเฉพาะของ user ปัจจุบัน
window.queryMyGachaLog = async function(limit = 50) {
    await loadGachaLog();
    const user_id = localStorage.getItem('user_id') || 'guest';
    return gachaLogList.filter(l => l.user_id === user_id).slice(-limit).reverse();
};

// (Admin) ดู log ทุกคน
window.queryAllGachaLog = async function(limit = 1000) {
    await loadGachaLog();
    if (!window.isAdmin || !window.isAdmin()) {
        alert("ต้องเป็นแอดมินจึงจะดู log ทั้งหมดได้");
        return [];
    }
    return gachaLogList.slice(-limit).reverse();
};

// Render Popup แสดง log กาชา user
window.openMyGachaLogPopup = async function() {
    const log = await window.queryMyGachaLog(60);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">ประวัติการสุ่มกาชาล่าสุด</div>
        <div style="max-height:340px;overflow-y:auto;">
        <table style="background:#1a2637;width:99%;border-radius:13px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="5" style="color:#faa;text-align:center;">ยังไม่มีกาชา</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('gachaLog', html, 'large', "ประวัติสุ่มกาชา");
};

// (Admin) Render Log ทั้งหมด popup
window.openAdminAllGachaLogPopup = async function() {
    const log = await window.queryAllGachaLog(500);
    let html = `
        <div style="font-size:1.14em;font-weight:bold;margin-bottom:7px;">[ADMIN] ประวัติการสุ่มกาชาทุกผู้ใช้</div>
        <div style="max-height:370px;overflow-y:auto;">
        <table style="background:#19263a;width:99%;border-radius:8px;">
        <tr style="color:#7dd;"><th>#</th><th>วัน/เวลา</th><th>User</th><th>กาชา</th><th>ตัวละคร</th><th>★</th></tr>
        ${
            log.length ? 
            log.map((l, i) => `<tr>
                <td>${i+1}</td>
                <td>${(new Date(l.time)).toLocaleString()}</td>
                <td>${l.user_id}</td>
                <td>${l.gacha_id}</td>
                <td>${l.char_id}</td>
                <td style="color:${l.rarity>=5?'gold':'#bee'};">★${l.rarity}</td>
            </tr>`).join("") 
            : `<tr><td colspan="6" style="color:#faa;">ไม่มี log</td></tr>`
        }
        </table>
        </div>
        <div style="text-align:right;margin-top:13px;">
            <button class="secondary-btn" onclick="closePopup()">ปิด</button>
        </div>
    `;
    window.openPopup('allGachaLog', html, 'large', "Gacha Log (ADMIN)");
};

// Auto menu: เพิ่มใน admin panel หรือเมนู profile
document.addEventListener('DOMContentLoaded', ()=>{
    if (document.getElementById('btnGachaLog')) {
        document.getElementById('btnGachaLog').onclick = window.openMyGachaLogPopup;
    }
});

// Export ให้ระบบอื่นเชื่อม
window.gachaLogEngine = {
    add: window.addGachaLog,
    mylog: window.queryMyGachaLog,
    all: window.queryAllGachaLog,
    open: window.openMyGachaLogPopup
};

ไฟล์  data/gacha_log.json
{
  "logs": [
    {
      "user_id": "player1",
      "time": 1717228300000,
      "gacha_id": "premium_summon",
      "char_id": "astra",
      "rarity": 5
    },
    {
      "user_id": "player2",
      "time": 1717228400000,
      "gacha_id": "premium_summon",
      "char_id": "slime_basic",
      "rarity": 3
    }
  ]
}

ไฟล์ energy.js
// js/energy.js
//
// Epic Seven Card Battle - Energy (Stamina) System (Frontend only)
//
// รองรับ energy bar, ลด/เพิ่มระหว่างเล่นดันเจี้ยน, รีเซ็ต, ใช้ item, ป็อปอัป เติม/แจ้งหมด, อัปเดต UI อัตโนมัติ
// สามารถ sync กับ LocalStorage หรือ API/JSON ในอนาคตได้

const DEFAULT_MAX_ENERGY = 45;     // cap ค่า default
const REGEN_INTERVAL_MIN = 12;     // 1 energy ต่อกี่นาที? (12 นาที = 5/ชม)
const REGEN_AMOUNT    = 1;
const REGEN_TICK_MS   = 60 * 1000; // 1 นาที/loop (ปรับเป็น 10 วิ/DEV ได้)
const ENERGY_ITEM_IDS = ['heal_potion']; // ใช้ heal_potion เติม energy ได้
let energy_config = { max: DEFAULT_MAX_ENERGY, regen_min: REGEN_INTERVAL_MIN };

// ===== 1. STATE =====
function getEnergy() {
    let e = Number(localStorage.getItem('user_energy'));
    if (isNaN(e)) e = energy_config.max;
    return e;
}

function setEnergy(val) {
    localStorage.setItem('user_energy', val);
    renderEnergyBar();
}

function getEnergyMax() {
    return energy_config.max || DEFAULT_MAX_ENERGY;
}

// เวลาเหลือจนเติม 1 energy อัตโนมัติ (timestamp)
function getNextRegenTs() {
    let ts = Number(localStorage.getItem('energy_next_ts'));
    if (!ts) {
        ts = Date.now() + energy_config.regen_min * 60 * 1000;
        localStorage.setItem('energy_next_ts', ts);
    }
    return ts;
}

function setNextRegenTs(ts) {
    localStorage.setItem('energy_next_ts', ts);
}

// ===== 2. REGEN AUTO PER TIME (เฉพาะออน/เปิดเกม) =====
function energyRegenTick() {
    let eNow = getEnergy();
    let eMax = getEnergyMax();
    if (eNow >= eMax) {
        setNextRegenTs(Date.now() + energy_config.regen_min * 60 * 1000);
        return;
    }
    let ts = getNextRegenTs();
    let now = Date.now();
    if (now >= ts) {
        setEnergy(Math.min(eMax, eNow + REGEN_AMOUNT));
        setNextRegenTs(now + energy_config.regen_min * 60 * 1000);
        renderEnergyBar();
    }
}

// ===== 3. Energy UI BAR (Footer, Header, หรือ Popup) =====
function renderEnergyBar() {
    let bar = document.getElementById('energyBarUI');
    if (!bar) {
        bar = document.createElement('div');
        bar.id = 'energyBarUI';
        Object.assign(bar.style, {
            position: 'fixed',
            left: '18px',
            top: '82px',
            zIndex: '50',
            background: '#211d27e8',
            color: '#c8f8fd',
            borderRadius: '12px',
            padding: '7px 16px 5px 16px',
            fontFamily: 'inherit',
            fontWeight: 'bold',
            boxShadow: '0 3px 19px #14effa24',
            fontSize: '1.08em',
            minWidth: '110px',
            userSelect: 'none',
            cursor: 'pointer'
        });
        document.body.appendChild(bar);
        bar.onclick = openEnergyDetailPopup;
    }
    let energy = getEnergy();
    let eMax = getEnergyMax();
    let ts = getNextRegenTs();
    let minLeft = Math.max(0, Math.ceil((ts - Date.now()) / 60000));
    bar.innerHTML = `<span style="color:#71eaff;font-size:1.23em;">⚡ ENERGY</span> <span style="color:#fafd85;">${energy}</span>/<b>${eMax}</b><span style="font-size:.93em;color:#8ee;"> ${energy < eMax ? `(+1 ใน ${minLeft}นาที)` : ''}</span>`;
}

// Popup รายละเอียด
function openEnergyDetailPopup() {
    let energy = getEnergy();
    let max = getEnergyMax();
    let minLeft = Math.ceil((getNextRegenTs() - Date.now()) / 60000);
    let html = `
      <div style="padding:6px 11px;text-align:center;">
        <div style="font-size:1.1em;margin-bottom:8px;">⚡ <b>พลังงาน</b> (${energy} / ${max})</div>
        <div style="color:#bdf;">${energy < max ? `จะฟื้น +1 energy ในอีก <b>${minLeft}</b> นาที` : 'เต็มสูงสุดแล้ว'}</div>
        <hr style="margin:12px 0;" />
        <button class="primary-btn" style="margin-bottom:6px;" onclick="refillEnergyWithItem()">ใช้ Heal Potion เพิ่ม Energy</button>
        <div style="font-size:.95em;color:#7cf;">Heal Potion = +15 Energy</div>
        <hr style="margin:12px 0;" />
        <button class="secondary-btn" onclick="closePopup()">ปิด</button>
      </div>
    `;
    window.openPopup('energyDetail', html, 'small', 'พลังงาน Energy');
}

window.refillEnergyWithItem = function() {
    // ใช้ไอเท็ม (heal_potion) ใน inventory
    let inventory = window.inventoryEngine?.list() || [];
    let owned = inventory.find(i => ENERGY_ITEM_IDS.includes(i.id) && i.qty >= 1);
    if (!owned) {
        alert("ไม่มี Heal Potion ในคลัง");
        return;
    }
    let val = 15;
    let energy = getEnergy();
    let max = getEnergyMax();
    let after = Math.min(max, energy + val);
    setEnergy(after);
    window.inventoryEngine.remove(owned.id, 1);
    closePopup('energyDetail');
    setTimeout(() => renderEnergyBar(), 222);
    alert(`Energy +${after - energy}`);
};

// ===== 4. Energy ลด/เพิ่ม ระหว่างเล่นดันเจี้ยน/อื่นๆ =====
window.addEnergy = function(val) {
    let e = Math.min(getEnergyMax(), getEnergy() + val);
    setEnergy(e);
    renderEnergyBar();
};
window.reduceEnergy = function(val) {
    let e = Math.max(0, getEnergy() - val);
    setEnergy(e);
    renderEnergyBar();
};

// ===== 5. INIT (DOMContentLoaded) =====
document.addEventListener('DOMContentLoaded', () => {
    // โหลด config
    fetch('data/energy.json').then(r => r.json()).then(cfg => {
        if (cfg?.max) energy_config.max = cfg.max;
        if (cfg?.regen_min) energy_config.regen_min = cfg.regen_min;
    }).catch(() => {});

    // ถ้ายังไม่มี energy ให้เติมเต็ม
    if (!localStorage.getItem('user_energy')) setEnergy(energy_config.max);
    // ติด energy bar UI
    setTimeout(() => renderEnergyBar(), 350);

    // Loop regen ทุก REGEN_TICK_MS
    setInterval(energyRegenTick, REGEN_TICK_MS);

    // ทุกครั้งที่เล่นดันเจี้ยนหรืออื่น ๆ ต้องเรียก
    window.renderEnergyBar = renderEnergyBar;
    window.openEnergyDetailPopup = openEnergyDetailPopup;
});

// ===== 6. Export API สำหรับระบบอื่นเชื่อมใช้ =====
window.energyEngine = {
    get: getEnergy,
    set: setEnergy,
    max: getEnergyMax,
    add: window.addEnergy,
    reduce: window.reduceEnergy,
    render: renderEnergyBar,
    openDetail: openEnergyDetailPopup,
    config: energy_config,
};

ไฟล์ data/energy.json
{
  "max": 45,
  "regen_min": 12 
}

ไฟล์ data/config.json
{
  "battle": {
    "spd_bar_max": 100,
    "spd_frame": 120,
    "max_team": 4,
    "max_monster": 4,
    "show_crit_popup": true,
    "ani_slide_duration": 350
  },
  "exp": {
    "base_win": 60,
    "base_lose": 18,
    "exp_up_event": 1.0
  },
  "drop": {
    "exp_potion_rate": 55,
    "rune_shard_rate": 22,
    "gold_rate": 80
  },
  "stat_curve": {
    "hero_hp": 1.085,
    "hero_atk": 1.08,
    "hero_def": 1.09
  },
  "energy": {
    "max": 45,
    "regen_min": 12
  },
  "cooldown": {
    "base_cd_reduce": 1,
    "cd_reset_by_item": true
  },
  "limit": {
    "max_inventory": 999,
    "max_char_collection": 50,
    "max_party": 4
  },
  "gacha": {
    "pity_enabled": true,
    "pity_count": 20,
    "gacha_log_limit": 150
  },
  "file_version": "1.0.0",
  "update": "2024-06-07"
}

ไฟล์ js/localization.js
// js/localization.js
/**
 * Localization System (Epic Seven Card Battle)
 * - Auto-detect, allow manual switch
 * - All string must use key, ex: t("menu.team")
 * - Work with all modular code, async/dynamic
 * (c) 2024
 */

let langData = {};       // Object of all text key:value
let langList = ['th', 'en']; // So far - more add as needed
let currentLang = 'th';  // Default: Thai

// Load language data from /data/lang/*.json
async function loadLang(lang) {
    if (!langList.includes(lang)) lang = 'en';
    currentLang = lang;
    langData = {};
    try {
        langData = await fetch(`data/lang/${lang}.json`).then(r => r.json());
        localStorage.setItem('user_lang', lang);
    } catch {
        langData = {};
    }
    applyLanguageToUI();
}

// Localizer function t(key) | lang(key)
function t(key, args = {}) {
    let keys = key.split('.');
    let val = langData;
    for (let k of keys) {
        val = (val || {})[k];
        if (!val) break;
    }
    if (!val) return key;
    // Replace {xxx} in text by args.xxx
    if (typeof val === 'string') {
        return val.replace(/{(\w+)}/g, (a, b) => args[b] || '');
    }
    return val;
}

// Apply language to all .trans-key UI (with data-trans="key")
function applyLanguageToUI() {
    document.querySelectorAll('[data-trans]').forEach(el => {
        el.innerHTML = t(el.getAttribute('data-trans'));
    });
}

// Add lang switcher menu/button in your UI
function renderLangMenu(containerId = "langMenu") {
    let html = `<select id="langSel" style="padding:.4em 1.4em;font-size:1em;">` +
        langList.map(code => `<option value="${code}" ${code === currentLang ? "selected" : ""}>${langName(code)}</option>`).join('') +
        `</select>`;
    (document.getElementById(containerId) || document.body).innerHTML = html;
    setTimeout(() => {
        document.getElementById('langSel').onchange = e => {
            loadLang(e.target.value);
            applyLanguageToUI();
        };
    }, 1);
}

function langName(code) {
    return {
        en: 'English',
        th: 'ไทย',
        ja: '日本語'
    }[code] || code.toUpperCase();
}

// On startup: load language (from localStorage or browser)
document.addEventListener('DOMContentLoaded', () => {
    let userLang = localStorage.getItem('user_lang') || navigator.language.substr(0,2) || 'th';
    if (!langList.includes(userLang)) userLang = 'th';
    loadLang(userLang);
    // Optional: render switcher menu somewhere (ex: footer)
    if (document.getElementById('footerLangMenu')) renderLangMenu('footerLangMenu');
});

// Expose for modules
window.t = t;
window.lang = t;
window.selectLang = loadLang;
window.applyLanguageToUI = applyLanguageToUI;
window.renderLangMenu = renderLangMenu;

ไฟล์ data/lang/en.json
{
  "menu": {
    "team": "Team Setup",
    "battle": "Battle",
    "inventory": "Inventory",
    "quest": "Quest",
    "shop": "Shop",
    "gacha": "Gacha",
    "character": "Characters",
    "announcement": "Announcement",
    "chat": "Chat",
    "login": "Login",
    "logout": "Logout"
  },
  "popup": {
    "ok": "OK",
    "cancel": "Cancel",
    "close": "Close",
    "confirm": "Confirm",
    "use_item": "Use Item",
    "upgrade": "Upgrade",
    "equip": "Equip",
    "result_win": "Victory!",
    "result_lose": "Defeat"
  },
  "battle": {
    "auto": "Auto",
    "start": "Start Battle",
    "back": "Back",
    "hp": "HP",
    "atk": "ATK",
    "def": "DEF",
    "spd": "SPD",
    "crit": "Crit",
    "exp_gain": "EXP gained",
    "drop_items": "Drop Items"
  },
  "inventory": {
    "title": "Inventory",
    "use": "Use",
    "no_item": "No items"
  },
  "character": {
    "title": "Character Box",
    "lock": "Lock",
    "unlock": "Unlock",
    "upgrade": "Upgrade"
  },
  "gacha": {
    "draw1": "Draw 1",
    "draw10": "Draw 10",
    "result": "Gacha Result"
  },
  "energy": {
    "energy": "Energy",
    "full": "Full",
    "refill": "Refill",
    "next": "in {min} min"
  },
  "admin": {
    "panel": "Admin Panel",
    "user": "User",
    "item": "Item",
    "quest": "Quest",
    "gacha": "Gacha",
    "shop": "Shop"
  }
}

ไฟล์ data/lang/th.json
{
  "menu": {
    "team": "จัดทีม",
    "battle": "ต่อสู้",
    "inventory": "คลังไอเท็ม",
    "quest": "เควสต์",
    "shop": "ร้านค้า",
    "gacha": "กาชา",
    "character": "คลังตัวละคร",
    "announcement": "ประกาศ",
    "chat": "แชท",
    "login": "เข้าสู่ระบบ",
    "logout": "ออกจากระบบ"
  },
  "popup": {
    "ok": "ตกลง",
    "cancel": "ยกเลิก",
    "close": "ปิด",
    "confirm": "ยืนยัน",
    "use_item": "ใช้ไอเท็ม",
    "upgrade": "อัปเกรด",
    "equip": "ใส่รูน",
    "result_win": "ชัยชนะ!",
    "result_lose": "แพ้"
  },
  "battle": {
    "auto": "ออโต้",
    "start": "เริ่มต่อสู้",
    "back": "กลับ",
    "hp": "HP",
    "atk": "โจมตี",
    "def": "ป้องกัน",
    "spd": "ความเร็ว",
    "crit": "คริ",
    "exp_gain": "ได้รับ EXP",
    "drop_items": "ไอเท็มที่ได้รับ"
  },
  "inventory": {
    "title": "คลังไอเท็ม",
    "use": "ใช้",
    "no_item": "ยังไม่มีไอเท็ม"
  },
  "character": {
    "title": "คลังตัวละคร",
    "lock": "ล็อก",
    "unlock": "ปลดล็อก",
    "upgrade": "อัปเกรด"
  },
  "gacha": {
    "draw1": "สุ่ม 1 ครั้ง",
    "draw10": "สุ่ม 10 ครั้ง",
    "result": "ผลลัพธ์การกาชา"
  },
  "energy": {
    "energy": "พลังงาน",
    "full": "เต็ม",
    "refill": "เติมพลังงาน",
    "next": "อีก {min} นาที"
  },
  "admin": {
    "panel": "Admin Panel",
    "user": "ผู้ใช้",
    "item": "ไอเท็ม",
    "quest": "เควสต์",
    "gacha": "กาชา",
    "shop": "ร้านค้า"
  }
}

ช่วยรื้อไฟล์ index.html ใหม่ทั้งหมดแล้วเขียนโค้ดขึ้นมาใหม่ สาเหตุอยากทำให้หน้าล๊อกอินบังหน้าหลักก่อน จำเป็นต้องกรอกข้อมูลล๊อกอินก่อนถึงจะแสดงหน้าแรกแล้วเล่นเกมได้ ทำให้เชื่อมต่อกับทุกจุดเหมือนกันไม่ให้ขัดกัน แก้แล้วขอไฟล์ฉบับเต็มกลับมา
ห้ามทำให้จุดเชือมต่ออื่นๆเสียหายหรือทำให้เกิดบัคใหม่